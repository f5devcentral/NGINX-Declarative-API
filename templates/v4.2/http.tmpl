# NGINX configuration file - HTTP servers - generated by https://github.com/f5devcentral/NGINX-Declarative-API

{# --- Maps section --- #}

{% if declaration.maps %}
{% for m in declaration.maps %}

map {{ m.match }} {{ m.variable }} {
    {% for e in m.entries %}
        {%- if e.keymatch|lower == "exact" %}{% endif -%}
        {%- if e.keymatch|lower == "regex" %} ~^ {%- endif -%}
        {%- if e.keymatch|lower == "iregex" %} ~*^ {%- endif -%}
        {{ e.key }} {{ e.value }};
    {% endfor -%}

}
{% endfor %}
{% endif %}

{# --- Snippets section --- #}
{% if declaration.snippet and declaration.snippet.content %}{{ declaration.snippet.content | b64decode }}{% endif %}


{# --- Upstreams section --- #}
{% if declaration.upstreams %}
{% for u in declaration.upstreams %}
{% if u.name %}
{% if u.origin %}
upstream {{ u.name }} {
    zone {{ u.name }} 64k;
    {% for o in u.origin -%}
    server {{ o.server }}{% if o.weight %} weight={{ o.weight }}{% endif %}{% if o.max_fails %} max_fails={{ o.max_fails }}{% endif %}{% if o.fail_timeout %} fail_timeout={{ o.fail_timeout }}{% endif %}{% if o.max_conns %} max_conns={{ o.max_conns }}{% endif %}{% if o.slow_start %} slow_start={{ o.slow_start }}{% endif %}{% if o.backup and o.backup == True %} backup{% endif %};
    {% endfor %}

    {% if u.sticky and u.sticky.cookie and u.sticky.expires and u.sticky.domain and u.sticky.path -%}
    sticky cookie {{ u.sticky.cookie }}{% if u.sticky.expires %} expires={{ u.sticky.expires }}{% endif %}{% if u.sticky.domain %} domain={{ u.sticky.domain }}{% endif %}{% if u.sticky.path %} path={{ u.sticky.path }}{% endif %};
    {% endif -%}

    {% if u.snippet and u.snippet.content %}{{ u.snippet.content | b64decode }}{% endif %}

}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}

{# --- Rate limit section --- #}

{% if declaration.rate_limit %}
{% for rl in declaration.rate_limit %}
limit_req_zone {{ rl.key }} zone={{ rl.name }}:{{ rl.size }} rate={{ rl.rate }};
{% endfor %}
{% endif %}

{# --- Server section for NGINX Plus API --- #}

{% if declaration.nginx_plus_api %}
{% if declaration.nginx_plus_api.listen %}
server {
    listen {{ declaration.nginx_plus_api.listen }};

    location /api {
        {% if declaration.nginx_plus_api.write == True %}api write=on;{% else %}api write=off;{% endif %}

        {% if declaration.nginx_plus_api.allow_acl -%}
        allow {{ declaration.nginx_plus_api.allow_acl }};
        deny all;
        {% else %}
        allow all;
        {% endif %}

    }

    location / {
        root /usr/share/nginx/html;
        index dashboard.html;
    }
}
{% endif %}
{% endif %}

{# --- Server section --- #}

{% for s in declaration.servers %}
server {
    # {{ s.name }}
    {# --- Listen section start --- #}
    {%- if s.listen -%}
    {% if s.listen.address %}

    listen {{ s.listen.address }}{% if s.listen.tls and s.listen.tls.certificate %} ssl{% endif %};
    {% if s.listen.http2 and s.listen.http2 == True -%}http2 on;{% endif -%}
    {%- endif %}

    {# --- TLS section start --- #}
    {%- if s.listen.tls -%}

    {%- if s.listen.tls.certificate -%}
    ssl_certificate {{ ncgconfig.nms.certs_dir }}/{{ s.listen.tls.certificate }}.crt;
    {% endif -%}
    {%- if s.listen.tls.key -%}
    ssl_certificate_key {{ ncgconfig.nms.certs_dir }}/{{ s.listen.tls.key }}.key;
    {% endif -%}
    {% if s.listen.tls.ciphers -%}
    ssl_ciphers {{ s.listen.tls.ciphers }};
    {% endif -%}
    {% if s.listen.tls.protocols -%}
    ssl_protocols{% for p in s.listen.tls.protocols %} {{ p }}{% endfor %};
    {% endif -%}
    {% if s.listen.tls.trusted_ca_certificates -%}
    ssl_trusted_certificate {{ ncgconfig.nms.certs_dir }}/{{ s.listen.tls.trusted_ca_certificates }}.crt;
    {% endif %}

    {# --- mTLS section --- #}
    {% if s.listen.tls and s.listen.tls.authentication and s.listen.tls.authentication.client[0] and s.listen.tls.authentication.client[0].profile -%}
    include "{{ ncgconfig.nms.auth_client_dir }}/{{ s.listen.tls.authentication.client[0].profile | replace(" ", "_") }}.conf";
    {% endif %}

    {# --- OCSP section start --- #}
    {%- if s.listen.tls.ocsp and s.listen.tls.ocsp.enabled|lower != "off" -%}
    ssl_ocsp {{ s.listen.tls.ocsp.enabled }};
    {% if s.listen.tls.ocsp.responder -%}
    ssl_ocsp_responder {{ s.listen.tls.ocsp.responder }};
    {% endif %}
    {% endif %}
    {# --- OCSP section end --- #}

    {# --- TLS stapling section start --- #}
    {%- if s.listen.tls.stapling and s.listen.tls.stapling.enabled == True -%}
    ssl_stapling on;
    ssl_stapling_verify {% if s.listen.tls.stapling.verify == True %}on{% else %}off{% endif %};
    {% if s.listen.tls.stapling.responder -%}
    ssl_stapling_responder {{ s.listen.tls.stapling.responder }};

    {% endif -%}
    {%- endif %}
    {# --- TLS stapling section end --- #}

    {%- endif %}
    {# --- TLS section end --- #}

    {%- endif %}
    {# --- Listen section end --- #}

    {% if s.names -%}
    server_name{% for svrname in s.names %} {{ svrname }}{% endfor -%};
    status_zone {{ s.names[0] }};
    proxy_ssl_server_name on;
    {% endif -%}

    {% if s.resolver -%}
    resolver {{ s.resolver }};
    {% endif -%}

    {# --- Server NGINX App Protect WAF section start --- #}

    {% if s.app_protect -%}
    {% if s.app_protect.enabled == True -%}
    app_protect_enable on;
    {% endif -%}
    {% if s.app_protect.policy -%}
    app_protect_policy_file {{ ncgconfig.nms.nap_policies_dir_pum }}/{{ s.app_protect.policy }}.tgz;
    {% endif -%}
    {% if s.app_protect.log -%}
    {% if s.app_protect.log.enabled == True -%}
    app_protect_security_log_enable on;
    {% if s.app_protect.log.profile_name -%}
    app_protect_security_log "{{ ncgconfig.nms.nap_logformats_dir_pum }}/{{ s.app_protect.log.profile_name }}.tgz" syslog:server={{ s.app_protect.log.destination }};
    {% endif -%}
    {% endif %}
    {% endif %}
    {% endif %}
    {# --- Server NGINX App Protect WAF section end --- #}

    {# --- HTTP headers manipulation section start --- #}
    {%- if s.headers -%}
    {%- if s.headers.to_server -%}

    {%- if s.headers.to_server.set -%}

    {%- for hSet in s.headers.to_server.set -%}
    proxy_set_header {{ hSet.name }} "{{ hSet.value }}";
    {% endfor -%}
    {%- endif %}
    {% if s.headers.to_server.delete -%}
    {% for hDel in s.headers.to_server.delete -%}
    proxy_set_header {{ hDel }} "";
    {% endfor -%}
    {% endif -%}

    {% endif %}

    {% if s.headers.to_client -%}

    {% if s.headers.to_client.add -%}
    {% for hAdd in s.headers.to_client.add -%}
    add_header {{ hAdd.name }} "{{ hAdd.value }}";
    {% endfor %}
    {% endif %}

    {% if s.headers.to_client.delete -%}
    {% for hDel in s.headers.to_client.delete -%}
    proxy_hide_header {{ hDel }};
    {% endfor %}
    {% endif %}

    {% if s.headers.to_client.replace -%}
    {% for hDel in s.headers.to_client.replace -%}
    proxy_hide_header {{ hDel.name }};
    add_header {{ hDel.name }} "{{ hDel.value }}";
    {% endfor %}
    {% endif %}

    {% endif %}
    {% endif %}

    {# --- HTTP headers manipulation section end --- #}

    {% if s.log.access %}access_log {{ s.log.access }} main;{% endif %}

    {% if s.log.error %}error_log {{ s.log.error }};{% endif %}


    {% filter indent(width=4) %}
{% if s.snippet and s.snippet.content %}{{ s.snippet.content | b64decode }}{% endif %}
    {% endfilter %}

    {# --- Server location section start --- #}
    {% for loc in s.locations %}

    location
    {%- if loc.urimatch -%}
    {# location URI match types: prefix (default), exact (=), casesens_regex (~), caseinsens_regex (~*), best_nonregex (^~) #}
    {%- if loc.urimatch|lower == "prefix" %} {% endif %}
    {%- if loc.urimatch|lower == "exact" %} = {% endif %}
    {%- if loc.urimatch|lower == "regex" %} ~ {% endif %}
    {%- if loc.urimatch|lower == "iregex" %} ~* {% endif %}
    {%- if loc.urimatch|lower == "best" %} ^~ {% endif %}
    {%- endif -%}
    {{ loc.uri }} {
        {% if loc.authentication and loc.authentication.server and loc.authentication.server[0].profile -%}
        include "{{ ncgconfig.nms.auth_server_dir }}/{{ loc.authentication.server[0].profile | replace(" ", "_") }}.conf";
        {% endif %}

        {% if loc.upstream %}proxy_pass {{ loc.upstream }};{% endif %}

        {% if loc.log.access %}access_log {{ loc.log.access }} main;{% endif %}

        {% if loc.log.error %}error_log {{ loc.log.error }};{% endif %}

        {# --- Active healthchecks --- #}

        {% if loc.health_check -%}
            {% if loc.health_check.enabled == True -%}
            health_check{% if loc.health_check.uri %} uri={{ loc.health_check.uri }}{% endif %}{% if loc.health_check.interval %} interval={{ loc.health_check.interval }}{% endif %}{% if loc.health_check.fails %} fails={{ loc.health_check.fails }}{% endif %}{% if loc.health_check.passes %} passes={{ loc.health_check.passes }}{% endif %};
            {% endif %}
        {% endif %}

        {# --- HTTP headers manipulation section @ location start --- #}
        {%- if loc.headers -%}
        {% if loc.headers.to_server -%}

        {% if loc.headers.to_server.set -%}
        {% for hSet in loc.headers.to_server.set -%}
        proxy_set_header {{ hSet.name }} "{{ hSet.value }}";
        {% endfor %}
        {% endif %}

        {% if loc.headers.to_server.delete -%}
        {% for hDel in loc.headers.to_server.delete -%}
        proxy_set_header {{ hDel }} "";
        {% endfor %}
        {% endif %}

        {% endif %}

        {% if loc.headers.to_client -%}

        {% if loc.headers.to_client.add -%}
        {% for hAdd in loc.headers.to_client.add -%}
        add_header {{ hAdd.name }} "{{ hAdd.value }}";
        {% endfor %}
        {% endif %}

        {% if loc.headers.to_client.delete -%}
        {% for hDel in loc.headers.to_client.delete -%}
        proxy_hide_header {{ hDel }};
        {% endfor %}
        {% endif %}

        {% if loc.headers.to_client.replace -%}
        {% for hDel in loc.headers.to_client.replace -%}
        proxy_hide_header {{ hDel.name }};
        add_header {{ hDel.name }} "{{ hDel.value }}";
        {% endfor %}
        {% endif %}

        {% endif %}
        {% endif %}
        {# --- HTTP headers manipulation section @ location end --- #}

        {# --- Rate limiting --- #}

        {% if loc.rate_limit -%}
        {% if loc.rate_limit.profile %}limit_req zone={{ loc.rate_limit.profile }}{% if loc.rate_limit.burst %} burst={{ loc.rate_limit.burst }}{% endif %}{% if loc.rate_limit.delay == 0 %} nodelay;{% else %} delay={{ loc.rate_limit.delay }};{% endif %}

        {% if loc.rate_limit.httpcode %}limit_req_status {{ loc.rate_limit.httpcode }};{% endif %}{% endif %}
        {% endif %}

        {# --- Client authentication --- #}
        {%- if loc.authentication and loc.authentication.client -%}
        {%- for clientAuthProfile in loc.authentication.client -%}
        include "{{ ncgconfig.nms.auth_client_dir }}/{{ clientAuthProfile.profile | replace(" ", "_") }}.conf";
        {% endfor -%}
        {%- endif -%}

        {# --- Location NGINX App Protect WAF --- #}

        {% if loc.app_protect -%}
        {% if loc.app_protect.enabled == True -%}
        app_protect_enable on;
        {% endif -%}
        {% if loc.app_protect.policy -%}
        app_protect_policy_file {{ ncgconfig.nms.nap_policies_dir_pum }}/{{ loc.app_protect.policy }}.tgz;
        {% endif %}
        {% if loc.app_protect.log -%}
        {% if loc.app_protect.log.enabled == True -%}
        app_protect_security_log_enable on;
        {% if loc.app_protect.log.profile_name -%}
        app_protect_security_log "{{ ncgconfig.nms.nap_logformats_dir_pum }}/{{ loc.app_protect.log.profile_name }}.tgz" syslog:server={{ loc.app_protect.log.destination }};
        {% endif %}
        {% endif %}
        {% endif %}
        {% endif %}

        {# --- Location snipptes --- #}

        {% if loc.snippet and loc.snippet.content %}{{ loc.snippet.content | b64decode }}{% endif %}

    }
    {% endfor %}

    {# --- JWT authentication JWKS endpoints --- #}
    {%- if declaration.authentication and declaration.authentication.client -%}
    {%- for clientAuthProfile in declaration.authentication.client -%}
    {%- if clientAuthProfile.type == "jwt" -%}
    include "{{ ncgconfig.nms.auth_client_dir }}/jwks_{{ clientAuthProfile.name | replace(" ", "_") }}.conf";
    {% endif -%}
    {%- endfor -%}
    {%- endif %}

}
{% endfor -%}