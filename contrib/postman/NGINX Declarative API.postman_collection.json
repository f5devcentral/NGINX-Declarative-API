{
	"info": {
		"_postman_id": "1671fdaf-2caf-4d3c-8d6f-3401483f1c76",
		"name": "NGINX Declarative API",
		"description": "Declarative REST API and GitOps automation layer for NGINX Instance Manager and NGINX One\n\n[https://github.com/f5devcentral/NGINX-Declarative-API/](https://github.com/f5devcentral/NGINX-Declarative-API/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30973250"
	},
	"item": [
		{
			"name": "v4.2",
			"item": [
				{
					"name": "Configuration generation",
					"item": [
						{
							"name": "Basic - LB",
							"item": [
								{
									"name": "Basic - LB - plaintext output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"plaintext\"\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample L4 service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"udp\"\n                    },\n                    \"upstream\": \"l4_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"A sample HTTP service\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Basic - LB - json b64 encoded output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"json\"\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample L4 service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"udp\"\n                    },\n                    \"upstream\": \"l4_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"A sample HTTP service\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Basic - LB - ConfigMap output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"configmap\",\n        \"configmap\": {\n            \"name\": \"nginx.test\",\n            \"filename\": \"testservice.conf\",\n            \"namespace\": \"test-namespace\"\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample L4 service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"udp\"\n                    },\n                    \"upstream\": \"l4_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"A sample HTTP service\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Basic - LB - HTTP output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"http\",\n        \"http\": {\n            \"url\": \"http://192.168.2.19:8080/path/service\"\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample L4 service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"udp\"\n                    },\n                    \"upstream\": \"l4_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"A sample HTTP service\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Advanced",
							"item": [
								{
									"name": "Advanced LB - plaintext output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"plaintext\"\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample_layer4_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\",\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"upstream\": \"l4_upstream\",\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgbDQgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/test\",\n                            \"urimatch\": \"exact\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true,\n                                \"uri\": \"/healthcheck\",\n                                \"interval\": 5,\n                                \"fails\": 3,\n                                \"passes\": 2\n                            },\n                            \"rate_limit\": {\n                                \"profile\": \"test_ratelimit\",\n                                \"httpcode\": 429,\n                                \"burst\": 10,\n                                \"delay\": 3\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"test_policy\",\n                                \"log\": {\n                                    \"profile_name\": \"log_illegal\",\n                                    \"enabled\": true,\n                                    \"destination\": \"192.168.1.5:514\"\n                                }\n                            },\n                            \"snippet\": {\n                                \"content\": \"IyBUaGlzIGlzIGEgbG9jYXRpb24gc25pcHBldCBjb21tZW50Cg==\"\n                            }\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"test_policy\",\n                        \"log\": {\n                            \"profile_name\": \"log_blocked\",\n                            \"enabled\": true,\n                            \"destination\": \"192.168.1.5:514\"\n                        }\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgc2VydmVyIHNuaXBwZXQgY29tbWVudAo=\"\n                    }\n                },\n                {\n                    \"name\": \"another HTTP test application\",\n                    \"names\": [\n                        \"server_443\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\",\n                            \"backup\": true\n                        }\n                    ],\n                    \"sticky\": {\n                        \"cookie\": \"cookie_name\",\n                        \"expires\": \"1h\",\n                        \"domain\": \".testserver\",\n                        \"path\": \"/\"\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"test_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                }\n            ],\n            \"maps\": [\n                {\n                    \"match\": \"$host$request_uri\",\n                    \"variable\": \"$backend\",\n                    \"entries\": [\n                        {\n                            \"key\": \"www.test.lab/app1/\",\n                            \"keymatch\": \"iregex\",\n                            \"value\": \"upstream_1\"\n                        },\n                        {\n                            \"key\": \"(.*).test.lab/app2/\",\n                            \"keymatch\": \"regex\",\n                            \"value\": \"upstream_2\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": true,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"snippet\": {\n                \"content\": \"IyBUaGlzIGlzIGEgSFRUUCBzbmlwcGV0IGNvbW1lbnQK\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Advanced LB - json b64 encoded output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"json\"\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample_layer4_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\",\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"upstream\": \"l4_upstream\",\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgbDQgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/test\",\n                            \"urimatch\": \"exact\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true,\n                                \"uri\": \"/healthcheck\",\n                                \"interval\": 5,\n                                \"fails\": 3,\n                                \"passes\": 2\n                            },\n                            \"rate_limit\": {\n                                \"profile\": \"test_ratelimit\",\n                                \"httpcode\": 429,\n                                \"burst\": 10,\n                                \"delay\": 3\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"test_policy\",\n                                \"log\": {\n                                    \"profile_name\": \"log_illegal\",\n                                    \"enabled\": true,\n                                    \"destination\": \"192.168.1.5:514\"\n                                }\n                            },\n                            \"snippet\": {\n                                \"content\": \"IyBUaGlzIGlzIGEgbG9jYXRpb24gc25pcHBldCBjb21tZW50Cg==\"\n                            }\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"test_policy\",\n                        \"log\": {\n                            \"profile_name\": \"log_blocked\",\n                            \"enabled\": true,\n                            \"destination\": \"192.168.1.5:514\"\n                        }\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgc2VydmVyIHNuaXBwZXQgY29tbWVudAo=\"\n                    }\n                },\n                {\n                    \"name\": \"another HTTP test application\",\n                    \"names\": [\n                        \"server_443\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\",\n                            \"backup\": true\n                        }\n                    ],\n                    \"sticky\": {\n                        \"cookie\": \"cookie_name\",\n                        \"expires\": \"1h\",\n                        \"domain\": \".testserver\",\n                        \"path\": \"/\"\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"test_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                }\n            ],\n            \"maps\": [\n                {\n                    \"match\": \"$host$request_uri\",\n                    \"variable\": \"$backend\",\n                    \"entries\": [\n                        {\n                            \"key\": \"www.test.lab/app1/\",\n                            \"keymatch\": \"iregex\",\n                            \"value\": \"upstream_1\"\n                        },\n                        {\n                            \"key\": \"(.*).test.lab/app2/\",\n                            \"keymatch\": \"regex\",\n                            \"value\": \"upstream_2\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": true,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"snippet\": {\n                \"content\": \"IyBUaGlzIGlzIGEgSFRUUCBzbmlwcGV0IGNvbW1lbnQK\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Advanced LB - ConfigMap output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"configmap\",\n        \"configmap\": {\n            \"name\": \"nginx.test\",\n            \"filename\": \"testservice.conf\",\n            \"namespace\": \"test-namespace\"\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample_layer4_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\",\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"upstream\": \"l4_upstream\",\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgbDQgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/test\",\n                            \"urimatch\": \"exact\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true,\n                                \"uri\": \"/healthcheck\",\n                                \"interval\": 5,\n                                \"fails\": 3,\n                                \"passes\": 2\n                            },\n                            \"rate_limit\": {\n                                \"profile\": \"test_ratelimit\",\n                                \"httpcode\": 429,\n                                \"burst\": 10,\n                                \"delay\": 3\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"test_policy\",\n                                \"log\": {\n                                    \"profile_name\": \"log_illegal\",\n                                    \"enabled\": true,\n                                    \"destination\": \"192.168.1.5:514\"\n                                }\n                            },\n                            \"snippet\": {\n                                \"content\": \"IyBUaGlzIGlzIGEgbG9jYXRpb24gc25pcHBldCBjb21tZW50Cg==\"\n                            }\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"test_policy\",\n                        \"log\": {\n                            \"profile_name\": \"log_blocked\",\n                            \"enabled\": true,\n                            \"destination\": \"192.168.1.5:514\"\n                        }\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgc2VydmVyIHNuaXBwZXQgY29tbWVudAo=\"\n                    }\n                },\n                {\n                    \"name\": \"another HTTP test application\",\n                    \"names\": [\n                        \"server_443\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\",\n                            \"backup\": true\n                        }\n                    ],\n                    \"sticky\": {\n                        \"cookie\": \"cookie_name\",\n                        \"expires\": \"1h\",\n                        \"domain\": \".testserver\",\n                        \"path\": \"/\"\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"test_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                }\n            ],\n            \"maps\": [\n                {\n                    \"match\": \"$host$request_uri\",\n                    \"variable\": \"$backend\",\n                    \"entries\": [\n                        {\n                            \"key\": \"www.test.lab/app1/\",\n                            \"keymatch\": \"iregex\",\n                            \"value\": \"upstream_1\"\n                        },\n                        {\n                            \"key\": \"(.*).test.lab/app2/\",\n                            \"keymatch\": \"regex\",\n                            \"value\": \"upstream_2\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": true,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"snippet\": {\n                \"content\": \"IyBUaGlzIGlzIGEgSFRUUCBzbmlwcGV0IGNvbW1lbnQK\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Advanced LB - HTTP output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"http\",\n        \"http\": {\n            \"url\": \"http://192.168.1.19:8080/path/service\"\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample_layer4_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\",\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"upstream\": \"l4_upstream\",\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgbDQgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/test\",\n                            \"urimatch\": \"exact\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true,\n                                \"uri\": \"/healthcheck\",\n                                \"interval\": 5,\n                                \"fails\": 3,\n                                \"passes\": 2\n                            },\n                            \"rate_limit\": {\n                                \"profile\": \"test_ratelimit\",\n                                \"httpcode\": 429,\n                                \"burst\": 10,\n                                \"delay\": 3\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"test_policy\",\n                                \"log\": {\n                                    \"profile_name\": \"log_illegal\",\n                                    \"enabled\": true,\n                                    \"destination\": \"192.168.1.5:514\"\n                                }\n                            },\n                            \"snippet\": {\n                                \"content\": \"IyBUaGlzIGlzIGEgbG9jYXRpb24gc25pcHBldCBjb21tZW50Cg==\"\n                            }\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"test_policy\",\n                        \"log\": {\n                            \"profile_name\": \"log_blocked\",\n                            \"enabled\": true,\n                            \"destination\": \"192.168.1.5:514\"\n                        }\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgc2VydmVyIHNuaXBwZXQgY29tbWVudAo=\"\n                    }\n                },\n                {\n                    \"name\": \"another HTTP test application\",\n                    \"names\": [\n                        \"server_443\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\",\n                            \"backup\": true\n                        }\n                    ],\n                    \"sticky\": {\n                        \"cookie\": \"cookie_name\",\n                        \"expires\": \"1h\",\n                        \"domain\": \".testserver\",\n                        \"path\": \"/\"\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"test_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                }\n            ],\n            \"maps\": [\n                {\n                    \"match\": \"$host$request_uri\",\n                    \"variable\": \"$backend\",\n                    \"entries\": [\n                        {\n                            \"key\": \"www.test.lab/app1/\",\n                            \"keymatch\": \"iregex\",\n                            \"value\": \"upstream_1\"\n                        },\n                        {\n                            \"key\": \"(.*).test.lab/app2/\",\n                            \"keymatch\": \"regex\",\n                            \"value\": \"upstream_2\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": true,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"snippet\": {\n                \"content\": \"IyBUaGlzIGlzIGEgSFRUUCBzbmlwcGV0IGNvbW1lbnQK\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Declarative automation examples",
					"item": [
						{
							"name": "API Gateway",
							"item": [
								{
									"name": "Ergast API",
									"item": [
										{
											"name": "Ergast API Gateway and DevPortal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Ergast API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/ergast\",\n                            \"urimatch\": \"prefix\",\n                            \"snippet\": {\n                                \"content\": \"IyBUZXN0IFNOSVBQRVQK\"\n                            },\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"https://raw.githubusercontent.com/adampax/ergast-f1-openapi-doc/e558eea18e176e4f78a8765ac7eccc804b5157ff/ergast-openapi-doc.yaml\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"uri\": \"/ergast-devportal.html\"\n                                },\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/ergast-access_log\",\n                                    \"error\": \"/var/log/nginx/ergast-error_log\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Petstore API",
									"item": [
										{
											"name": "Petstore API Gateway RateLimit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"name\": \"Petstore API Gateway\",\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"uri\": \"/petstore-devportal.html\"\n                                },\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\",\n                                    \"authentication\": [\n                                        {\n                                            \"profile\": \"Source of truth authentication profile using HTTP header token authentication\"\n                                        }\n                                    ]\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"uri\": \"/petstore-devportal.html\"\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ],\n                \"server\": [\n                    {\n                        \"name\": \"Source of truth authentication profile using bearer token authentication\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"bearer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Source of truth authentication profile using HTTP header token authentication\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"header\",\n                            \"location\": \"X-AUTH-TOKEN\"\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ + WAF",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-blocked\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - XSS blocked\",\n                            \"description\": \"This is a production-ready policy - XSS blocked\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-blocked-bot-allowed.json\"\n                            }\n                        },\n                        {\n                            \"tag\": \"xss-allowed\",\n                            \"displayName\": \"Production Policy - XSS allowed\",\n                            \"description\": \"This is a production-ready policy - XSS allowed\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-allowed.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"uri\": \"/petstore-devportal.html\"\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\",\n                                        \"/pet/{petId}/uploadImage\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"production-policy\",\n                                \"log\": {\n                                    \"profile_name\": \"secops_dashboard\",\n                                    \"enabled\": true,\n                                    \"destination\": \"127.0.0.1:514\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ],\n                                \"errorcode\": 403\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Petstore & Ergast API Gateway all in one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore and Ergast API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"192.168.2.13\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"uri\": \"/petstore-devportal.html\"\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\"\n                                    ]\n                                },\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ],\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/petstore-access_log\",\n                                    \"error\": \"/var/log/nginx/petstore-error_log\"\n                                }\n                            }\n                        },\n                        {\n                            \"uri\": \"/ergast\",\n                            \"urimatch\": \"prefix\",\n                            \"snippet\": {\n                                \"content\": \"IyBUZXN0IFNOSVBQRVQK\"\n                            },\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"https://raw.githubusercontent.com/adampax/ergast-f1-openapi-doc/e558eea18e176e4f78a8765ac7eccc804b5157ff/ergast-openapi-doc.yaml\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"uri\": \"/ergast-devportal.html\"\n                                },\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"ergast_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0\n                                    }\n                                ],\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/ergast-access_log\",\n                                    \"error\": \"/var/log/nginx/ergast-error_log\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"ergast_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                },\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CRUD automation",
							"item": [
								{
									"name": "Create initial NGINX configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"patched_server.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update HTTP upstream",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.3:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.4:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.5:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify and add HTTP upstream",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"test_upstream_added\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.1:80\"\n                        },\n                        {\n                            \"server\": \"192.168.1.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify and add HTTP server and upstream",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"patched_server_v2.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_v2_log\",\n                        \"error\": \"/var/log/nginx/error_v2_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream_added\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream_added\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.100:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"192.168.1.101:80\"\n                        },\n                        {\n                            \"server\": \"192.168.1.102:80\"\n                        },\n                        {\n                            \"server\": \"192.168.1.103:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove HTTP server and upstream",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream_added\"\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify Stream server and upstream",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"TCP_10053_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\"\n                    },\n                    \"upstream\": \"TCP_10053_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"TCP_10053_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.3:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.4:53\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add stream server and upstream",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"TCP_15432_service\",\n                    \"listen\": {\n                        \"address\": \"15432\",\n                        \"protocol\": \"tcp\"\n                    },\n                    \"upstream\": \"TCP_15432_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"TCP_15432_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"172.16.10.1:5432\"\n                        },\n                        {\n                            \"server\": \"172.16.10.1:5432\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove stream server and upstream #1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"TCP_10053_service\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"TCP_10053_upstream\"\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove stream server and upstream #2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"TCP_15432_service\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"TCP_15432_upstream\"\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GitOps autosync",
							"item": [
								{
									"name": "NGINX Plus and GitOps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 5,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.1/www.online-boutique.local.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.1/www.online-boutique.local.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "NGINX App Protect WAF and GitOps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 5,\n            \"modules\": [\n                \"ngx_http_app_protect_module\",\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v2/www.online-boutique.local.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v2/www.online-boutique.local.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"gitops\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"gitops\",\n                            \"displayName\": \"Production Policy - GitOps\",\n                            \"description\": \"This is a production-ready policy - Managed by GitOps\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v2/nap-policy-gitops.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"production-policy\",\n                        \"log\": {\n                            \"profile_name\": \"secops_dashboard\",\n                            \"enabled\": true,\n                            \"destination\": \"127.0.0.1:514\"\n                        }\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get declaration status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}/status",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  declaration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete  declaration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Housekeeping - common endpoints",
							"item": [
								{
									"name": "Clean NGINX configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get declaration status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}/status",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get  declaration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete  declaration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "HTTP Headers Manipulation",
							"item": [
								{
									"name": "Create test echo service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"resolver\": \"8.8.8.8\",\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Manipulate headers - server level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"resolver\": \"8.8.8.8\",\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"headers\": {\n                        \"to_server\": {\n                            \"set\": [\n                                {\n                                    \"name\": \"X-Injected-Client-IP\",\n                                    \"value\": \"$remote_addr\"\n                                },\n                                {\n                                    \"name\": \"X-Injected-Echo-Test-Version\",\n                                    \"value\": \"v1\"\n                                },\n                                {\n                                    \"name\": \"Host\",\n                                    \"value\": \"echo.free.beeceptor.com\"\n                                }\n                            ],\n                            \"delete\": [\n                                \"User-Agent\"\n                            ]\n                        },\n                        \"to_client\": {\n                            \"add\": [\n                                {\n                                    \"name\": \"X-Injected-Response-Status\",\n                                    \"value\": \"$status\"\n                                }\n                            ],\n                            \"delete\": [\n                                \"vary\"\n                            ],\n                            \"replace\": [\n                                {\n                                    \"name\": \"Server\",\n                                    \"value\": \"Echo Test Server\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Manipulate headers - location level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"resolver\": \"8.8.8.8\",\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"headers\": {\n                        \"to_server\": {\n                            \"set\": [\n                                {\n                                    \"name\": \"X-Injected-Client-IP\",\n                                    \"value\": \"$remote_addr\"\n                                },\n                                {\n                                    \"name\": \"X-Injected-Echo-Test-Version\",\n                                    \"value\": \"v1\"\n                                },\n                                {\n                                    \"name\": \"Host\",\n                                    \"value\": \"echo.free.beeceptor.com\"\n                                }\n                            ],\n                            \"delete\": [\n                                \"User-Agent\"\n                            ]\n                        },\n                        \"to_client\": {\n                            \"add\": [\n                                {\n                                    \"name\": \"X-Injected-Response-Status\",\n                                    \"value\": \"$status\"\n                                }\n                            ],\n                            \"delete\": [\n                                \"vary\"\n                            ],\n                            \"replace\": [\n                                {\n                                    \"name\": \"Server\",\n                                    \"value\": \"Echo Test Server\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Test using:\n\n`curl -i echo.vm-test.ie.ff.lan`\n\nThe actual FQDN can be modified in the request JSON body"
						},
						{
							"name": "HTTPS server",
							"item": [
								{
									"name": "TLS Offload",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "TLS Offload and NGINX App Protect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-blocked\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - GitOps\",\n                            \"description\": \"This is a production-ready policy - Managed by GitOps\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-blocked.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"production-policy\",\n                        \"log\": {\n                            \"profile_name\": \"secops_dashboard\",\n                            \"enabled\": true,\n                            \"destination\": \"127.0.0.1:514\"\n                        }\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "JWT Client Authentication",
							"item": [
								{
									"name": "JWT Client Authentication - local JWT key and Bearer token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test service\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/test.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"JWT Auth with hardwired key and Bearer token\"\n                                    }\n                                ]\n                            },\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"JWT Auth with hardwired key and Bearer token\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\"\n                        }\n                    },\n                    {\n                        \"name\": \"JWT Auth with external key and Bearer token\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Authentication GitOps\",\n                            \"key\": \"http://192.168.2.5:20080/jwks.json\",\n                            \"cachetime\": 5\n                        }\n                    },\n                    {\n                        \"name\": \"JWT Auth with hardwired key and token in auth_token query string parameter\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"token_location\": \"$arg_auth_token\"\n                        }\n                    },\n                    {\n                        \"name\": \"JWT Auth with hardwired key and token in X-Auth-Token HTTP header\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"token_location\": \"$http_x_auth_token\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "JWT secret fetched from URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test service\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/test.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"JWT Auth with external key and Bearer token\"\n                                    }\n                                ]\n                            },\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "JWT token in auth_token query string parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test service\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/test.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"JWT Auth with hardwired key and token in auth_token query string parameter\"\n                                    }\n                                ]\n                            },\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "JWT token in HTTP X-Auth-Token header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test service\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/test.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"JWT Auth with hardwired key and token in X-Auth-Token HTTP header\"\n                                    }\n                                ]\n                            },\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "JWT Client Authentication and Authorization",
							"item": [
								{
									"name": "JWT Client Authentication and Authorization",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"JWT AuthN and AuthZ test server\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/auth-test.nginx.lab_access_log\",\n                        \"error\": \"/var/log/nginx/auth-test.nginx.lab_error_log\"\n                    },\n                    \"headers\": {\n                        \"to_client\": {\n                            \"add\": [\n                                {\n                                    \"name\": \"X-Injected-JWT-Group\",\n                                    \"value\": \"$jwt_claim_roles\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            },\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"jwt_authentication_local\"\n                                    }\n                                ]\n                            },\n                            \"authorization\": {\n                                \"profile\": \"jwt role based authorization\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"jwt_authentication_local\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Client Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"jwt_type\": \"signed\"\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"jwt role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "mTLS Client Authentication",
							"item": [
								{
									"name": "HTTPS server with mTLS, OCSP, SSL Stapling",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"server_cert\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdSRENDQkN5Z0F3SUJBZ0lVTTNJQVZIRmxhSTVsY1d0TjZxOUVhcnlka0w4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1NURUxNQWtHQTFVRUJoTUNTVlF4RFRBTEJnTlZCQWdNQkVGemRHa3hFVEFQQmdOVkJBb01DRlJsYzNRZwpUR0ZpTVJnd0ZnWURWUVFEREE5MmJTMWliR0Z1YXk1bVppNXNZVzR3SGhjTk1qTXdOakE0TVRBd01qTTVXaGNOCk1qUXdOakEzTVRBd01qTTVXakJKTVFzd0NRWURWUVFHRXdKSlZERU5NQXNHQTFVRUNBd0VRWE4wYVRFUk1BOEcKQTFVRUNnd0lWR1Z6ZENCTVlXSXhHREFXQmdOVkJBTU1EM1p0TFdKc1lXNXJMbVptTG14aGJqQ0NBaUl3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFMRFQ2bnZleVZlNi9VZlk2aUtHVC9oV1A0cktDSGR0ClloZWU3RGVZR29QWGhGVjB6a3grVWExanBEZ21WUE1kVEJBdnoxODg5NzlEcHBqdmNYeFhsRmpnaUhjWDhpWVgKSXovSUVMc3dKRUNITWNsNkxmelA5eDVUY1gxTEdFblFOTWhHRzA2MjlxU2NCQmQyUUNiWlY0UWE1TkxlQnQ4cQpHQ2lXY3JiQnR3YlpiSGo1dk9aenJrdHBtRFBGS1V4bXR5b2dBQnNaTllnL0F3Y1l2RXdBOEQ0QTN0VEgxcGhvCkdYY3ZvZWpJelhRMUdmYys5azR3OFhHYWFQOGd2bTdOMXN2MnU2Yld4SHRGZHpWQk9udzJyaHUvWGYyY0N0dW4KUnIxSENKQXRRSDlkbDhzZks1czBSRlVuTlVYbFBiNTFBTjBjVFVGbEYrZlVUVmVON3dNMTdmeVZVY3IydTltSwo0UGdoWjkvMml0ZUpZV3hjK3k4V2NEQzBUV3hwZ2paVEw5Tk1GK2t6SXV2TjJOWFFybjcvSU5UQTMvNFlmWGRPCloxelpTdTlkclRMcG5DZHRpOWxuRHBKODd3bW41cVZSTlZiTlZRbldEeW5yZnoyTU1DY21jLzcvdkJFN2dDemQKNFJLWHJLdHloenlQSitycmh3NmpxYVA4QytaZGRvKzkvak9QVDFTSnUxZ21VbzFuZ2hBMWh2N0M5RUYrM2xQVApYSk5WV3dtYkdWK0p4cUdKSjJSa2toMlIrZTVIREdRY2hGWjJIcXBGTGVQN0trTHJBR2RkZFZQWEZhQ0RiU0R6ClJQd0I5WFlhakg5Zm5QWEtFT3ZpVEJhQVNjWUZwTXB5cm02UkxHUGRSVnE2RUNYVlB4MDdHdGFCaEVvVWIwK2YKVkZnNExtQkx4MldQQWdNQkFBR2pnZ0VpTUlJQkhqQUpCZ05WSFJNRUFqQUFNQkVHQ1dDR1NBR0crRUlCQVFRRQpBd0lHUURBekJnbGdoa2dCaHZoQ0FRMEVKaFlrVDNCbGJsTlRUQ0JIWlc1bGNtRjBaV1FnVTJWeWRtVnlJRU5sCmNuUnBabWxqWVhSbE1CMEdBMVVkRGdRV0JCVHZFZWJGK1JDV0JhcGVPWUdpQ0YyVHZxbExYekNCaEFZRFZSMGoKQkgwd2U0QVVFdW9Db3kvcmhMQmxzcm5KdXE2QzFJczQxbFNoVGFSTE1Fa3hDekFKQmdOVkJBWVRBa2xVTVEwdwpDd1lEVlFRSURBUkJjM1JwTVJFd0R3WURWUVFLREFoVVpYTjBJRXhoWWpFWU1CWUdBMVVFQXd3UGRtMHRZbXhoCmJtc3VabVl1YkdGdWdoUld4QjhCa3lmK1RkQXc2Q3dPZE1aT0k0NlZ2REFPQmdOVkhROEJBZjhFQkFNQ0JhQXcKRXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFHUDR6ZkdseTI1RwpneTBSeC9SSTNpNzJDVlIrSXY3SW5WTUVGWDZqRHRNV3hSblFtRGZsMWtTOVF1Y3hNb0tnOE9URStMcnlzdGJsClF4WGZiakZQekNoNHB1UGtGTmNBeG1mVmR4b20xR1lodWpoYTBQOUswUURZSDZycGlUaFdSQ2greUovQm1qZ2wKTlJabks4WGRqME85Ui9XKzJrTFRac2VFbS9hZHFVQ3dkYzNBWWlNWGh4QXkvQlh3bFRQeDMyMHZCcXYxZGFyVgp5ZlVoRlM1Rkg3enV2bGtGQ1p6M3lpOGYvYXMwbkRTUkFrY3dPRFQvN1diQlN4QTk3ZzJmRk1EMEI3WlUvbndGCmU4VnRzNDl3YmZ6QWJRMk40RUc2OEVhODE1VlFRM2N6YWthdjBCdkxHL2UwT0habGxYcUVhV1ZlWFJtSWFFOHcKWko5OEhUaDJMbUlFV2Jpdm94Kyt2UXd3bVhKTm1DRFVXNnVmcHdBOVdKQ0VhYmhxeXdGVzh1dFVENzRTVXE3SApEUDhNamtJZ0o3ekl2Tkd1RkFsSzd6c2xpV2pzeUN1OGVNamhvN2pVRFhGR1R0R0ZMUGtVa08vSysrSGVVRFg0Cm1OWDJ2aHI3NGRqRkNBTTEvOTYxWnB5NUFYUzZkd2g3MFlJL2dMdldSL0J1ejBnNEp6YUI2UFo4M1ErYm9QVHYKM1ZIS2xOWjlKQlhRTmtSc3N6U0dYWG5MYmtOTmNwVFg2cnAyZ1pUSS9NNDhGTnBxanAxOXRpQVg3bWN0cTl2SgpNejhvemhEcHZmSTlnMjFsNFZlRGdpbWEwTDVBc1pQbFdIQlZjcy9yL3dMU2YzWFVYZEs0UHpCQUdIRFBidXYrCnpKOVNqS0NFVll2bHRhMHlUUVBCSFJPa2Y2MG1sVmh6Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"server_key\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBc05QcWU5N0pWN3I5UjlqcUlvWlArRlkvaXNvSWQyMWlGNTdzTjVnYWc5ZUVWWFRPClRINVJyV09rT0NaVTh4MU1FQy9QWHp6M3YwT21tTzl4ZkZlVVdPQ0lkeGZ5SmhjalA4Z1F1ekFrUUljeHlYb3QKL00vM0hsTnhmVXNZU2RBMHlFWWJUcmIycEp3RUYzWkFKdGxYaEJyazB0NEczeW9ZS0paeXRzRzNCdGxzZVBtOAo1bk91UzJtWU04VXBUR2EzS2lBQUd4azFpRDhEQnhpOFRBRHdQZ0RlMU1mV21HZ1pkeStoNk1qTmREVVo5ejcyClRqRHhjWnBvL3lDK2JzM1d5L2E3cHRiRWUwVjNOVUU2ZkRhdUc3OWQvWndLMjZkR3ZVY0lrQzFBZjEyWHl4OHIKbXpSRVZTYzFSZVU5dm5VQTNSeE5RV1VYNTlSTlY0M3ZBelh0L0pWUnl2YTcyWXJnK0NGbjMvYUsxNGxoYkZ6NwpMeFp3TUxSTmJHbUNObE12MDB3WDZUTWk2ODNZMWRDdWZ2OGcxTURmL2hoOWQwNW5YTmxLNzEydE11bWNKMjJMCjJXY09rbnp2Q2FmbXBWRTFWczFWQ2RZUEtldC9QWXd3Snlaei92KzhFVHVBTE4zaEVwZXNxM0tIUEk4bjZ1dUgKRHFPcG8vd0w1bDEyajczK000OVBWSW03V0NaU2pXZUNFRFdHL3NMMFFYN2VVOU5jazFWYkNac1pYNG5Hb1lrbgpaR1NTSFpINTdrY01aQnlFVm5ZZXFrVXQ0L3NxUXVzQVoxMTFVOWNWb0lOdElQTkUvQUgxZGhxTWYxK2M5Y29RCjYrSk1Gb0JKeGdXa3luS3VicEVzWTkxRldyb1FKZFUvSFRzYTFvR0VTaFJ2VDU5VVdEZ3VZRXZIWlk4Q0F3RUEKQVFLQ0FnQVBUR1pQRFRsU004VlIvL3hSdkZrUzNUTm1LSkNPOUpHMkJYUGVZM1IzejUrTlhTdTBCb0craEk1aQpwVDVZUWtLZ2ErSi9GT0ZDVlBJRzdVQmVSNTE0Q3dVRGVMamtmci8zOXJFcjRNQmlMTkFyNUR3eVVUUEtGZUlOCnV2K0E4MWg5czBNTmpsck1ad3NibElsOFV2VjFZblpGb0J2c0Z0SThRTGZ3QTlaMzZ6dXRRNzRLR2h3TVBqaUMKMGgzK2xDeG9vcGdmd0JDWGx3d0dBeWZYVTRWMWQ5SFBpdktRQVFHakJDWDM0OWVTcEQxNDNLT21wQ2xmY01LQQp3QzU1bTZsbndCTUFIamlsaVo4RXBuNE8zUlEzSmxsVlpiaXl4RWdrZkE3TG1uNm9Ca3Jwc2VxdDVObThuRVhKCnBFbXhQcUl5Znc1WUNBMEhhNkM5WUhRN1RPRW9BbHBmWld4azAxSnpoVi9aK3FmVHM1YlMwQWNaTzFOVDRaeDgKWlF2eHQ0TDJINVcrK2R6RjhReTlidzQ2M3lKb1dydWxtNy9uQ3YvL1FpNGl0eHRnYyt0N2lwVXZzaUdTVktVWQpPelhCSXNWTUlnd0F6eUtTSEhPL21rMkEwVkgxaHB3emY2L0RzR2wxSjM4TU9pVGo4dEx1RWt3cFY4WGh5MnZwCkd0cXpsT21DS1hodlVDam9iZWlYSWJwSlIzeEM1NmliRjVadk0vQUdONzI5K0xKRFNwbHJtWVJRVHh1UTJWSE8KQWFXQ01SQWFBdUtCVnBxYTRjd25WRy9POEpkN2ZPSi9tMFlIN3FpRlJHREdvdVNOdHZJUUVtaXVkK3dRWjJ6dwpUcmFNVWk0SENtNEFPa0ZNVXBsRmt1ajA2ZHRqM2RIWUtPQkdMK25vaUp4WmJxb3kwUUtDQVFFQTFiZUl6WHh6CnRFRlp2OGRlOXljOWdCUUtNNUNIbHp6NUNMZXVkTitvemxxeDNCMW1PRStxbFkyaEd3RklIWVBJajFLYS83RlkKbExmNFpiUEJRMFhiNUo5VzQzSGIyTnEydXdRQ3ZiSXhVMW9zaGJVWlhZc2FUaE15azc2VzQ5YjU3UC9HdFE3NwpTbkVZTXNrTzRUQndyS3lBdVhDVHRtTk1Qa2J1NFBxT05PeVFQY3o3Yi92VEU1eERjMENMVS9oUXM3NWFHeCs1Citld2VjeEZNa0JKTVo2c2N5TzcySEdSNHZwTHduRXUvcU5uN2JmUElSaUx1T3BwTTdHNlUwQlBPL2todHJ5ZmQKV3U3MHJYZGJSdGRJUHlsQWxSOG9zczJqWWsrRHNPUnNESm9pbkk5WU1Va3dmdHdCNTRQbytGRGtGOHBzV202RQpSaklpenFBK0piWDlTd0tDQVFFQTA4Ly9oM0NabDg2M2xUZHNrU1JKRUZKc0RtdkZkUStzMWtlNUFwMjdnWTBXCmZJbEFGZFlRR3RORUVlTk9xS3EwdTFtS0lqWHFacWNTdU9DNzZIYTE5Tk9waHVoK1dwV0t2Ni9BTWtQSjE5SUIKQ3RqS0lkc2s0U2M3WG02MnNOV1pnQm5XT1Z3QVdzU0VzTHRac1NvWUJUVTJJS1pBOVJOWHhkSEQreGZ2SWJkNApZYngzTzk4WklNQzNlVFFiOW9jVHZab0RNWGdLaHRtTy9iMnlSeEVDSGpGRmxzYlhhc1RPeG5XOWZSVXJtdGVqCk9pdVlXaEZOM2R6dmpuVEdLY0xieWY0MWpHaUVUeFViUHVpei9ZMmk5NldCNVN6MW9zaGorRU1OaFhtRzZSYXUKQUIvelhwNldtSUJ2bDNpU0lzOGJRNkh3Qm1DTjc1R2VVVG1GUUlyaVRRS0NBUUVBbTkzWVN5MXA0VndNRGI5bApObElMRzM4Q0ZhdGlDRjR5cmpYd2FWSzVkWTVWeTFneHRmMzhSa2hkNkNrZUpGQjVsSFhGajVnVEo1dW84TnVSCnB2T3JOT2swNEhxb3dWWjZFSmtUT3JCY0l4TlFCMUFXS05BTHBrZUFDcHJreDFTQlFHVW0wZVFVUjYyRjNYd2YKZXdMdUdqRlJURzJiZlZpY1FZdFFLd3J4YmczZUFRU2ZtSU9MNVBDQmpPdlU4YS9YZzgvZlBZcjlBeFkrK3VMeAorTjB2bGlnSXZVN3lkYkNkRXpodGZVQU5qeU16cVhRemExdU1iWGNkaFEzOVFHaEIvZGhyRG1TL250Tko1YjEzCjk0bUpLbTkycDR0ckRrVEYxU3h5dWk5TjBqOFQ0U1QyU0RPOXg3ZkROOHRQdk5LYUYvUE01SU5YdXk1VGptajIKQ21EWlV3S0NBUUFOUVJYSFh1ZHRsWFR0ZEhOcHZiQ0l3ZStiRTJsZXd1VlkzMUlYZE5GWDhRRTROOHAzMDFaYwpwMTI2Rk5SR1A3QmhqTi9VOWpTOXliU2xOd0xyTUFxQTBJSHFQRUF6NE9tMnh3T3E0WTBPNFVoSmFubHpsdWYrCjR0cVhOU3hmY201UmtzeFIrSXpaSVRVQWJpalZxa0dvaWNUaVZDVDZjUVJzRDQxSStCMXhxYTV4eHo1YTA4SVoKeDVWemt5d3d5QkVYS3owSjZtNFdOQ1Q3Z2RSWEdCeGUwVXgrZStEZEFJWEQ2M2c1RElzVy9HbHRhVzcySytFSQpnaHZIZVUweExjMWRIWGd5V2hQMWN1ZXFqeHM4UVpHeUYzeENZQWJhOGRrM250S0l5S3NGaVBMSWRUZGdjMklQCkZ2SmtzeG5KN2RYUjdKODlkdXRLMDN6cHJrVEZYaXQ5QW9JQkFDcjhkb2ZCcFlFL1JuTlFwbVNET29DRm1sdTkKQlozN3h5K0puZ2FrQ2RSdHFyR1lDdkZMSnI2QnpGdXE0SHpsM0piTkRCM1BkYSs4Z2VNd2cxU1htTEhrRVFrTQpXV2ptNHpmU3hiTUtKamx3REdoeUlwSU9nQ2FQL1hyT2hxTGl4bnJ6UHFHZmM4R0FZTDE2Rm1PeGVqbVk5aERtCmNibkFqZlNwUjF1WEt2S2d6d1NLQ0VWdzc0VjJSRmRqQXBLVDl3bkpOQTZiWHQ5SXFkaS96d3BYbDQ0OVczdVMKNjRjVVpaK3luYnQ5QUlxbFNjMDdNRHl1TUtueExMbDFLeEJYenNxZlVsYWtlRGVoVmdGS05OOTNXQWJJc09ieAp1d1hTd0hXa1B6RGFHeE9wdzlSMHo2S2t2N25YZnBIYW1RWENBZEdsRjkyc1QwYW80Y3FuejFJSmJ2bz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K\"\n                    }\n                },\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"cacert\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZjekNDQTF1Z0F3SUJBZ0lVVnNRZkFaTW4vazNRTU9nc0RuVEdUaU9PbGJ3d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1NURUxNQWtHQTFVRUJoTUNTVlF4RFRBTEJnTlZCQWdNQkVGemRHa3hFVEFQQmdOVkJBb01DRlJsYzNRZwpUR0ZpTVJnd0ZnWURWUVFEREE5MmJTMWliR0Z1YXk1bVppNXNZVzR3SGhjTk1qTXdOakE0TURrMU5EQTRXaGNOCk1qUXdOakEzTURrMU5EQTRXakJKTVFzd0NRWURWUVFHRXdKSlZERU5NQXNHQTFVRUNBd0VRWE4wYVRFUk1BOEcKQTFVRUNnd0lWR1Z6ZENCTVlXSXhHREFXQmdOVkJBTU1EM1p0TFdKc1lXNXJMbVptTG14aGJqQ0NBaUl3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFLMlQwWXpkcjB0dWQzaVJRNGNzaGNhRVJTRzVjTDE2CkhRblhoYWw4emlUL1VRQUNIUGdzZDYwcWlEaldvQTJXb0lGWFFpUHkzOG1vZGtWRlR4Qmt5U2VldndOOFJiLzEKOFhaMS8yS1RnVmRDcHkvNm11WE15bXZYODJad05CVkV3QnoxUk5kbklUSk44cVh3a0d4bHozbDBib1loRkFyUQpNdmkxcW1RaHpDa2Zpb041MVkrYlBXOXpTQlFQdXNrcXJYYzRqTTJ0VENNQ2pTcFlvd1hXM1ppRmc5WEJ1Z09aCjFmdWd1Zmw4K1FJYzNZSEFoL1Z1NloraXFEOGxQeGRKODlBeDZaazVtOGdkVG9JdUhBbUNWaHFpUXBGRjkzSTgKbkYrSnRuYnBaNTRJUTZBbWYrYiswakMxdmY4Kzg0WUppaEVzWExyaGMxZTRTZ2dwdzEvcWpDb21QblhGVjEzUwpsUG5kVlhVR0taa1ZKdXdZTjJyZElmd3YrdCs5MGhwUVBmNmFBTjRCamRxOXdkdkQzSXVnS2JYZG5CQ0FUTEY4ClYyRTFTSE9VZGdRY3duK1d1WDVVOGdPa3B2b2VFN0g1REJ6Rks1WTZ2SHZlaTRlNkp3RTRDK3FJL1BmbTgreTEKNEpsOFBSOW5JQmdGQ3hrZWpwa2tRQ0I5U0dvMVZidzZhWmdZd0VQNHh6YXFYYXV3L3F4c0oxNUkrRTBndEs1OApuWUtkM0hqelk5Slh6V0NVNTdXbmc2SzNvTTIzNXpyRzJnNm1FaHQ4SStDckVMUFNuZURjZU8zVlJkc2dlblBCCis4U1JxVU8vWG9LWHNEU3I5amoxdWluVzYwTG5MZ0Zmc3JQeGlQVlZlMFh1TFZESlhCSlNoRDZDeGRyMnBSOGQKS25SRDZrTFpZZEtMQWdNQkFBR2pVekJSTUIwR0ExVWREZ1FXQkJRUzZnS2pMK3VFc0dXeXVjbTZyb0xVaXpqVwpWREFmQmdOVkhTTUVHREFXZ0JRUzZnS2pMK3VFc0dXeXVjbTZyb0xVaXpqV1ZEQVBCZ05WSFJNQkFmOEVCVEFECkFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUJad3B4Z2Z4N2thZFhvRHNyT1hUVXJ6dEFPMkFQRVJNaTAKaTkyNk9DTGFPbVVYZW1uKytXSUU1K2tUSE0wcS8vbUZCTURzSmdZSFVLUlNvRGNsNmh4TnVFNUNzS2trRVFTSgpMTHZrWlB0S2J5NGlxMitLZ1JtdVZxbXJNVTBYQzZMZDl3WmttL2huUjNtT3V6bko4MGZmV1JDQ0xGWDEwY2EzCnc5TGM1d1JLTFBZZXQvcEs5SitOYWN3TFJRYTczVFovMUpQNW9BU3czVjNoYkxlLy9UeWpnOURqUlZGY3FYWnEKWWs2Mm5qSkhZVzh3WmlhZzc0QXU4dHE5OG5KandBV1ROMFV5L2w1Q2VpWnV5bzZlU0RHVDNJNm1BdGU1VXBvWAppNXBkYlZ6VDdOZC9IOEwwZHZNdVZ2N0FmakZlcU91cUZNNkkzTnlvbStLWENxNmJQdGxBWEkzeVFZc0t4ZlRkCkw3SnRaTmx6MGJ6eHJhcHI4RmpYcjhML1ZkeHQza00xMnJwb2kzL3hsckR6Q2Q2b2YrQ1MxelBocUdpOUhvcUoKZEU5VGhYMklTdkd2akVSYzVVNFRsNjJBNHNyeGJQbUt0eWx3dGNGVEJacUJiRGY3ZjBBc2cveWhndXdTcktsQQpBNkRWVXVCRFErdGpwZ0N0b0ZlOEhLVDJ6UFVlaEQ2ZjVNQkhmU2ZUZ1crTlhFSXNvVDNsampjY1hsYXhPcFJWCkNQNWxCczNmekxyYnBxbUlLaWZhdWlTNWM4TzlSUjhjQTVzeWlBOTBmbmJIdDlmdGxpRG9jcFRzNUtrbjk2NkIKZUxMM1dXVldCYUtvanJzY1RkVXJoalNnVVBmam5FTXpnVzR2eEc3d3BVNHR2ME4yaEtHUWc0bVhhcDV0SU5Pcwp4WktnZXRHUldnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"vm-blank.ff.lan\"\n                    ],\n                    \"resolver\": \"192.168.1.13\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"server_cert\",\n                            \"key\": \"server_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ],\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"mTLS-client-profile\"\n                                    }\n                                ]\n                            }\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/vm-blank.ff.lan_access_log\",\n                        \"error\": \"/var/log/nginx/vm-blank.ff.lan_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://origin_server\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"origin_server\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"mTLS-client-profile\",\n                        \"type\": \"mtls\",\n                        \"mtls\": {\n                            \"enabled\": \"on\",\n                            \"client_certificates\": \"cacert\",\n                            \"trusted_ca_certificates\": \"cacert\",\n                            \"ocsp\": {\n                                \"enabled\": \"on\",\n                                \"responder\": \"http://ocsp.k8s.ie.ff.lan\"\n                            },\n                            \"stapling\": {\n                                \"enabled\": true,\n                                \"verify\": true,\n                                \"responder\": \"http://ocsp.k8s.ie.ff.lan\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "NGINX App Protect WAF",
							"item": [
								{
									"name": "Create initial NGINX configuration with NGINX App Protect WAF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-blocked\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - XSS blocked\",\n                            \"description\": \"This is a production-ready policy - XSS blocked\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-blocked.json\"\n                            }\n                        },\n                        {\n                            \"tag\": \"xss-allowed\",\n                            \"displayName\": \"Production Policy - XSS allowed\",\n                            \"description\": \"This is a production-ready policy - XSS allowed\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-allowed.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"production-policy\",\n                        \"log\": {\n                            \"profile_name\": \"secops_dashboard\",\n                            \"enabled\": true,\n                            \"destination\": \"127.0.0.1:514\"\n                        }\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Change active NGINX App Protect policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-allowed\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - XSS blocked\",\n                            \"description\": \"Production-ready policy - XSS blocked\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-blocked.json\"\n                            }\n                        },\n                        {\n                            \"tag\": \"xss-allowed\",\n                            \"displayName\": \"Production Policy - XSS allowed\",\n                            \"description\": \"Production-ready policy - XSS allowed\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-allowed.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update TLS certificates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert2.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert2.key\"\n                    }\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Disable NGINX App Protect WAF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config",
												"{{configUid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "NGINX Javascript",
							"item": [
								{
									"name": "NGINX Javascript test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Example HTTP server with Javascript\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"njs-test.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/njs-test.nginx.lab_access_log\",\n                        \"error\": \"/var/log/nginx/njs-test.nginx.lab_error_log\"\n                    },\n                    \"njs\": [\n                        {\n                            \"hook\": {\n                                \"type\": \"js_set\",\n                                \"js_set\": {\n                                    \"variable\": \"$serverVarSetByNjs\"\n                                }\n                            },\n                            \"profile\": \"njs_set_variable\",\n                            \"function\": \"njsSetVariable\"\n                        }\n                    ],\n                    \"headers\": {\n                        \"to_server\": {\n                            \"set\": [\n                                {\n                                    \"name\": \"X-Injected-Client-IP\",\n                                    \"value\": \"$remote_addr\"\n                                },\n                                {\n                                    \"name\": \"Host\",\n                                    \"value\": \"echo.free.beeceptor.com\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/echo\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-HTTP-Var-Set-By-Njs\",\n                                            \"value\": \"$httpVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"X-Server-Var-Set-By-Njs\",\n                                            \"value\": \"$serverVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        },\n                        {\n                            \"uri\": \"/generatecontent\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"njs\": [\n                                {\n                                    \"hook\": {\n                                        \"type\": \"js_content\"\n                                    },\n                                    \"profile\": \"njs_set_content\",\n                                    \"function\": \"njsSetContent\"\n                                }\n                            ],\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-HTTP-Var-Set-By-Njs\",\n                                            \"value\": \"$httpVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"X-Server-Var-Set-By-Njs\",\n                                            \"value\": \"$serverVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ],\n            \"njs\": [\n                {\n                    \"hook\": {\n                        \"type\": \"js_set\",\n                        \"js_set\": {\n                            \"variable\": \"$httpVarSetByNjs\"\n                        }\n                    },\n                    \"profile\": \"njs_set_variable\",\n                    \"function\": \"njsSetVariable\"\n                }\n            ],\n            \"njs_profiles\": [\n                {\n                    \"name\": \"njs_set_variable\",\n                    \"file\": {\n                        \"content\": \"ZnVuY3Rpb24gbmpzU2V0VmFyaWFibGUocikgewogICAgcmV0dXJuICJWYXJpYWJsZV9zZXRfYnlfamF2YXNjcmlwdCAtIFVSSSAiK3IudXJpOwp9CgpleHBvcnQgZGVmYXVsdCB7bmpzU2V0VmFyaWFibGV9Cgo=\"\n                    }\n                },\n                {\n                    \"name\": \"njs_set_content\",\n                    \"file\": {\n                        \"content\": \"ZnVuY3Rpb24gbmpzU2V0Q29udGVudChyKSB7CiAgci5yZXR1cm4oMjAwLCAiSGVsbG8gd29ybGQhXG4iKTsKfQoKZXhwb3J0IGRlZmF1bHQge25qc1NldENvbnRlbnR9Cg==\"\n                    }\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Server-side and source of truth authentication",
							"item": [
								{
									"name": "Bearer Token, Basic and HTTP header upstream authentication",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v2/www.online-boutique.local.crt\",\n                        \"authentication\": [\n                            {\n                                \"profile\": \"Basic authentication profile\"\n                            }\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v2/www.online-boutique.local.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\",\n                            \"authentication\": {\n                                \"server\": [\n                                    {\n                                        \"profile\": \"Bearer token-based authentication profile\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"server\": [\n                    {\n                        \"name\": \"Bearer token-based authentication profile\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"bearer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Header-based authentication profile\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"header\",\n                            \"location\": \"X-AUTH-TOKEN\"\n                        }\n                    },\n                    {\n                        \"name\": \"Basic authentication profile\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"type\": \"basic\",\n                            \"username\": \"authusername\",\n                            \"password\": \"YXV0aHBhc3N3b3Jk\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "mTLS upstream authentication",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var respData = JSON.parse(responseBody);",
													"",
													"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
													"",
													"pm.collectionVariables.set('configUid',respData.configUid);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v2/www.online-boutique.local.crt\",\n                        \"authentication\": [\n                            {\n                                \"profile\": \"Basic authentication profile\"\n                            }\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v2/www.online-boutique.local.key\"\n                    }\n                },\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"client_cert\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZBakNDQStxZ0F3SUJBZ0lVYXZ1aFhBOWFLVFJlYmZ2Y1BFU2Z0MjBUQXhzd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1ZqRUxNQWtHQTFVRUJoTUNTVVV4RFRBTEJnTlZCQWdNQkVOdmNtc3hEVEFMQmdOVkJBY01CRU52Y21zeApFVEFQQmdOVkJBb01DRUZqYldVZ1RIUmtNUll3RkFZRFZRUUREQTEwWlhOMExtRmpiV1F1YkdGdU1CNFhEVEkwCk1EUXhOVEUzTURnMU0xb1hEVEkxTURReE5URTNNRGcxTTFvd1dERUxNQWtHQTFVRUJoTUNTVVV4RFRBTEJnTlYKQkFnTUJFTnZjbXN4RFRBTEJnTlZCQWNNQkVOdmNtc3hFVEFQQmdOVkJBb01DRUZqYldVZ1RIUmtNUmd3RmdZRApWUVFEREE5amJHbGxiblF1WVdOdFpTNXNZV0l3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLCkFvSUNBUURUQ2kydi8rc08rdTJTcFF5ZVBLM3hnb3RyRUlDZGJYMmN4N0xkcnRDbE82a0xTM3IybWpxV1ptWkQKUWkvL0dIZXhYS3NaelBURDUyN0ZMZlREcExIb2h1MldmeUErQy9HN2JycXlNT0dQZ3lVcEI2NWN2THU4V1BNOApPa3lxVFdma0xkRnF2akFGclU5czMxUnljT3BQSlB0cFloRWlhQXZRWDlwRnhjalM2NUJscUFCMjY1YnlncGs2CmpsV1E5NTVWUzlmZlNLU3hpQTRCQXAzMHV3Rm5YRWtMcGRCenI1TkFKeXJqdXhzbHJGVEs4SGxvRmQ2MndzQUMKRjYrRGZmQ2FNLzVockljRkswSVFheHBpaWUyWllKaVFmNXJMeVd6VG1xMVh1QmsyaEhBWDNvQUY2bW9hcnVNOAo5UlhxQmlaNnFWdGFPQXFEK0pRVGNpYmVzekQ2Z2xoSitGM0VFTEJOWVhETmFLbGprQXRxVWFwYStXZEdVUkU4CnZvczA4TSsvOUlhWTdQeGtQNXB6bDhmaS9RaS9ESW9WLzh0UUlydFBIYzJqSTFSRkZoL3BpeDFsR2lyTlRBK0QKbTlURDJKT0hTU3VmdkRkRnV1YjFwMnF5TW5Nd3FFNklHOGpmTEg2TGNxRGFSbmcveVpVUTBqa01LSFYrd1gwegpkZ1RsMDVVWjZtMFpFNUdlK1FRaG5nY0FUemdrSWp3WlJod1JLOEx1Nmtwb2Vnb0dMUkhkTVNqcUV0NkNWc25BCmFLZ0hTbTJROE9MS1lJdlhVN1RpME9DNm5OdU40RDlKdkxGQXdPMUVFU2tCUXFQeThGby8zRVNZWU1FazJ6RzQKc3I0UXJ4Q2xuY2pwbUMrdkRmdHJuR055SVJvditOeS9zd2FSdkcvcm15ZnhEYVdNL3dJREFRQUJvNEhGTUlIQwpNQWtHQTFVZEV3UUNNQUF3RVFZSllJWklBWWI0UWdFQkJBUURBZ1dnTURNR0NXQ0dTQUdHK0VJQkRRUW1GaVJQCmNHVnVVMU5NSUVkbGJtVnlZWFJsWkNCRGJHbGxiblFnUTJWeWRHbG1hV05oZEdVd0hRWURWUjBPQkJZRUZGQmIKdmltZDYxekxLdlA0U2RZRFRWbndYdFVwTUI4R0ExVWRJd1FZTUJhQUZLY29GRHpMVnc1QXBiMzB5UTM0c25MZQpHQ1FWTUE0R0ExVWREd0VCL3dRRUF3SUY0REFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQWdZSUt3WUJCUVVICkF3UXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSmg0cm9kZEVGemJwWk5kSW5zUmdubWVnWVIxSWlzUUxRU0IKcmNydEZxVmtLb3Rsc09EUXBFMThIRjBsbVA4WE9IU0hqYytYUVF5YlFNd1ViZ2RNbnhBZE1WaGFaMXppWElnaQpiUHgwOEY0YXR5MElJY1hyOVpFVnZTd1pheURBZHErb2s5RGpoRjQwYU5iQmFBTXB2NTRCL2U3OUNMSWZ6REo4CnNZaWw3K09abWlOUTJtZUNreVBYdXdhd3hTeVRnNVhWS3Q4VEtKQVJ5aTFJeWRHWkZRMTJGWFJHTE1BSjdaYngKRzlPd1ZvazExenpWNkRQZHFuZU5ER3BQRU5WZ2VmVjI0ZU1JVXUrYzhnSThYTU1GMU9VVWR3MmlEQmU4Q01TQQppc2h2aDFWYVZPNC96czlma2dLV2FXejNwQWprN3pkbWdaUnpXRUVHR0JMekJoQk5FQTg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"client_key\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRd0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Mwd2dna3BBZ0VBQW9JQ0FRRFRDaTJ2LytzTyt1MlMKcFF5ZVBLM3hnb3RyRUlDZGJYMmN4N0xkcnRDbE82a0xTM3IybWpxV1ptWkRRaS8vR0hleFhLc1p6UFRENTI3RgpMZlREcExIb2h1MldmeUErQy9HN2JycXlNT0dQZ3lVcEI2NWN2THU4V1BNOE9reXFUV2ZrTGRGcXZqQUZyVTlzCjMxUnljT3BQSlB0cFloRWlhQXZRWDlwRnhjalM2NUJscUFCMjY1YnlncGs2amxXUTk1NVZTOWZmU0tTeGlBNEIKQXAzMHV3Rm5YRWtMcGRCenI1TkFKeXJqdXhzbHJGVEs4SGxvRmQ2MndzQUNGNitEZmZDYU0vNWhySWNGSzBJUQpheHBpaWUyWllKaVFmNXJMeVd6VG1xMVh1QmsyaEhBWDNvQUY2bW9hcnVNODlSWHFCaVo2cVZ0YU9BcUQrSlFUCmNpYmVzekQ2Z2xoSitGM0VFTEJOWVhETmFLbGprQXRxVWFwYStXZEdVUkU4dm9zMDhNKy85SWFZN1B4a1A1cHoKbDhmaS9RaS9ESW9WLzh0UUlydFBIYzJqSTFSRkZoL3BpeDFsR2lyTlRBK0RtOVREMkpPSFNTdWZ2RGRGdXViMQpwMnF5TW5Nd3FFNklHOGpmTEg2TGNxRGFSbmcveVpVUTBqa01LSFYrd1gwemRnVGwwNVVaNm0wWkU1R2UrUVFoCm5nY0FUemdrSWp3WlJod1JLOEx1Nmtwb2Vnb0dMUkhkTVNqcUV0NkNWc25BYUtnSFNtMlE4T0xLWUl2WFU3VGkKME9DNm5OdU40RDlKdkxGQXdPMUVFU2tCUXFQeThGby8zRVNZWU1FazJ6RzRzcjRRcnhDbG5janBtQyt2RGZ0cgpuR055SVJvditOeS9zd2FSdkcvcm15ZnhEYVdNL3dJREFRQUJBb0lDQUJzWEZBK2krRmVFbW5rdE9xdHRUL1FsCk5TUlozL05WYjJuRlcyUGRqRHhKcGtUTzV2VS9qYThVd2ZmTVIrdWxCbWhSWkVmOFBweVBMc2J5USszV29iSjAKUk9JQlprVjdYd2ZDWDdEVUJDc0VtS3ZscDlvN3JVQmJqV0w1SmpJNDhYeDI3VFR0NlFMY05uVXhUZDUxanRPagpXYXFJdzNqNU1Oc0tFdDRncWlET2RhQzIvMzJaekZkTHNHNWdnRmRnUElZOUpYUXN3bHk2VnZjdzVpU0RoTnRICkcyYWxYYXdiL2s1Sk9OWTIyY3RDT0kyUnhPUGtPc3lYRkoxYTBRQStGYmxBWExKenVubE5ZNU9iOXEwWTFpa2sKSHpGeXBUcENSdmY2dzY3em00NUYvZVdkS0MzdmpnM29JK29GUS9vMTJUdjhWV3Bhc0ptSmoraUJ5aFRpOGx4YQpMempXaHNrUFZJUGJDYjFDTmIzZHNQSWVWYTVQYmRORGh2bHBQZFV4cXhKRGI4ZUFhemxSQXJVdmtaQnpkTjZtCjVwekljNGtMQnd3Wno5eGg1MzdsQ0tlZ3ZJYmdEMlQvMEM4SVFsWmFIK1M3azlWaVU2Z1RWSGNzU1RsSm52NVYKN3VCMWczVzJZRVloZFJxNlJOUXRZaUFuTktUS2ZYb3d1UUJteWRwVWRYWUljTE5GcER6eHgvRGdQSEhnU0J1dQpQZXVMZzdpemhSSndKMTQ1eW5VTlloQnROVVJaOWlRL1cwWTJOa242UWFBZDNld1pLaVg0S3lZU2k3TTF1MFJWCmFDc1BmZWJrWkRTUnRnQ2Q5N3dGSVYyTVh0UnpXNlpKUUlDWkhHTDVkYkJrNU0xQTI2NnJSYmcvTWZJSE9mdTMKRUZBVjc2aXoyVmNtSDRzblNZUHhBb0lCQVFEc0pNWElhM3ZyRXdRSkh0alRWZE9ONk9rbEExRVN4aWtjSWdSOAo3aFRWQXk3dmtORlpFVUhYczQ1TXlYQzRxTWlvUnFhZHVtOXpQWnFBQ0tQMHRWcXdDMVdOcUFrbDBQc1pZYXcrCmpKNjRDQXA4ZnJ4UDUrOVpWREtiamRWK1ZrK1lrbC9UL0Q1djNFTnZIdkVxN3ZMSE56dE9VSmFWZXNFRERQSW8KaER5SHhjRXQwTHRXTFhoNGNMSDhIQk9Kc0wxYXcxRlhNTk1qdERzazlBMTlJRFlYTHcwaWpIeC81c3hHUGcxSQpmMXRIemhpTlN5NUU5RG9pTmJxVFQvWEEyYVdCdjJ1ZlQybmw2ekticHZHNVo0VGlOUE5ESU5MaUFXOVNNQnJnCkJtaXJFVHU4MnVSa3hnaWZTM01CZ0ZFdXVtaSt2cEhwNzhGaUNOcHpZZUFwTUxjN0FvSUJBUURreVFVT29HVjEKTzZaNXJ4KzhLbVh1S3dmbXNHNmh5cmkrNEw4MzRQakVhbHdkdFhFUmphUG8vSTVhOVFoYjNnLzF5SUdiMzdLSgpPaTFCcGVRZ1owUEVQdFgyRWI0QTNCSTA5SzExWWFybnJGM2d6WS9CVWgveEZoL1YvVEVzTTloZTZ4YlhtRm9WCktvMlY1b2NlNnQzNUJuNHVLL2xkSEJKMHJnUENQdXNKVU9JMEhtUzZkdXNQcHczRFpESkZ5SEU4anptSllwcUsKMnBEMlBBMVZ5aVBBM3MwOU12TWdNSmJXajJLQVBoYk4xQXJnTERaUTFuZ0VwaVFtM3hWdmxIVkMzN0JHM0IzcApWbmtSRE9UZnF1N1BXek40aHZnMDRaNkxBdEZuYzNnMFFxRGcvcXZlS0xuclZwOUJEUlhWb0pZZkNMaVBkajZCCmFiYnFXQ0lYTnMwTkFvSUJBUURFWllrQk9UT2t2UG44UStWOVRzSldJa0hWZ0w2cTZKaEVSNTZIOE5MdW5ta28KNGI3Ylh0anQ5dTRBdXdDKzg5Ris4dE9jRnZTZVdidm5oRWdvTzdTaSthbzcyR2RUUmsyd1BHV3UxL0VoaWI1Kwo4RURhREVJcWZ6WmYzVVNVZ0dCT3VsNXN4anQvZVNlMGdYMStnYUQxUXVCV0wvd3RjaHlZMXVtSC9RTUN3TnY3CnFNQkYyaWQ1cy9Demh2NVE0K2Q0VnoyTlVKUXArN204OENWUHpieHU1N2o2NVBDZXgydFplRDQvNzN3UmFqMU4KTmh2VFNYUVlBNnVhM1VPOUVzYnQ5REFrSFQ0cjlNTHdaWlpnNXRIRCtObmhHS21MUWpvOWxyaWpYWEVyNVhkVAppSkd2cG15Qlg1VFV5TTI4R1ZrSVd5S3I5N1ZVUFp6Qm5jTjdQb01GQW9JQkFDSWRCekFESXAyMFkwSkpwb1c4CkhLN0NvODcyQjhrQUhVUDQ1d3BCOVZYME5nQUlDZkFBR3F5bTIrTWNIajcwZ1pTNGJQcjlBL1lLUXExRE94ekoKeVFUK0NaRkRXLzFzMHhvcVVhTHJDVHk2S3RWV1VWVVdGY1V3ODFaSkJvZjh3d3FFSzBmQ1k4dzhLQmh0NHovcwo3V1F3WDZncXptZmZ3N0M2TWIxSS9HckxNSzlzeU1BMDh4L0dYUHNCZWEyR0VieGg3c1paZVlteXhXS3gyWnN0CkpOK2hXU0VDODlXYzZTRGRDR2J1MngrZHVuRnFwajZ2ZS8zVmVCYUR0UUtLTkdIZ1VMeUFIY1dwS3l3cnJBVGQKeS9ZSE4wbUZkb1VNRDBQVEM3NU5MV005ZkJlUVliZ2lnblpnMkNZdStVNTlQMlVwTzd2SWVkRjZIZGdiaEJuSwpCaEVDZ2dFQkFNZmQ2Zi90RThTQlNFUnd5YW80SThuZkhTZUlMUklvM3pqRE5vWHZ6VHlwbG00a3ovYW9QeEF0CmhPYVNmZU41bFljMXFFUkRxZzRIVGRNTUkyenZPaVFuMHNGTEJFZ0UwT0VIOEZxZVZlZGgycUJucFdXWEhwTW8KREd4TnhpUnVpSDZpOEVMVWFoaU1NQkdQVi9ONjI5MDREbnUyYVVHcHlMTzZxems3SmM5VXlITC90QVNRTFIzagp6NFBhb2xTRE5rNzJSUks0VjIyZUprM2EwYVhjRU5vM1R0OUlTUTliMG5DYVVKbFJsZTA0d2QrOWUyN0FRNUNaCkVWbUtZT1JYcW9VTGNQOEcxRm1VUGhDRkU2aEI3L1hSVWpQdmJFdm5rS05Cdko2UHppT0RMdktRK3I4TzR0WkMKQi9LTDlCdjNmdUkvQlJLeU9WZVU1VnZ5MzUveUFxVT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\",\n                            \"authentication\": {\n                                \"server\": [\n                                    {\n                                        \"profile\": \"mTLS authentication profile\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"server\": [\n                    {\n                        \"name\": \"mTLS authentication profile\",\n                        \"type\": \"mtls\",\n                        \"mtls\": {\n                            \"certificate\": \"client_cert\",\n                            \"key\": \"client_key\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"description": "[https://github.com/f5devcentral/NGINX-Declarative-API/blob/main/USAGE-v4.2.md](https://github.com/f5devcentral/NGINX-Declarative-API/blob/main/USAGE-v4.2.md)"
		},
		{
			"name": "v5.0",
			"item": [
				{
					"name": "Configuration generation",
					"item": [
						{
							"name": "Basic - LB",
							"item": [
								{
									"name": "Basic - LB - plaintext output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"plaintext\"\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample L4 service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"udp\"\n                    },\n                    \"upstream\": \"l4_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"A sample HTTP service\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Basic - LB - json b64 encoded output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"json\"\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample L4 service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"udp\"\n                    },\n                    \"upstream\": \"l4_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"A sample HTTP service\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Basic - LB - ConfigMap output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"configmap\",\n        \"configmap\": {\n            \"name\": \"nginx.test\",\n            \"filename\": \"testservice.conf\",\n            \"namespace\": \"test-namespace\"\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample L4 service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"udp\"\n                    },\n                    \"upstream\": \"l4_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"A sample HTTP service\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Basic - LB - HTTP output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"http\",\n        \"http\": {\n            \"url\": \"http://192.168.2.19:8080/path/service\"\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample L4 service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"udp\"\n                    },\n                    \"upstream\": \"l4_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"A sample HTTP service\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Advanced",
							"item": [
								{
									"name": "Advanced LB - plaintext output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"plaintext\"\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample_layer4_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\",\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"upstream\": \"l4_upstream\",\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgbDQgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/test\",\n                            \"urimatch\": \"exact\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true,\n                                \"uri\": \"/healthcheck\",\n                                \"interval\": 5,\n                                \"fails\": 3,\n                                \"passes\": 2\n                            },\n                            \"rate_limit\": {\n                                \"profile\": \"test_ratelimit\",\n                                \"httpcode\": 429,\n                                \"burst\": 10,\n                                \"delay\": 3\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"test_policy\",\n                                \"log\": {\n                                    \"profile_name\": \"log_illegal\",\n                                    \"enabled\": true,\n                                    \"destination\": \"192.168.1.5:514\"\n                                }\n                            },\n                            \"snippet\": {\n                                \"content\": \"IyBUaGlzIGlzIGEgbG9jYXRpb24gc25pcHBldCBjb21tZW50Cg==\"\n                            }\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"test_policy\",\n                        \"log\": {\n                            \"profile_name\": \"log_blocked\",\n                            \"enabled\": true,\n                            \"destination\": \"192.168.1.5:514\"\n                        }\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgc2VydmVyIHNuaXBwZXQgY29tbWVudAo=\"\n                    }\n                },\n                {\n                    \"name\": \"another HTTP test application\",\n                    \"names\": [\n                        \"server_443\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\",\n                            \"backup\": true\n                        }\n                    ],\n                    \"sticky\": {\n                        \"cookie\": \"cookie_name\",\n                        \"expires\": \"1h\",\n                        \"domain\": \".testserver\",\n                        \"path\": \"/\"\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"test_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                }\n            ],\n            \"maps\": [\n                {\n                    \"match\": \"$host$request_uri\",\n                    \"variable\": \"$backend\",\n                    \"entries\": [\n                        {\n                            \"key\": \"www.test.lab/app1/\",\n                            \"keymatch\": \"iregex\",\n                            \"value\": \"upstream_1\"\n                        },\n                        {\n                            \"key\": \"(.*).test.lab/app2/\",\n                            \"keymatch\": \"regex\",\n                            \"value\": \"upstream_2\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": true,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"snippet\": {\n                \"content\": \"IyBUaGlzIGlzIGEgSFRUUCBzbmlwcGV0IGNvbW1lbnQK\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Advanced LB - json b64 encoded output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"json\"\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample_layer4_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\",\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"upstream\": \"l4_upstream\",\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgbDQgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/test\",\n                            \"urimatch\": \"exact\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true,\n                                \"uri\": \"/healthcheck\",\n                                \"interval\": 5,\n                                \"fails\": 3,\n                                \"passes\": 2\n                            },\n                            \"rate_limit\": {\n                                \"profile\": \"test_ratelimit\",\n                                \"httpcode\": 429,\n                                \"burst\": 10,\n                                \"delay\": 3\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"test_policy\",\n                                \"log\": {\n                                    \"profile_name\": \"log_illegal\",\n                                    \"enabled\": true,\n                                    \"destination\": \"192.168.1.5:514\"\n                                }\n                            },\n                            \"snippet\": {\n                                \"content\": \"IyBUaGlzIGlzIGEgbG9jYXRpb24gc25pcHBldCBjb21tZW50Cg==\"\n                            }\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"test_policy\",\n                        \"log\": {\n                            \"profile_name\": \"log_blocked\",\n                            \"enabled\": true,\n                            \"destination\": \"192.168.1.5:514\"\n                        }\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgc2VydmVyIHNuaXBwZXQgY29tbWVudAo=\"\n                    }\n                },\n                {\n                    \"name\": \"another HTTP test application\",\n                    \"names\": [\n                        \"server_443\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\",\n                            \"backup\": true\n                        }\n                    ],\n                    \"sticky\": {\n                        \"cookie\": \"cookie_name\",\n                        \"expires\": \"1h\",\n                        \"domain\": \".testserver\",\n                        \"path\": \"/\"\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"test_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                }\n            ],\n            \"maps\": [\n                {\n                    \"match\": \"$host$request_uri\",\n                    \"variable\": \"$backend\",\n                    \"entries\": [\n                        {\n                            \"key\": \"www.test.lab/app1/\",\n                            \"keymatch\": \"iregex\",\n                            \"value\": \"upstream_1\"\n                        },\n                        {\n                            \"key\": \"(.*).test.lab/app2/\",\n                            \"keymatch\": \"regex\",\n                            \"value\": \"upstream_2\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": true,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"snippet\": {\n                \"content\": \"IyBUaGlzIGlzIGEgSFRUUCBzbmlwcGV0IGNvbW1lbnQK\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Advanced LB - ConfigMap output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"configmap\",\n        \"configmap\": {\n            \"name\": \"nginx.test\",\n            \"filename\": \"testservice.conf\",\n            \"namespace\": \"test-namespace\"\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample_layer4_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\",\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"upstream\": \"l4_upstream\",\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgbDQgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/test\",\n                            \"urimatch\": \"exact\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true,\n                                \"uri\": \"/healthcheck\",\n                                \"interval\": 5,\n                                \"fails\": 3,\n                                \"passes\": 2\n                            },\n                            \"rate_limit\": {\n                                \"profile\": \"test_ratelimit\",\n                                \"httpcode\": 429,\n                                \"burst\": 10,\n                                \"delay\": 3\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"test_policy\",\n                                \"log\": {\n                                    \"profile_name\": \"log_illegal\",\n                                    \"enabled\": true,\n                                    \"destination\": \"192.168.1.5:514\"\n                                }\n                            },\n                            \"snippet\": {\n                                \"content\": \"IyBUaGlzIGlzIGEgbG9jYXRpb24gc25pcHBldCBjb21tZW50Cg==\"\n                            }\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"test_policy\",\n                        \"log\": {\n                            \"profile_name\": \"log_blocked\",\n                            \"enabled\": true,\n                            \"destination\": \"192.168.1.5:514\"\n                        }\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgc2VydmVyIHNuaXBwZXQgY29tbWVudAo=\"\n                    }\n                },\n                {\n                    \"name\": \"another HTTP test application\",\n                    \"names\": [\n                        \"server_443\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\",\n                            \"backup\": true\n                        }\n                    ],\n                    \"sticky\": {\n                        \"cookie\": \"cookie_name\",\n                        \"expires\": \"1h\",\n                        \"domain\": \".testserver\",\n                        \"path\": \"/\"\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"test_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                }\n            ],\n            \"maps\": [\n                {\n                    \"match\": \"$host$request_uri\",\n                    \"variable\": \"$backend\",\n                    \"entries\": [\n                        {\n                            \"key\": \"www.test.lab/app1/\",\n                            \"keymatch\": \"iregex\",\n                            \"value\": \"upstream_1\"\n                        },\n                        {\n                            \"key\": \"(.*).test.lab/app2/\",\n                            \"keymatch\": \"regex\",\n                            \"value\": \"upstream_2\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": true,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"snippet\": {\n                \"content\": \"IyBUaGlzIGlzIGEgSFRUUCBzbmlwcGV0IGNvbW1lbnQK\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Advanced LB - HTTP output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"http\",\n        \"http\": {\n            \"url\": \"http://192.168.1.19:8080/path/service\"\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample_layer4_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\",\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"upstream\": \"l4_upstream\",\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgbDQgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/test\",\n                            \"urimatch\": \"exact\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true,\n                                \"uri\": \"/healthcheck\",\n                                \"interval\": 5,\n                                \"fails\": 3,\n                                \"passes\": 2\n                            },\n                            \"rate_limit\": {\n                                \"profile\": \"test_ratelimit\",\n                                \"httpcode\": 429,\n                                \"burst\": 10,\n                                \"delay\": 3\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"test_policy\",\n                                \"log\": {\n                                    \"profile_name\": \"log_illegal\",\n                                    \"enabled\": true,\n                                    \"destination\": \"192.168.1.5:514\"\n                                }\n                            },\n                            \"snippet\": {\n                                \"content\": \"IyBUaGlzIGlzIGEgbG9jYXRpb24gc25pcHBldCBjb21tZW50Cg==\"\n                            }\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"test_policy\",\n                        \"log\": {\n                            \"profile_name\": \"log_blocked\",\n                            \"enabled\": true,\n                            \"destination\": \"192.168.1.5:514\"\n                        }\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgc2VydmVyIHNuaXBwZXQgY29tbWVudAo=\"\n                    }\n                },\n                {\n                    \"name\": \"another HTTP test application\",\n                    \"names\": [\n                        \"server_443\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\",\n                            \"backup\": true\n                        }\n                    ],\n                    \"sticky\": {\n                        \"cookie\": \"cookie_name\",\n                        \"expires\": \"1h\",\n                        \"domain\": \".testserver\",\n                        \"path\": \"/\"\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"test_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                }\n            ],\n            \"maps\": [\n                {\n                    \"match\": \"$host$request_uri\",\n                    \"variable\": \"$backend\",\n                    \"entries\": [\n                        {\n                            \"key\": \"www.test.lab/app1/\",\n                            \"keymatch\": \"iregex\",\n                            \"value\": \"upstream_1\"\n                        },\n                        {\n                            \"key\": \"(.*).test.lab/app2/\",\n                            \"keymatch\": \"regex\",\n                            \"value\": \"upstream_2\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": true,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"snippet\": {\n                \"content\": \"IyBUaGlzIGlzIGEgSFRUUCBzbmlwcGV0IGNvbW1lbnQK\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Declarative automation examples",
					"item": [
						{
							"name": "NGINX Instance Manager",
							"item": [
								{
									"name": "API Gateway",
									"item": [
										{
											"name": "Ergast API",
											"item": [
												{
													"name": "Ergast API Gateway and DevPortal with redocly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Ergast API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/ergast\",\n                            \"urimatch\": \"prefix\",\n                            \"snippet\": {\n                                \"content\": \"IyBUZXN0IFNOSVBQRVQK\"\n                            },\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"https://raw.githubusercontent.com/adampax/ergast-f1-openapi-doc/e558eea18e176e4f78a8765ac7eccc804b5157ff/ergast-openapi-doc.yaml\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/ergast-devportal.html\"\n                                    }\n                                },\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/ergast-access_log\",\n                                    \"error\": \"/var/log/nginx/ergast-error_log\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ergast API Gateway and DevPortal with backstage",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Ergast API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/ergast\",\n                            \"urimatch\": \"prefix\",\n                            \"snippet\": {\n                                \"content\": \"IyBUZXN0IFNOSVBQRVQK\"\n                            },\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"https://raw.githubusercontent.com/adampax/ergast-f1-openapi-doc/e558eea18e176e4f78a8765ac7eccc804b5157ff/ergast-openapi-doc.yaml\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"backstage\",\n                                    \"backstage\": {\n                                        \"name\": \"petstore-devportal\",\n                                        \"lifecycle\": \"production\",\n                                        \"owner\": \"api-team\",\n                                        \"system\": \"public-api-system\"                                        \n                                    }\n                                },\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/ergast-access_log\",\n                                    \"error\": \"/var/log/nginx/ergast-error_log\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Petstore API",
											"item": [
												{
													"name": "Petstore API Gateway RateLimit",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\",\n                                    \"authentication\": [\n                                        {\n                                            \"profile\": \"Source of truth authentication profile using HTTP header token authentication\"\n                                        }\n                                    ]\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ],\n                \"server\": [\n                    {\n                        \"name\": \"Source of truth authentication profile using bearer token authentication\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"bearer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Source of truth authentication profile using HTTP header token authentication\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"header\",\n                            \"location\": \"X-AUTH-TOKEN\"\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ + redocly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/petstore-devportal.html\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\",\n                                        \"/pet/{petId}/uploadImage\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ],\n                                \"errorcode\": 403\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ +  backstage",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"backstage\",\n                                    \"backstage\": {\n                                        \"name\": \"petstore-devportal\",\n                                        \"lifecycle\": \"production\",\n                                        \"owner\": \"Petstore-API-owner\",\n                                        \"system\": \"Public-facing-API-system\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\",\n                                        \"/pet/{petId}/uploadImage\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ],\n                                \"errorcode\": 403\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ + WAF + redocly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-blocked\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - XSS blocked\",\n                            \"description\": \"This is a production-ready policy - XSS blocked\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-blocked-bot-allowed.json\"\n                            }\n                        },\n                        {\n                            \"tag\": \"xss-allowed\",\n                            \"displayName\": \"Production Policy - XSS allowed\",\n                            \"description\": \"This is a production-ready policy - XSS allowed\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-allowed.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/petstore-devportal.html\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\",\n                                        \"/pet/{petId}/uploadImage\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"production-policy\",\n                                \"log\": {\n                                    \"profile_name\": \"secops_dashboard\",\n                                    \"enabled\": true,\n                                    \"destination\": \"127.0.0.1:514\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ],\n                                \"errorcode\": 403\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ + WAF + backstage",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-blocked\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - XSS blocked\",\n                            \"description\": \"This is a production-ready policy - XSS blocked\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-blocked-bot-allowed.json\"\n                            }\n                        },\n                        {\n                            \"tag\": \"xss-allowed\",\n                            \"displayName\": \"Production Policy - XSS allowed\",\n                            \"description\": \"This is a production-ready policy - XSS allowed\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-allowed.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"backstage\",\n                                    \"backstage\": {\n                                        \"name\": \"petstore-devportal\",\n                                        \"lifecycle\": \"production\",\n                                        \"owner\": \"Petstore-API-owner\",\n                                        \"system\": \"Public-facing-API-system\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\",\n                                        \"/pet/{petId}/uploadImage\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"production-policy\",\n                                \"log\": {\n                                    \"profile_name\": \"secops_dashboard\",\n                                    \"enabled\": true,\n                                    \"destination\": \"127.0.0.1:514\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ],\n                                \"errorcode\": 403\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Petstore & Ergast API Gateway all in one",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore and Ergast API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"192.168.2.13\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"uri\": \"/petstore-devportal.html\"\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\"\n                                    ]\n                                },\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ],\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/petstore-access_log\",\n                                    \"error\": \"/var/log/nginx/petstore-error_log\"\n                                }\n                            }\n                        },\n                        {\n                            \"uri\": \"/ergast\",\n                            \"urimatch\": \"prefix\",\n                            \"snippet\": {\n                                \"content\": \"IyBUZXN0IFNOSVBQRVQK\"\n                            },\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"https://raw.githubusercontent.com/adampax/ergast-f1-openapi-doc/e558eea18e176e4f78a8765ac7eccc804b5157ff/ergast-openapi-doc.yaml\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"uri\": \"/ergast-devportal.html\"\n                                },\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"ergast_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0\n                                    }\n                                ],\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/ergast-access_log\",\n                                    \"error\": \"/var/log/nginx/ergast-error_log\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"ergast_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                },\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CRUD automation",
									"item": [
										{
											"name": "Create initial NGINX configuration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"patched_server.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update HTTP upstream",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.3:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.4:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.5:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify and add HTTP upstream",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"test_upstream_added\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.1:80\"\n                        },\n                        {\n                            \"server\": \"192.168.1.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify and add HTTP server and upstream",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"patched_server_v2.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_v2_log\",\n                        \"error\": \"/var/log/nginx/error_v2_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream_added\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream_added\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.100:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"192.168.1.101:80\"\n                        },\n                        {\n                            \"server\": \"192.168.1.102:80\"\n                        },\n                        {\n                            \"server\": \"192.168.1.103:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove HTTP server and upstream",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream_added\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify Stream server and upstream",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"TCP_10053_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\"\n                    },\n                    \"upstream\": \"TCP_10053_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"TCP_10053_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.3:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.4:53\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add stream server and upstream",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"TCP_15432_service\",\n                    \"listen\": {\n                        \"address\": \"15432\",\n                        \"protocol\": \"tcp\"\n                    },\n                    \"upstream\": \"TCP_15432_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"TCP_15432_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"172.16.10.1:5432\"\n                        },\n                        {\n                            \"server\": \"172.16.10.1:5432\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove stream server and upstream #1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"TCP_10053_service\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"TCP_10053_upstream\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove stream server and upstream #2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"TCP_15432_service\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"TCP_15432_upstream\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GitOps autosync",
									"item": [
										{
											"name": "NGINX Plus and GitOps",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 5,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.1/www.online-boutique.local.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.1/www.online-boutique.local.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "NGINX App Protect WAF and GitOps",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 5,\n            \"modules\": [\n                \"ngx_http_app_protect_module\",\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v2/www.online-boutique.local.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v2/www.online-boutique.local.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"gitops\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"gitops\",\n                            \"displayName\": \"Production Policy - GitOps\",\n                            \"description\": \"This is a production-ready policy - Managed by GitOps\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v2/nap-policy-gitops.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"production-policy\",\n                        \"log\": {\n                            \"profile_name\": \"secops_dashboard\",\n                            \"enabled\": true,\n                            \"destination\": \"127.0.0.1:514\"\n                        }\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get declaration status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}/status",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get  declaration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete  declaration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Housekeeping - common endpoints",
									"item": [
										{
											"name": "Clean NGINX configuration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get declaration status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}/status",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get  declaration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete  declaration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "HTTP Headers Manipulation",
									"item": [
										{
											"name": "Create test echo service",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"resolver\": \"8.8.8.8\",\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Manipulate headers - server level",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"resolver\": \"8.8.8.8\",\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"headers\": {\n                        \"to_server\": {\n                            \"set\": [\n                                {\n                                    \"name\": \"X-Injected-Client-IP\",\n                                    \"value\": \"$remote_addr\"\n                                },\n                                {\n                                    \"name\": \"X-Injected-Echo-Test-Version\",\n                                    \"value\": \"v1\"\n                                },\n                                {\n                                    \"name\": \"Host\",\n                                    \"value\": \"echo.free.beeceptor.com\"\n                                }\n                            ],\n                            \"delete\": [\n                                \"User-Agent\"\n                            ]\n                        },\n                        \"to_client\": {\n                            \"add\": [\n                                {\n                                    \"name\": \"X-Injected-Response-Status\",\n                                    \"value\": \"$status\"\n                                }\n                            ],\n                            \"delete\": [\n                                \"vary\"\n                            ],\n                            \"replace\": [\n                                {\n                                    \"name\": \"Server\",\n                                    \"value\": \"Echo Test Server\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Manipulate headers - location level",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"resolver\": \"8.8.8.8\",\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\",\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-Injected-Echo-Test-Version\",\n                                            \"value\": \"v1\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ],\n                                    \"delete\": [\n                                        \"User-Agent\"\n                                    ]\n                                },\n                                \"to_client\": {\n                                    \"add\": [\n                                        {\n                                            \"name\": \"X-Injected-Response-Status\",\n                                            \"value\": \"$status\"\n                                        }\n                                    ],\n                                    \"delete\": [\n                                        \"vary\"\n                                    ],\n                                    \"replace\": [\n                                        {\n                                            \"name\": \"Server\",\n                                            \"value\": \"Echo Test Server\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "Test using:\n\n`curl -i echo.vm-test.ie.ff.lan`\n\nThe actual FQDN can be modified in the request JSON body"
								},
								{
									"name": "HTTPS server",
									"item": [
										{
											"name": "TLS Offload",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "TLS Offload and NGINX App Protect",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-blocked\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - GitOps\",\n                            \"description\": \"This is a production-ready policy - Managed by GitOps\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-blocked.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"production-policy\",\n                        \"log\": {\n                            \"profile_name\": \"secops_dashboard\",\n                            \"enabled\": true,\n                            \"destination\": \"127.0.0.1:514\"\n                        }\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "JWT Client Authentication",
									"item": [
										{
											"name": "JWT Client Authentication - local JWT key and Bearer token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test service\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/test.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"JWT Auth with hardwired key and Bearer token\"\n                                    }\n                                ]\n                            },\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"JWT Auth with hardwired key and Bearer token\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\"\n                        }\n                    },\n                    {\n                        \"name\": \"JWT Auth with external key and Bearer token\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Authentication GitOps\",\n                            \"key\": \"http://192.168.2.5:20080/jwks.json\",\n                            \"cachetime\": 5\n                        }\n                    },\n                    {\n                        \"name\": \"JWT Auth with hardwired key and token in auth_token query string parameter\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"token_location\": \"$arg_auth_token\"\n                        }\n                    },\n                    {\n                        \"name\": \"JWT Auth with hardwired key and token in X-Auth-Token HTTP header\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"token_location\": \"$http_x_auth_token\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "JWT secret fetched from URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test service\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/test.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"JWT Auth with external key and Bearer token\"\n                                    }\n                                ]\n                            },\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "JWT token in auth_token query string parameter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test service\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/test.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"JWT Auth with hardwired key and token in auth_token query string parameter\"\n                                    }\n                                ]\n                            },\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "JWT token in HTTP X-Auth-Token header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test service\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/test.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"JWT Auth with hardwired key and token in X-Auth-Token HTTP header\"\n                                    }\n                                ]\n                            },\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "JWT Client Authentication and Authorization",
									"item": [
										{
											"name": "JWT Client Authentication and Authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"JWT AuthN and AuthZ test server\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/auth-test.nginx.lab_access_log\",\n                        \"error\": \"/var/log/nginx/auth-test.nginx.lab_error_log\"\n                    },\n                    \"headers\": {\n                        \"to_client\": {\n                            \"add\": [\n                                {\n                                    \"name\": \"X-Injected-JWT-Group\",\n                                    \"value\": \"$jwt_claim_roles\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            },\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"jwt_authentication_local\"\n                                    }\n                                ]\n                            },\n                            \"authorization\": {\n                                \"profile\": \"jwt role based authorization\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"jwt_authentication_local\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Client Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"jwt_type\": \"signed\"\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"jwt role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "mTLS Client Authentication",
									"item": [
										{
											"name": "HTTPS server with mTLS, OCSP, SSL Stapling",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"server_cert\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdSRENDQkN5Z0F3SUJBZ0lVTTNJQVZIRmxhSTVsY1d0TjZxOUVhcnlka0w4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1NURUxNQWtHQTFVRUJoTUNTVlF4RFRBTEJnTlZCQWdNQkVGemRHa3hFVEFQQmdOVkJBb01DRlJsYzNRZwpUR0ZpTVJnd0ZnWURWUVFEREE5MmJTMWliR0Z1YXk1bVppNXNZVzR3SGhjTk1qTXdOakE0TVRBd01qTTVXaGNOCk1qUXdOakEzTVRBd01qTTVXakJKTVFzd0NRWURWUVFHRXdKSlZERU5NQXNHQTFVRUNBd0VRWE4wYVRFUk1BOEcKQTFVRUNnd0lWR1Z6ZENCTVlXSXhHREFXQmdOVkJBTU1EM1p0TFdKc1lXNXJMbVptTG14aGJqQ0NBaUl3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFMRFQ2bnZleVZlNi9VZlk2aUtHVC9oV1A0cktDSGR0ClloZWU3RGVZR29QWGhGVjB6a3grVWExanBEZ21WUE1kVEJBdnoxODg5NzlEcHBqdmNYeFhsRmpnaUhjWDhpWVgKSXovSUVMc3dKRUNITWNsNkxmelA5eDVUY1gxTEdFblFOTWhHRzA2MjlxU2NCQmQyUUNiWlY0UWE1TkxlQnQ4cQpHQ2lXY3JiQnR3YlpiSGo1dk9aenJrdHBtRFBGS1V4bXR5b2dBQnNaTllnL0F3Y1l2RXdBOEQ0QTN0VEgxcGhvCkdYY3ZvZWpJelhRMUdmYys5azR3OFhHYWFQOGd2bTdOMXN2MnU2Yld4SHRGZHpWQk9udzJyaHUvWGYyY0N0dW4KUnIxSENKQXRRSDlkbDhzZks1czBSRlVuTlVYbFBiNTFBTjBjVFVGbEYrZlVUVmVON3dNMTdmeVZVY3IydTltSwo0UGdoWjkvMml0ZUpZV3hjK3k4V2NEQzBUV3hwZ2paVEw5Tk1GK2t6SXV2TjJOWFFybjcvSU5UQTMvNFlmWGRPCloxelpTdTlkclRMcG5DZHRpOWxuRHBKODd3bW41cVZSTlZiTlZRbldEeW5yZnoyTU1DY21jLzcvdkJFN2dDemQKNFJLWHJLdHloenlQSitycmh3NmpxYVA4QytaZGRvKzkvak9QVDFTSnUxZ21VbzFuZ2hBMWh2N0M5RUYrM2xQVApYSk5WV3dtYkdWK0p4cUdKSjJSa2toMlIrZTVIREdRY2hGWjJIcXBGTGVQN0trTHJBR2RkZFZQWEZhQ0RiU0R6ClJQd0I5WFlhakg5Zm5QWEtFT3ZpVEJhQVNjWUZwTXB5cm02UkxHUGRSVnE2RUNYVlB4MDdHdGFCaEVvVWIwK2YKVkZnNExtQkx4MldQQWdNQkFBR2pnZ0VpTUlJQkhqQUpCZ05WSFJNRUFqQUFNQkVHQ1dDR1NBR0crRUlCQVFRRQpBd0lHUURBekJnbGdoa2dCaHZoQ0FRMEVKaFlrVDNCbGJsTlRUQ0JIWlc1bGNtRjBaV1FnVTJWeWRtVnlJRU5sCmNuUnBabWxqWVhSbE1CMEdBMVVkRGdRV0JCVHZFZWJGK1JDV0JhcGVPWUdpQ0YyVHZxbExYekNCaEFZRFZSMGoKQkgwd2U0QVVFdW9Db3kvcmhMQmxzcm5KdXE2QzFJczQxbFNoVGFSTE1Fa3hDekFKQmdOVkJBWVRBa2xVTVEwdwpDd1lEVlFRSURBUkJjM1JwTVJFd0R3WURWUVFLREFoVVpYTjBJRXhoWWpFWU1CWUdBMVVFQXd3UGRtMHRZbXhoCmJtc3VabVl1YkdGdWdoUld4QjhCa3lmK1RkQXc2Q3dPZE1aT0k0NlZ2REFPQmdOVkhROEJBZjhFQkFNQ0JhQXcKRXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFHUDR6ZkdseTI1RwpneTBSeC9SSTNpNzJDVlIrSXY3SW5WTUVGWDZqRHRNV3hSblFtRGZsMWtTOVF1Y3hNb0tnOE9URStMcnlzdGJsClF4WGZiakZQekNoNHB1UGtGTmNBeG1mVmR4b20xR1lodWpoYTBQOUswUURZSDZycGlUaFdSQ2greUovQm1qZ2wKTlJabks4WGRqME85Ui9XKzJrTFRac2VFbS9hZHFVQ3dkYzNBWWlNWGh4QXkvQlh3bFRQeDMyMHZCcXYxZGFyVgp5ZlVoRlM1Rkg3enV2bGtGQ1p6M3lpOGYvYXMwbkRTUkFrY3dPRFQvN1diQlN4QTk3ZzJmRk1EMEI3WlUvbndGCmU4VnRzNDl3YmZ6QWJRMk40RUc2OEVhODE1VlFRM2N6YWthdjBCdkxHL2UwT0habGxYcUVhV1ZlWFJtSWFFOHcKWko5OEhUaDJMbUlFV2Jpdm94Kyt2UXd3bVhKTm1DRFVXNnVmcHdBOVdKQ0VhYmhxeXdGVzh1dFVENzRTVXE3SApEUDhNamtJZ0o3ekl2Tkd1RkFsSzd6c2xpV2pzeUN1OGVNamhvN2pVRFhGR1R0R0ZMUGtVa08vSysrSGVVRFg0Cm1OWDJ2aHI3NGRqRkNBTTEvOTYxWnB5NUFYUzZkd2g3MFlJL2dMdldSL0J1ejBnNEp6YUI2UFo4M1ErYm9QVHYKM1ZIS2xOWjlKQlhRTmtSc3N6U0dYWG5MYmtOTmNwVFg2cnAyZ1pUSS9NNDhGTnBxanAxOXRpQVg3bWN0cTl2SgpNejhvemhEcHZmSTlnMjFsNFZlRGdpbWEwTDVBc1pQbFdIQlZjcy9yL3dMU2YzWFVYZEs0UHpCQUdIRFBidXYrCnpKOVNqS0NFVll2bHRhMHlUUVBCSFJPa2Y2MG1sVmh6Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"server_key\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBc05QcWU5N0pWN3I5UjlqcUlvWlArRlkvaXNvSWQyMWlGNTdzTjVnYWc5ZUVWWFRPClRINVJyV09rT0NaVTh4MU1FQy9QWHp6M3YwT21tTzl4ZkZlVVdPQ0lkeGZ5SmhjalA4Z1F1ekFrUUljeHlYb3QKL00vM0hsTnhmVXNZU2RBMHlFWWJUcmIycEp3RUYzWkFKdGxYaEJyazB0NEczeW9ZS0paeXRzRzNCdGxzZVBtOAo1bk91UzJtWU04VXBUR2EzS2lBQUd4azFpRDhEQnhpOFRBRHdQZ0RlMU1mV21HZ1pkeStoNk1qTmREVVo5ejcyClRqRHhjWnBvL3lDK2JzM1d5L2E3cHRiRWUwVjNOVUU2ZkRhdUc3OWQvWndLMjZkR3ZVY0lrQzFBZjEyWHl4OHIKbXpSRVZTYzFSZVU5dm5VQTNSeE5RV1VYNTlSTlY0M3ZBelh0L0pWUnl2YTcyWXJnK0NGbjMvYUsxNGxoYkZ6NwpMeFp3TUxSTmJHbUNObE12MDB3WDZUTWk2ODNZMWRDdWZ2OGcxTURmL2hoOWQwNW5YTmxLNzEydE11bWNKMjJMCjJXY09rbnp2Q2FmbXBWRTFWczFWQ2RZUEtldC9QWXd3Snlaei92KzhFVHVBTE4zaEVwZXNxM0tIUEk4bjZ1dUgKRHFPcG8vd0w1bDEyajczK000OVBWSW03V0NaU2pXZUNFRFdHL3NMMFFYN2VVOU5jazFWYkNac1pYNG5Hb1lrbgpaR1NTSFpINTdrY01aQnlFVm5ZZXFrVXQ0L3NxUXVzQVoxMTFVOWNWb0lOdElQTkUvQUgxZGhxTWYxK2M5Y29RCjYrSk1Gb0JKeGdXa3luS3VicEVzWTkxRldyb1FKZFUvSFRzYTFvR0VTaFJ2VDU5VVdEZ3VZRXZIWlk4Q0F3RUEKQVFLQ0FnQVBUR1pQRFRsU004VlIvL3hSdkZrUzNUTm1LSkNPOUpHMkJYUGVZM1IzejUrTlhTdTBCb0craEk1aQpwVDVZUWtLZ2ErSi9GT0ZDVlBJRzdVQmVSNTE0Q3dVRGVMamtmci8zOXJFcjRNQmlMTkFyNUR3eVVUUEtGZUlOCnV2K0E4MWg5czBNTmpsck1ad3NibElsOFV2VjFZblpGb0J2c0Z0SThRTGZ3QTlaMzZ6dXRRNzRLR2h3TVBqaUMKMGgzK2xDeG9vcGdmd0JDWGx3d0dBeWZYVTRWMWQ5SFBpdktRQVFHakJDWDM0OWVTcEQxNDNLT21wQ2xmY01LQQp3QzU1bTZsbndCTUFIamlsaVo4RXBuNE8zUlEzSmxsVlpiaXl4RWdrZkE3TG1uNm9Ca3Jwc2VxdDVObThuRVhKCnBFbXhQcUl5Znc1WUNBMEhhNkM5WUhRN1RPRW9BbHBmWld4azAxSnpoVi9aK3FmVHM1YlMwQWNaTzFOVDRaeDgKWlF2eHQ0TDJINVcrK2R6RjhReTlidzQ2M3lKb1dydWxtNy9uQ3YvL1FpNGl0eHRnYyt0N2lwVXZzaUdTVktVWQpPelhCSXNWTUlnd0F6eUtTSEhPL21rMkEwVkgxaHB3emY2L0RzR2wxSjM4TU9pVGo4dEx1RWt3cFY4WGh5MnZwCkd0cXpsT21DS1hodlVDam9iZWlYSWJwSlIzeEM1NmliRjVadk0vQUdONzI5K0xKRFNwbHJtWVJRVHh1UTJWSE8KQWFXQ01SQWFBdUtCVnBxYTRjd25WRy9POEpkN2ZPSi9tMFlIN3FpRlJHREdvdVNOdHZJUUVtaXVkK3dRWjJ6dwpUcmFNVWk0SENtNEFPa0ZNVXBsRmt1ajA2ZHRqM2RIWUtPQkdMK25vaUp4WmJxb3kwUUtDQVFFQTFiZUl6WHh6CnRFRlp2OGRlOXljOWdCUUtNNUNIbHp6NUNMZXVkTitvemxxeDNCMW1PRStxbFkyaEd3RklIWVBJajFLYS83RlkKbExmNFpiUEJRMFhiNUo5VzQzSGIyTnEydXdRQ3ZiSXhVMW9zaGJVWlhZc2FUaE15azc2VzQ5YjU3UC9HdFE3NwpTbkVZTXNrTzRUQndyS3lBdVhDVHRtTk1Qa2J1NFBxT05PeVFQY3o3Yi92VEU1eERjMENMVS9oUXM3NWFHeCs1Citld2VjeEZNa0JKTVo2c2N5TzcySEdSNHZwTHduRXUvcU5uN2JmUElSaUx1T3BwTTdHNlUwQlBPL2todHJ5ZmQKV3U3MHJYZGJSdGRJUHlsQWxSOG9zczJqWWsrRHNPUnNESm9pbkk5WU1Va3dmdHdCNTRQbytGRGtGOHBzV202RQpSaklpenFBK0piWDlTd0tDQVFFQTA4Ly9oM0NabDg2M2xUZHNrU1JKRUZKc0RtdkZkUStzMWtlNUFwMjdnWTBXCmZJbEFGZFlRR3RORUVlTk9xS3EwdTFtS0lqWHFacWNTdU9DNzZIYTE5Tk9waHVoK1dwV0t2Ni9BTWtQSjE5SUIKQ3RqS0lkc2s0U2M3WG02MnNOV1pnQm5XT1Z3QVdzU0VzTHRac1NvWUJUVTJJS1pBOVJOWHhkSEQreGZ2SWJkNApZYngzTzk4WklNQzNlVFFiOW9jVHZab0RNWGdLaHRtTy9iMnlSeEVDSGpGRmxzYlhhc1RPeG5XOWZSVXJtdGVqCk9pdVlXaEZOM2R6dmpuVEdLY0xieWY0MWpHaUVUeFViUHVpei9ZMmk5NldCNVN6MW9zaGorRU1OaFhtRzZSYXUKQUIvelhwNldtSUJ2bDNpU0lzOGJRNkh3Qm1DTjc1R2VVVG1GUUlyaVRRS0NBUUVBbTkzWVN5MXA0VndNRGI5bApObElMRzM4Q0ZhdGlDRjR5cmpYd2FWSzVkWTVWeTFneHRmMzhSa2hkNkNrZUpGQjVsSFhGajVnVEo1dW84TnVSCnB2T3JOT2swNEhxb3dWWjZFSmtUT3JCY0l4TlFCMUFXS05BTHBrZUFDcHJreDFTQlFHVW0wZVFVUjYyRjNYd2YKZXdMdUdqRlJURzJiZlZpY1FZdFFLd3J4YmczZUFRU2ZtSU9MNVBDQmpPdlU4YS9YZzgvZlBZcjlBeFkrK3VMeAorTjB2bGlnSXZVN3lkYkNkRXpodGZVQU5qeU16cVhRemExdU1iWGNkaFEzOVFHaEIvZGhyRG1TL250Tko1YjEzCjk0bUpLbTkycDR0ckRrVEYxU3h5dWk5TjBqOFQ0U1QyU0RPOXg3ZkROOHRQdk5LYUYvUE01SU5YdXk1VGptajIKQ21EWlV3S0NBUUFOUVJYSFh1ZHRsWFR0ZEhOcHZiQ0l3ZStiRTJsZXd1VlkzMUlYZE5GWDhRRTROOHAzMDFaYwpwMTI2Rk5SR1A3QmhqTi9VOWpTOXliU2xOd0xyTUFxQTBJSHFQRUF6NE9tMnh3T3E0WTBPNFVoSmFubHpsdWYrCjR0cVhOU3hmY201UmtzeFIrSXpaSVRVQWJpalZxa0dvaWNUaVZDVDZjUVJzRDQxSStCMXhxYTV4eHo1YTA4SVoKeDVWemt5d3d5QkVYS3owSjZtNFdOQ1Q3Z2RSWEdCeGUwVXgrZStEZEFJWEQ2M2c1RElzVy9HbHRhVzcySytFSQpnaHZIZVUweExjMWRIWGd5V2hQMWN1ZXFqeHM4UVpHeUYzeENZQWJhOGRrM250S0l5S3NGaVBMSWRUZGdjMklQCkZ2SmtzeG5KN2RYUjdKODlkdXRLMDN6cHJrVEZYaXQ5QW9JQkFDcjhkb2ZCcFlFL1JuTlFwbVNET29DRm1sdTkKQlozN3h5K0puZ2FrQ2RSdHFyR1lDdkZMSnI2QnpGdXE0SHpsM0piTkRCM1BkYSs4Z2VNd2cxU1htTEhrRVFrTQpXV2ptNHpmU3hiTUtKamx3REdoeUlwSU9nQ2FQL1hyT2hxTGl4bnJ6UHFHZmM4R0FZTDE2Rm1PeGVqbVk5aERtCmNibkFqZlNwUjF1WEt2S2d6d1NLQ0VWdzc0VjJSRmRqQXBLVDl3bkpOQTZiWHQ5SXFkaS96d3BYbDQ0OVczdVMKNjRjVVpaK3luYnQ5QUlxbFNjMDdNRHl1TUtueExMbDFLeEJYenNxZlVsYWtlRGVoVmdGS05OOTNXQWJJc09ieAp1d1hTd0hXa1B6RGFHeE9wdzlSMHo2S2t2N25YZnBIYW1RWENBZEdsRjkyc1QwYW80Y3FuejFJSmJ2bz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K\"\n                    }\n                },\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"cacert\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZjekNDQTF1Z0F3SUJBZ0lVVnNRZkFaTW4vazNRTU9nc0RuVEdUaU9PbGJ3d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1NURUxNQWtHQTFVRUJoTUNTVlF4RFRBTEJnTlZCQWdNQkVGemRHa3hFVEFQQmdOVkJBb01DRlJsYzNRZwpUR0ZpTVJnd0ZnWURWUVFEREE5MmJTMWliR0Z1YXk1bVppNXNZVzR3SGhjTk1qTXdOakE0TURrMU5EQTRXaGNOCk1qUXdOakEzTURrMU5EQTRXakJKTVFzd0NRWURWUVFHRXdKSlZERU5NQXNHQTFVRUNBd0VRWE4wYVRFUk1BOEcKQTFVRUNnd0lWR1Z6ZENCTVlXSXhHREFXQmdOVkJBTU1EM1p0TFdKc1lXNXJMbVptTG14aGJqQ0NBaUl3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFLMlQwWXpkcjB0dWQzaVJRNGNzaGNhRVJTRzVjTDE2CkhRblhoYWw4emlUL1VRQUNIUGdzZDYwcWlEaldvQTJXb0lGWFFpUHkzOG1vZGtWRlR4Qmt5U2VldndOOFJiLzEKOFhaMS8yS1RnVmRDcHkvNm11WE15bXZYODJad05CVkV3QnoxUk5kbklUSk44cVh3a0d4bHozbDBib1loRkFyUQpNdmkxcW1RaHpDa2Zpb041MVkrYlBXOXpTQlFQdXNrcXJYYzRqTTJ0VENNQ2pTcFlvd1hXM1ppRmc5WEJ1Z09aCjFmdWd1Zmw4K1FJYzNZSEFoL1Z1NloraXFEOGxQeGRKODlBeDZaazVtOGdkVG9JdUhBbUNWaHFpUXBGRjkzSTgKbkYrSnRuYnBaNTRJUTZBbWYrYiswakMxdmY4Kzg0WUppaEVzWExyaGMxZTRTZ2dwdzEvcWpDb21QblhGVjEzUwpsUG5kVlhVR0taa1ZKdXdZTjJyZElmd3YrdCs5MGhwUVBmNmFBTjRCamRxOXdkdkQzSXVnS2JYZG5CQ0FUTEY4ClYyRTFTSE9VZGdRY3duK1d1WDVVOGdPa3B2b2VFN0g1REJ6Rks1WTZ2SHZlaTRlNkp3RTRDK3FJL1BmbTgreTEKNEpsOFBSOW5JQmdGQ3hrZWpwa2tRQ0I5U0dvMVZidzZhWmdZd0VQNHh6YXFYYXV3L3F4c0oxNUkrRTBndEs1OApuWUtkM0hqelk5Slh6V0NVNTdXbmc2SzNvTTIzNXpyRzJnNm1FaHQ4SStDckVMUFNuZURjZU8zVlJkc2dlblBCCis4U1JxVU8vWG9LWHNEU3I5amoxdWluVzYwTG5MZ0Zmc3JQeGlQVlZlMFh1TFZESlhCSlNoRDZDeGRyMnBSOGQKS25SRDZrTFpZZEtMQWdNQkFBR2pVekJSTUIwR0ExVWREZ1FXQkJRUzZnS2pMK3VFc0dXeXVjbTZyb0xVaXpqVwpWREFmQmdOVkhTTUVHREFXZ0JRUzZnS2pMK3VFc0dXeXVjbTZyb0xVaXpqV1ZEQVBCZ05WSFJNQkFmOEVCVEFECkFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUJad3B4Z2Z4N2thZFhvRHNyT1hUVXJ6dEFPMkFQRVJNaTAKaTkyNk9DTGFPbVVYZW1uKytXSUU1K2tUSE0wcS8vbUZCTURzSmdZSFVLUlNvRGNsNmh4TnVFNUNzS2trRVFTSgpMTHZrWlB0S2J5NGlxMitLZ1JtdVZxbXJNVTBYQzZMZDl3WmttL2huUjNtT3V6bko4MGZmV1JDQ0xGWDEwY2EzCnc5TGM1d1JLTFBZZXQvcEs5SitOYWN3TFJRYTczVFovMUpQNW9BU3czVjNoYkxlLy9UeWpnOURqUlZGY3FYWnEKWWs2Mm5qSkhZVzh3WmlhZzc0QXU4dHE5OG5KandBV1ROMFV5L2w1Q2VpWnV5bzZlU0RHVDNJNm1BdGU1VXBvWAppNXBkYlZ6VDdOZC9IOEwwZHZNdVZ2N0FmakZlcU91cUZNNkkzTnlvbStLWENxNmJQdGxBWEkzeVFZc0t4ZlRkCkw3SnRaTmx6MGJ6eHJhcHI4RmpYcjhML1ZkeHQza00xMnJwb2kzL3hsckR6Q2Q2b2YrQ1MxelBocUdpOUhvcUoKZEU5VGhYMklTdkd2akVSYzVVNFRsNjJBNHNyeGJQbUt0eWx3dGNGVEJacUJiRGY3ZjBBc2cveWhndXdTcktsQQpBNkRWVXVCRFErdGpwZ0N0b0ZlOEhLVDJ6UFVlaEQ2ZjVNQkhmU2ZUZ1crTlhFSXNvVDNsampjY1hsYXhPcFJWCkNQNWxCczNmekxyYnBxbUlLaWZhdWlTNWM4TzlSUjhjQTVzeWlBOTBmbmJIdDlmdGxpRG9jcFRzNUtrbjk2NkIKZUxMM1dXVldCYUtvanJzY1RkVXJoalNnVVBmam5FTXpnVzR2eEc3d3BVNHR2ME4yaEtHUWc0bVhhcDV0SU5Pcwp4WktnZXRHUldnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"vm-blank.ff.lan\"\n                    ],\n                    \"resolver\": \"192.168.1.13\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"server_cert\",\n                            \"key\": \"server_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ],\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"mTLS-client-profile\"\n                                    }\n                                ]\n                            }\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/vm-blank.ff.lan_access_log\",\n                        \"error\": \"/var/log/nginx/vm-blank.ff.lan_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://origin_server\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"origin_server\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"mTLS-client-profile\",\n                        \"type\": \"mtls\",\n                        \"mtls\": {\n                            \"enabled\": \"on\",\n                            \"client_certificates\": \"cacert\",\n                            \"trusted_ca_certificates\": \"cacert\",\n                            \"ocsp\": {\n                                \"enabled\": \"on\",\n                                \"responder\": \"http://ocsp.k8s.ie.ff.lan\"\n                            },\n                            \"stapling\": {\n                                \"enabled\": true,\n                                \"verify\": true,\n                                \"responder\": \"http://ocsp.k8s.ie.ff.lan\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NGINX App Protect WAF",
									"item": [
										{
											"name": "Create initial NGINX configuration with NGINX App Protect WAF",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-blocked\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - XSS blocked\",\n                            \"description\": \"This is a production-ready policy - XSS blocked\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-blocked.json\"\n                            }\n                        },\n                        {\n                            \"tag\": \"xss-allowed\",\n                            \"displayName\": \"Production Policy - XSS allowed\",\n                            \"description\": \"This is a production-ready policy - XSS allowed\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-allowed.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"production-policy\",\n                        \"log\": {\n                            \"profile_name\": \"secops_dashboard\",\n                            \"enabled\": true,\n                            \"destination\": \"127.0.0.1:514\"\n                        }\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change active NGINX App Protect policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-allowed\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - XSS blocked\",\n                            \"description\": \"Production-ready policy - XSS blocked\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-blocked.json\"\n                            }\n                        },\n                        {\n                            \"tag\": \"xss-allowed\",\n                            \"displayName\": \"Production Policy - XSS allowed\",\n                            \"description\": \"Production-ready policy - XSS allowed\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/v4.2/nap-policy-xss-allowed.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update TLS certificates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert2.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert2.key\"\n                    }\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Disable NGINX App Protect WAF",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NGINX Javascript",
									"item": [
										{
											"name": "NGINX Javascript test",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Example HTTP server with Javascript\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"njs-test.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/njs-test.nginx.lab_access_log\",\n                        \"error\": \"/var/log/nginx/njs-test.nginx.lab_error_log\"\n                    },\n                    \"njs\": [\n                        {\n                            \"hook\": {\n                                \"type\": \"js_set\",\n                                \"js_set\": {\n                                    \"variable\": \"$serverVarSetByNjs\"\n                                }\n                            },\n                            \"profile\": \"njs_set_variable\",\n                            \"function\": \"njsSetVariable\"\n                        }\n                    ],\n                    \"headers\": {\n                        \"to_server\": {\n                            \"set\": [\n                                {\n                                    \"name\": \"X-Injected-Client-IP\",\n                                    \"value\": \"$remote_addr\"\n                                },\n                                {\n                                    \"name\": \"Host\",\n                                    \"value\": \"echo.free.beeceptor.com\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/echo\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-HTTP-Var-Set-By-Njs\",\n                                            \"value\": \"$httpVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"X-Server-Var-Set-By-Njs\",\n                                            \"value\": \"$serverVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        },\n                        {\n                            \"uri\": \"/generatecontent\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"njs\": [\n                                {\n                                    \"hook\": {\n                                        \"type\": \"js_content\"\n                                    },\n                                    \"profile\": \"njs_set_content\",\n                                    \"function\": \"njsSetContent\"\n                                }\n                            ],\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-HTTP-Var-Set-By-Njs\",\n                                            \"value\": \"$httpVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"X-Server-Var-Set-By-Njs\",\n                                            \"value\": \"$serverVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ],\n            \"njs\": [\n                {\n                    \"hook\": {\n                        \"type\": \"js_set\",\n                        \"js_set\": {\n                            \"variable\": \"$httpVarSetByNjs\"\n                        }\n                    },\n                    \"profile\": \"njs_set_variable\",\n                    \"function\": \"njsSetVariable\"\n                }\n            ],\n            \"njs_profiles\": [\n                {\n                    \"name\": \"njs_set_variable\",\n                    \"file\": {\n                        \"content\": \"ZnVuY3Rpb24gbmpzU2V0VmFyaWFibGUocikgewogICAgcmV0dXJuICJWYXJpYWJsZV9zZXRfYnlfamF2YXNjcmlwdCAtIFVSSSAiK3IudXJpOwp9CgpleHBvcnQgZGVmYXVsdCB7bmpzU2V0VmFyaWFibGV9Cgo=\"\n                    }\n                },\n                {\n                    \"name\": \"njs_set_content\",\n                    \"file\": {\n                        \"content\": \"ZnVuY3Rpb24gbmpzU2V0Q29udGVudChyKSB7CiAgci5yZXR1cm4oMjAwLCAiSGVsbG8gd29ybGQhXG4iKTsKfQoKZXhwb3J0IGRlZmF1bHQge25qc1NldENvbnRlbnR9Cg==\"\n                    }\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Server-side and source of truth authentication",
									"item": [
										{
											"name": "Bearer Token, Basic and HTTP header upstream authentication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v2/www.online-boutique.local.crt\",\n                        \"authentication\": [\n                            {\n                                \"profile\": \"Basic authentication profile\"\n                            }\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v2/www.online-boutique.local.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\",\n                            \"authentication\": {\n                                \"server\": [\n                                    {\n                                        \"profile\": \"Bearer token-based authentication profile\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"server\": [\n                    {\n                        \"name\": \"Bearer token-based authentication profile\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"bearer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Header-based authentication profile\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"header\",\n                            \"location\": \"X-AUTH-TOKEN\"\n                        }\n                    },\n                    {\n                        \"name\": \"Basic authentication profile\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"type\": \"basic\",\n                            \"username\": \"authusername\",\n                            \"password\": \"YXV0aHBhc3N3b3Jk\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "mTLS upstream authentication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v2/www.online-boutique.local.crt\",\n                        \"authentication\": [\n                            {\n                                \"profile\": \"Basic authentication profile\"\n                            }\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v2/www.online-boutique.local.key\"\n                    }\n                },\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"client_cert\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZBakNDQStxZ0F3SUJBZ0lVYXZ1aFhBOWFLVFJlYmZ2Y1BFU2Z0MjBUQXhzd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1ZqRUxNQWtHQTFVRUJoTUNTVVV4RFRBTEJnTlZCQWdNQkVOdmNtc3hEVEFMQmdOVkJBY01CRU52Y21zeApFVEFQQmdOVkJBb01DRUZqYldVZ1RIUmtNUll3RkFZRFZRUUREQTEwWlhOMExtRmpiV1F1YkdGdU1CNFhEVEkwCk1EUXhOVEUzTURnMU0xb1hEVEkxTURReE5URTNNRGcxTTFvd1dERUxNQWtHQTFVRUJoTUNTVVV4RFRBTEJnTlYKQkFnTUJFTnZjbXN4RFRBTEJnTlZCQWNNQkVOdmNtc3hFVEFQQmdOVkJBb01DRUZqYldVZ1RIUmtNUmd3RmdZRApWUVFEREE5amJHbGxiblF1WVdOdFpTNXNZV0l3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLCkFvSUNBUURUQ2kydi8rc08rdTJTcFF5ZVBLM3hnb3RyRUlDZGJYMmN4N0xkcnRDbE82a0xTM3IybWpxV1ptWkQKUWkvL0dIZXhYS3NaelBURDUyN0ZMZlREcExIb2h1MldmeUErQy9HN2JycXlNT0dQZ3lVcEI2NWN2THU4V1BNOApPa3lxVFdma0xkRnF2akFGclU5czMxUnljT3BQSlB0cFloRWlhQXZRWDlwRnhjalM2NUJscUFCMjY1YnlncGs2CmpsV1E5NTVWUzlmZlNLU3hpQTRCQXAzMHV3Rm5YRWtMcGRCenI1TkFKeXJqdXhzbHJGVEs4SGxvRmQ2MndzQUMKRjYrRGZmQ2FNLzVockljRkswSVFheHBpaWUyWllKaVFmNXJMeVd6VG1xMVh1QmsyaEhBWDNvQUY2bW9hcnVNOAo5UlhxQmlaNnFWdGFPQXFEK0pRVGNpYmVzekQ2Z2xoSitGM0VFTEJOWVhETmFLbGprQXRxVWFwYStXZEdVUkU4CnZvczA4TSsvOUlhWTdQeGtQNXB6bDhmaS9RaS9ESW9WLzh0UUlydFBIYzJqSTFSRkZoL3BpeDFsR2lyTlRBK0QKbTlURDJKT0hTU3VmdkRkRnV1YjFwMnF5TW5Nd3FFNklHOGpmTEg2TGNxRGFSbmcveVpVUTBqa01LSFYrd1gwegpkZ1RsMDVVWjZtMFpFNUdlK1FRaG5nY0FUemdrSWp3WlJod1JLOEx1Nmtwb2Vnb0dMUkhkTVNqcUV0NkNWc25BCmFLZ0hTbTJROE9MS1lJdlhVN1RpME9DNm5OdU40RDlKdkxGQXdPMUVFU2tCUXFQeThGby8zRVNZWU1FazJ6RzQKc3I0UXJ4Q2xuY2pwbUMrdkRmdHJuR055SVJvditOeS9zd2FSdkcvcm15ZnhEYVdNL3dJREFRQUJvNEhGTUlIQwpNQWtHQTFVZEV3UUNNQUF3RVFZSllJWklBWWI0UWdFQkJBUURBZ1dnTURNR0NXQ0dTQUdHK0VJQkRRUW1GaVJQCmNHVnVVMU5NSUVkbGJtVnlZWFJsWkNCRGJHbGxiblFnUTJWeWRHbG1hV05oZEdVd0hRWURWUjBPQkJZRUZGQmIKdmltZDYxekxLdlA0U2RZRFRWbndYdFVwTUI4R0ExVWRJd1FZTUJhQUZLY29GRHpMVnc1QXBiMzB5UTM0c25MZQpHQ1FWTUE0R0ExVWREd0VCL3dRRUF3SUY0REFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQWdZSUt3WUJCUVVICkF3UXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSmg0cm9kZEVGemJwWk5kSW5zUmdubWVnWVIxSWlzUUxRU0IKcmNydEZxVmtLb3Rsc09EUXBFMThIRjBsbVA4WE9IU0hqYytYUVF5YlFNd1ViZ2RNbnhBZE1WaGFaMXppWElnaQpiUHgwOEY0YXR5MElJY1hyOVpFVnZTd1pheURBZHErb2s5RGpoRjQwYU5iQmFBTXB2NTRCL2U3OUNMSWZ6REo4CnNZaWw3K09abWlOUTJtZUNreVBYdXdhd3hTeVRnNVhWS3Q4VEtKQVJ5aTFJeWRHWkZRMTJGWFJHTE1BSjdaYngKRzlPd1ZvazExenpWNkRQZHFuZU5ER3BQRU5WZ2VmVjI0ZU1JVXUrYzhnSThYTU1GMU9VVWR3MmlEQmU4Q01TQQppc2h2aDFWYVZPNC96czlma2dLV2FXejNwQWprN3pkbWdaUnpXRUVHR0JMekJoQk5FQTg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"client_key\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRd0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Mwd2dna3BBZ0VBQW9JQ0FRRFRDaTJ2LytzTyt1MlMKcFF5ZVBLM3hnb3RyRUlDZGJYMmN4N0xkcnRDbE82a0xTM3IybWpxV1ptWkRRaS8vR0hleFhLc1p6UFRENTI3RgpMZlREcExIb2h1MldmeUErQy9HN2JycXlNT0dQZ3lVcEI2NWN2THU4V1BNOE9reXFUV2ZrTGRGcXZqQUZyVTlzCjMxUnljT3BQSlB0cFloRWlhQXZRWDlwRnhjalM2NUJscUFCMjY1YnlncGs2amxXUTk1NVZTOWZmU0tTeGlBNEIKQXAzMHV3Rm5YRWtMcGRCenI1TkFKeXJqdXhzbHJGVEs4SGxvRmQ2MndzQUNGNitEZmZDYU0vNWhySWNGSzBJUQpheHBpaWUyWllKaVFmNXJMeVd6VG1xMVh1QmsyaEhBWDNvQUY2bW9hcnVNODlSWHFCaVo2cVZ0YU9BcUQrSlFUCmNpYmVzekQ2Z2xoSitGM0VFTEJOWVhETmFLbGprQXRxVWFwYStXZEdVUkU4dm9zMDhNKy85SWFZN1B4a1A1cHoKbDhmaS9RaS9ESW9WLzh0UUlydFBIYzJqSTFSRkZoL3BpeDFsR2lyTlRBK0RtOVREMkpPSFNTdWZ2RGRGdXViMQpwMnF5TW5Nd3FFNklHOGpmTEg2TGNxRGFSbmcveVpVUTBqa01LSFYrd1gwemRnVGwwNVVaNm0wWkU1R2UrUVFoCm5nY0FUemdrSWp3WlJod1JLOEx1Nmtwb2Vnb0dMUkhkTVNqcUV0NkNWc25BYUtnSFNtMlE4T0xLWUl2WFU3VGkKME9DNm5OdU40RDlKdkxGQXdPMUVFU2tCUXFQeThGby8zRVNZWU1FazJ6RzRzcjRRcnhDbG5janBtQyt2RGZ0cgpuR055SVJvditOeS9zd2FSdkcvcm15ZnhEYVdNL3dJREFRQUJBb0lDQUJzWEZBK2krRmVFbW5rdE9xdHRUL1FsCk5TUlozL05WYjJuRlcyUGRqRHhKcGtUTzV2VS9qYThVd2ZmTVIrdWxCbWhSWkVmOFBweVBMc2J5USszV29iSjAKUk9JQlprVjdYd2ZDWDdEVUJDc0VtS3ZscDlvN3JVQmJqV0w1SmpJNDhYeDI3VFR0NlFMY05uVXhUZDUxanRPagpXYXFJdzNqNU1Oc0tFdDRncWlET2RhQzIvMzJaekZkTHNHNWdnRmRnUElZOUpYUXN3bHk2VnZjdzVpU0RoTnRICkcyYWxYYXdiL2s1Sk9OWTIyY3RDT0kyUnhPUGtPc3lYRkoxYTBRQStGYmxBWExKenVubE5ZNU9iOXEwWTFpa2sKSHpGeXBUcENSdmY2dzY3em00NUYvZVdkS0MzdmpnM29JK29GUS9vMTJUdjhWV3Bhc0ptSmoraUJ5aFRpOGx4YQpMempXaHNrUFZJUGJDYjFDTmIzZHNQSWVWYTVQYmRORGh2bHBQZFV4cXhKRGI4ZUFhemxSQXJVdmtaQnpkTjZtCjVwekljNGtMQnd3Wno5eGg1MzdsQ0tlZ3ZJYmdEMlQvMEM4SVFsWmFIK1M3azlWaVU2Z1RWSGNzU1RsSm52NVYKN3VCMWczVzJZRVloZFJxNlJOUXRZaUFuTktUS2ZYb3d1UUJteWRwVWRYWUljTE5GcER6eHgvRGdQSEhnU0J1dQpQZXVMZzdpemhSSndKMTQ1eW5VTlloQnROVVJaOWlRL1cwWTJOa242UWFBZDNld1pLaVg0S3lZU2k3TTF1MFJWCmFDc1BmZWJrWkRTUnRnQ2Q5N3dGSVYyTVh0UnpXNlpKUUlDWkhHTDVkYkJrNU0xQTI2NnJSYmcvTWZJSE9mdTMKRUZBVjc2aXoyVmNtSDRzblNZUHhBb0lCQVFEc0pNWElhM3ZyRXdRSkh0alRWZE9ONk9rbEExRVN4aWtjSWdSOAo3aFRWQXk3dmtORlpFVUhYczQ1TXlYQzRxTWlvUnFhZHVtOXpQWnFBQ0tQMHRWcXdDMVdOcUFrbDBQc1pZYXcrCmpKNjRDQXA4ZnJ4UDUrOVpWREtiamRWK1ZrK1lrbC9UL0Q1djNFTnZIdkVxN3ZMSE56dE9VSmFWZXNFRERQSW8KaER5SHhjRXQwTHRXTFhoNGNMSDhIQk9Kc0wxYXcxRlhNTk1qdERzazlBMTlJRFlYTHcwaWpIeC81c3hHUGcxSQpmMXRIemhpTlN5NUU5RG9pTmJxVFQvWEEyYVdCdjJ1ZlQybmw2ekticHZHNVo0VGlOUE5ESU5MaUFXOVNNQnJnCkJtaXJFVHU4MnVSa3hnaWZTM01CZ0ZFdXVtaSt2cEhwNzhGaUNOcHpZZUFwTUxjN0FvSUJBUURreVFVT29HVjEKTzZaNXJ4KzhLbVh1S3dmbXNHNmh5cmkrNEw4MzRQakVhbHdkdFhFUmphUG8vSTVhOVFoYjNnLzF5SUdiMzdLSgpPaTFCcGVRZ1owUEVQdFgyRWI0QTNCSTA5SzExWWFybnJGM2d6WS9CVWgveEZoL1YvVEVzTTloZTZ4YlhtRm9WCktvMlY1b2NlNnQzNUJuNHVLL2xkSEJKMHJnUENQdXNKVU9JMEhtUzZkdXNQcHczRFpESkZ5SEU4anptSllwcUsKMnBEMlBBMVZ5aVBBM3MwOU12TWdNSmJXajJLQVBoYk4xQXJnTERaUTFuZ0VwaVFtM3hWdmxIVkMzN0JHM0IzcApWbmtSRE9UZnF1N1BXek40aHZnMDRaNkxBdEZuYzNnMFFxRGcvcXZlS0xuclZwOUJEUlhWb0pZZkNMaVBkajZCCmFiYnFXQ0lYTnMwTkFvSUJBUURFWllrQk9UT2t2UG44UStWOVRzSldJa0hWZ0w2cTZKaEVSNTZIOE5MdW5ta28KNGI3Ylh0anQ5dTRBdXdDKzg5Ris4dE9jRnZTZVdidm5oRWdvTzdTaSthbzcyR2RUUmsyd1BHV3UxL0VoaWI1Kwo4RURhREVJcWZ6WmYzVVNVZ0dCT3VsNXN4anQvZVNlMGdYMStnYUQxUXVCV0wvd3RjaHlZMXVtSC9RTUN3TnY3CnFNQkYyaWQ1cy9Demh2NVE0K2Q0VnoyTlVKUXArN204OENWUHpieHU1N2o2NVBDZXgydFplRDQvNzN3UmFqMU4KTmh2VFNYUVlBNnVhM1VPOUVzYnQ5REFrSFQ0cjlNTHdaWlpnNXRIRCtObmhHS21MUWpvOWxyaWpYWEVyNVhkVAppSkd2cG15Qlg1VFV5TTI4R1ZrSVd5S3I5N1ZVUFp6Qm5jTjdQb01GQW9JQkFDSWRCekFESXAyMFkwSkpwb1c4CkhLN0NvODcyQjhrQUhVUDQ1d3BCOVZYME5nQUlDZkFBR3F5bTIrTWNIajcwZ1pTNGJQcjlBL1lLUXExRE94ekoKeVFUK0NaRkRXLzFzMHhvcVVhTHJDVHk2S3RWV1VWVVdGY1V3ODFaSkJvZjh3d3FFSzBmQ1k4dzhLQmh0NHovcwo3V1F3WDZncXptZmZ3N0M2TWIxSS9HckxNSzlzeU1BMDh4L0dYUHNCZWEyR0VieGg3c1paZVlteXhXS3gyWnN0CkpOK2hXU0VDODlXYzZTRGRDR2J1MngrZHVuRnFwajZ2ZS8zVmVCYUR0UUtLTkdIZ1VMeUFIY1dwS3l3cnJBVGQKeS9ZSE4wbUZkb1VNRDBQVEM3NU5MV005ZkJlUVliZ2lnblpnMkNZdStVNTlQMlVwTzd2SWVkRjZIZGdiaEJuSwpCaEVDZ2dFQkFNZmQ2Zi90RThTQlNFUnd5YW80SThuZkhTZUlMUklvM3pqRE5vWHZ6VHlwbG00a3ovYW9QeEF0CmhPYVNmZU41bFljMXFFUkRxZzRIVGRNTUkyenZPaVFuMHNGTEJFZ0UwT0VIOEZxZVZlZGgycUJucFdXWEhwTW8KREd4TnhpUnVpSDZpOEVMVWFoaU1NQkdQVi9ONjI5MDREbnUyYVVHcHlMTzZxems3SmM5VXlITC90QVNRTFIzagp6NFBhb2xTRE5rNzJSUks0VjIyZUprM2EwYVhjRU5vM1R0OUlTUTliMG5DYVVKbFJsZTA0d2QrOWUyN0FRNUNaCkVWbUtZT1JYcW9VTGNQOEcxRm1VUGhDRkU2aEI3L1hSVWpQdmJFdm5rS05Cdko2UHppT0RMdktRK3I4TzR0WkMKQi9LTDlCdjNmdUkvQlJLeU9WZVU1VnZ5MzUveUFxVT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\",\n                            \"authentication\": {\n                                \"server\": [\n                                    {\n                                        \"profile\": \"mTLS authentication profile\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"server\": [\n                    {\n                        \"name\": \"mTLS authentication profile\",\n                        \"type\": \"mtls\",\n                        \"mtls\": {\n                            \"certificate\": \"client_cert\",\n                            \"key\": \"client_key\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "NGINX One",
							"item": [
								{
									"name": "API Gateway",
									"item": [
										{
											"name": "Ergast API",
											"item": [
												{
													"name": "Ergast API Gateway and DevPortal with redocly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Ergast API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/ergast\",\n                            \"urimatch\": \"prefix\",\n                            \"snippet\": {\n                                \"content\": \"IyBUZXN0IFNOSVBQRVQK\"\n                            },\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"https://raw.githubusercontent.com/adampax/ergast-f1-openapi-doc/e558eea18e176e4f78a8765ac7eccc804b5157ff/ergast-openapi-doc.yaml\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/ergast-devportal.html\"\n                                    }\n                                },\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/ergast-access_log\",\n                                    \"error\": \"/var/log/nginx/ergast-error_log\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ergast API Gateway and DevPortal with backstage",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Ergast API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/ergast\",\n                            \"urimatch\": \"prefix\",\n                            \"snippet\": {\n                                \"content\": \"IyBUZXN0IFNOSVBQRVQK\"\n                            },\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"https://raw.githubusercontent.com/adampax/ergast-f1-openapi-doc/e558eea18e176e4f78a8765ac7eccc804b5157ff/ergast-openapi-doc.yaml\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"backstage\",\n                                    \"backstage\": {\n                                        \"name\": \"petstore-devportal\",\n                                        \"lifecycle\": \"production\",\n                                        \"owner\": \"api-team\",\n                                        \"system\": \"public-api-system\"\n                                    }\n                                },\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/ergast-access_log\",\n                                    \"error\": \"/var/log/nginx/ergast-error_log\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Petstore API",
											"item": [
												{
													"name": "Petstore API Gateway RateLimit",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\",\n                                    \"authentication\": [\n                                        {\n                                            \"profile\": \"Source of truth authentication profile using HTTP header token authentication\"\n                                        }\n                                    ]\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ],\n                \"server\": [\n                    {\n                        \"name\": \"Source of truth authentication profile using bearer token authentication\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"bearer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Source of truth authentication profile using HTTP header token authentication\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"header\",\n                            \"location\": \"X-AUTH-TOKEN\"\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ + redocly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\",\n                        \"http2\": true\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/petstore-devportal.html\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\",\n                                        \"/pet/{petId}/uploadImage\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ],\n                                \"errorcode\": 403\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ +  backstage",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\",\n                        \"http2\": true\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"backstage\",\n                                    \"backstage\": {\n                                        \"name\": \"petstore-devportal\",\n                                        \"lifecycle\": \"production\",\n                                        \"owner\": \"Petstore-API-owner\",\n                                        \"system\": \"Public-facing-API-system\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\",\n                                        \"/pet/{petId}/uploadImage\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ],\n                                \"errorcode\": 403\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Petstore & Ergast API Gateway all in one",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore and Ergast API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"192.168.2.13\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/petstore-devportal.html\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\"\n                                    ]\n                                },\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ],\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/petstore-access_log\",\n                                    \"error\": \"/var/log/nginx/petstore-error_log\"\n                                }\n                            }\n                        },\n                        {\n                            \"uri\": \"/ergast\",\n                            \"urimatch\": \"prefix\",\n                            \"snippet\": {\n                                \"content\": \"IyBUZXN0IFNOSVBQRVQK\"\n                            },\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"https://raw.githubusercontent.com/adampax/ergast-f1-openapi-doc/e558eea18e176e4f78a8765ac7eccc804b5157ff/ergast-openapi-doc.yaml\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/ergast-devportal.html\"\n                                    }\n                                },\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"ergast_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0\n                                    }\n                                ],\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/ergast-access_log\",\n                                    \"error\": \"/var/log/nginx/ergast-error_log\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"ergast_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                },\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CRUD automation",
									"item": [
										{
											"name": "Create initial NGINX configuration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"patched_server.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Housekeeping - common endpoints",
									"item": [
										{
											"name": "Clean NGINX configuration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get declaration status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}/status",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get  declaration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete  declaration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "HTTP Headers Manipulation",
									"item": [
										{
											"name": "Create test echo service",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"resolver\": \"8.8.8.8\",\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Manipulate headers - server level",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"resolver\": \"8.8.8.8\",\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"headers\": {\n                        \"to_server\": {\n                            \"set\": [\n                                {\n                                    \"name\": \"X-Injected-Client-IP\",\n                                    \"value\": \"$remote_addr\"\n                                },\n                                {\n                                    \"name\": \"X-Injected-Echo-Test-Version\",\n                                    \"value\": \"v1\"\n                                },\n                                {\n                                    \"name\": \"Host\",\n                                    \"value\": \"echo.free.beeceptor.com\"\n                                }\n                            ],\n                            \"delete\": [\n                                \"User-Agent\"\n                            ]\n                        },\n                        \"to_client\": {\n                            \"add\": [\n                                {\n                                    \"name\": \"X-Injected-Response-Status\",\n                                    \"value\": \"$status\"\n                                }\n                            ],\n                            \"delete\": [\n                                \"vary\"\n                            ],\n                            \"replace\": [\n                                {\n                                    \"name\": \"Server\",\n                                    \"value\": \"Echo Test Server\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Manipulate headers - location level",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.details.message.configUid] = respData.details.message.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.details.message.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"resolver\": \"8.8.8.8\",\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\",\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-Injected-Echo-Test-Version\",\n                                            \"value\": \"v1\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ],\n                                    \"delete\": [\n                                        \"User-Agent\"\n                                    ]\n                                },\n                                \"to_client\": {\n                                    \"add\": [\n                                        {\n                                            \"name\": \"X-Injected-Response-Status\",\n                                            \"value\": \"$status\"\n                                        }\n                                    ],\n                                    \"delete\": [\n                                        \"vary\"\n                                    ],\n                                    \"replace\": [\n                                        {\n                                            \"name\": \"Server\",\n                                            \"value\": \"Echo Test Server\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "Test using:\n\n`curl -i echo.vm-test.ie.ff.lan`\n\nThe actual FQDN can be modified in the request JSON body"
								},
								{
									"name": "HTTPS server",
									"item": [
										{
											"name": "TLS Offload",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0,\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/v4.2/testcert.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "mTLS Client Authentication",
									"item": [
										{
											"name": "HTTPS server with mTLS, OCSP, SSL Stapling",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"server_cert\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdSRENDQkN5Z0F3SUJBZ0lVTTNJQVZIRmxhSTVsY1d0TjZxOUVhcnlka0w4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1NURUxNQWtHQTFVRUJoTUNTVlF4RFRBTEJnTlZCQWdNQkVGemRHa3hFVEFQQmdOVkJBb01DRlJsYzNRZwpUR0ZpTVJnd0ZnWURWUVFEREE5MmJTMWliR0Z1YXk1bVppNXNZVzR3SGhjTk1qTXdOakE0TVRBd01qTTVXaGNOCk1qUXdOakEzTVRBd01qTTVXakJKTVFzd0NRWURWUVFHRXdKSlZERU5NQXNHQTFVRUNBd0VRWE4wYVRFUk1BOEcKQTFVRUNnd0lWR1Z6ZENCTVlXSXhHREFXQmdOVkJBTU1EM1p0TFdKc1lXNXJMbVptTG14aGJqQ0NBaUl3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFMRFQ2bnZleVZlNi9VZlk2aUtHVC9oV1A0cktDSGR0ClloZWU3RGVZR29QWGhGVjB6a3grVWExanBEZ21WUE1kVEJBdnoxODg5NzlEcHBqdmNYeFhsRmpnaUhjWDhpWVgKSXovSUVMc3dKRUNITWNsNkxmelA5eDVUY1gxTEdFblFOTWhHRzA2MjlxU2NCQmQyUUNiWlY0UWE1TkxlQnQ4cQpHQ2lXY3JiQnR3YlpiSGo1dk9aenJrdHBtRFBGS1V4bXR5b2dBQnNaTllnL0F3Y1l2RXdBOEQ0QTN0VEgxcGhvCkdYY3ZvZWpJelhRMUdmYys5azR3OFhHYWFQOGd2bTdOMXN2MnU2Yld4SHRGZHpWQk9udzJyaHUvWGYyY0N0dW4KUnIxSENKQXRRSDlkbDhzZks1czBSRlVuTlVYbFBiNTFBTjBjVFVGbEYrZlVUVmVON3dNMTdmeVZVY3IydTltSwo0UGdoWjkvMml0ZUpZV3hjK3k4V2NEQzBUV3hwZ2paVEw5Tk1GK2t6SXV2TjJOWFFybjcvSU5UQTMvNFlmWGRPCloxelpTdTlkclRMcG5DZHRpOWxuRHBKODd3bW41cVZSTlZiTlZRbldEeW5yZnoyTU1DY21jLzcvdkJFN2dDemQKNFJLWHJLdHloenlQSitycmh3NmpxYVA4QytaZGRvKzkvak9QVDFTSnUxZ21VbzFuZ2hBMWh2N0M5RUYrM2xQVApYSk5WV3dtYkdWK0p4cUdKSjJSa2toMlIrZTVIREdRY2hGWjJIcXBGTGVQN0trTHJBR2RkZFZQWEZhQ0RiU0R6ClJQd0I5WFlhakg5Zm5QWEtFT3ZpVEJhQVNjWUZwTXB5cm02UkxHUGRSVnE2RUNYVlB4MDdHdGFCaEVvVWIwK2YKVkZnNExtQkx4MldQQWdNQkFBR2pnZ0VpTUlJQkhqQUpCZ05WSFJNRUFqQUFNQkVHQ1dDR1NBR0crRUlCQVFRRQpBd0lHUURBekJnbGdoa2dCaHZoQ0FRMEVKaFlrVDNCbGJsTlRUQ0JIWlc1bGNtRjBaV1FnVTJWeWRtVnlJRU5sCmNuUnBabWxqWVhSbE1CMEdBMVVkRGdRV0JCVHZFZWJGK1JDV0JhcGVPWUdpQ0YyVHZxbExYekNCaEFZRFZSMGoKQkgwd2U0QVVFdW9Db3kvcmhMQmxzcm5KdXE2QzFJczQxbFNoVGFSTE1Fa3hDekFKQmdOVkJBWVRBa2xVTVEwdwpDd1lEVlFRSURBUkJjM1JwTVJFd0R3WURWUVFLREFoVVpYTjBJRXhoWWpFWU1CWUdBMVVFQXd3UGRtMHRZbXhoCmJtc3VabVl1YkdGdWdoUld4QjhCa3lmK1RkQXc2Q3dPZE1aT0k0NlZ2REFPQmdOVkhROEJBZjhFQkFNQ0JhQXcKRXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFHUDR6ZkdseTI1RwpneTBSeC9SSTNpNzJDVlIrSXY3SW5WTUVGWDZqRHRNV3hSblFtRGZsMWtTOVF1Y3hNb0tnOE9URStMcnlzdGJsClF4WGZiakZQekNoNHB1UGtGTmNBeG1mVmR4b20xR1lodWpoYTBQOUswUURZSDZycGlUaFdSQ2greUovQm1qZ2wKTlJabks4WGRqME85Ui9XKzJrTFRac2VFbS9hZHFVQ3dkYzNBWWlNWGh4QXkvQlh3bFRQeDMyMHZCcXYxZGFyVgp5ZlVoRlM1Rkg3enV2bGtGQ1p6M3lpOGYvYXMwbkRTUkFrY3dPRFQvN1diQlN4QTk3ZzJmRk1EMEI3WlUvbndGCmU4VnRzNDl3YmZ6QWJRMk40RUc2OEVhODE1VlFRM2N6YWthdjBCdkxHL2UwT0habGxYcUVhV1ZlWFJtSWFFOHcKWko5OEhUaDJMbUlFV2Jpdm94Kyt2UXd3bVhKTm1DRFVXNnVmcHdBOVdKQ0VhYmhxeXdGVzh1dFVENzRTVXE3SApEUDhNamtJZ0o3ekl2Tkd1RkFsSzd6c2xpV2pzeUN1OGVNamhvN2pVRFhGR1R0R0ZMUGtVa08vSysrSGVVRFg0Cm1OWDJ2aHI3NGRqRkNBTTEvOTYxWnB5NUFYUzZkd2g3MFlJL2dMdldSL0J1ejBnNEp6YUI2UFo4M1ErYm9QVHYKM1ZIS2xOWjlKQlhRTmtSc3N6U0dYWG5MYmtOTmNwVFg2cnAyZ1pUSS9NNDhGTnBxanAxOXRpQVg3bWN0cTl2SgpNejhvemhEcHZmSTlnMjFsNFZlRGdpbWEwTDVBc1pQbFdIQlZjcy9yL3dMU2YzWFVYZEs0UHpCQUdIRFBidXYrCnpKOVNqS0NFVll2bHRhMHlUUVBCSFJPa2Y2MG1sVmh6Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"server_key\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBc05QcWU5N0pWN3I5UjlqcUlvWlArRlkvaXNvSWQyMWlGNTdzTjVnYWc5ZUVWWFRPClRINVJyV09rT0NaVTh4MU1FQy9QWHp6M3YwT21tTzl4ZkZlVVdPQ0lkeGZ5SmhjalA4Z1F1ekFrUUljeHlYb3QKL00vM0hsTnhmVXNZU2RBMHlFWWJUcmIycEp3RUYzWkFKdGxYaEJyazB0NEczeW9ZS0paeXRzRzNCdGxzZVBtOAo1bk91UzJtWU04VXBUR2EzS2lBQUd4azFpRDhEQnhpOFRBRHdQZ0RlMU1mV21HZ1pkeStoNk1qTmREVVo5ejcyClRqRHhjWnBvL3lDK2JzM1d5L2E3cHRiRWUwVjNOVUU2ZkRhdUc3OWQvWndLMjZkR3ZVY0lrQzFBZjEyWHl4OHIKbXpSRVZTYzFSZVU5dm5VQTNSeE5RV1VYNTlSTlY0M3ZBelh0L0pWUnl2YTcyWXJnK0NGbjMvYUsxNGxoYkZ6NwpMeFp3TUxSTmJHbUNObE12MDB3WDZUTWk2ODNZMWRDdWZ2OGcxTURmL2hoOWQwNW5YTmxLNzEydE11bWNKMjJMCjJXY09rbnp2Q2FmbXBWRTFWczFWQ2RZUEtldC9QWXd3Snlaei92KzhFVHVBTE4zaEVwZXNxM0tIUEk4bjZ1dUgKRHFPcG8vd0w1bDEyajczK000OVBWSW03V0NaU2pXZUNFRFdHL3NMMFFYN2VVOU5jazFWYkNac1pYNG5Hb1lrbgpaR1NTSFpINTdrY01aQnlFVm5ZZXFrVXQ0L3NxUXVzQVoxMTFVOWNWb0lOdElQTkUvQUgxZGhxTWYxK2M5Y29RCjYrSk1Gb0JKeGdXa3luS3VicEVzWTkxRldyb1FKZFUvSFRzYTFvR0VTaFJ2VDU5VVdEZ3VZRXZIWlk4Q0F3RUEKQVFLQ0FnQVBUR1pQRFRsU004VlIvL3hSdkZrUzNUTm1LSkNPOUpHMkJYUGVZM1IzejUrTlhTdTBCb0craEk1aQpwVDVZUWtLZ2ErSi9GT0ZDVlBJRzdVQmVSNTE0Q3dVRGVMamtmci8zOXJFcjRNQmlMTkFyNUR3eVVUUEtGZUlOCnV2K0E4MWg5czBNTmpsck1ad3NibElsOFV2VjFZblpGb0J2c0Z0SThRTGZ3QTlaMzZ6dXRRNzRLR2h3TVBqaUMKMGgzK2xDeG9vcGdmd0JDWGx3d0dBeWZYVTRWMWQ5SFBpdktRQVFHakJDWDM0OWVTcEQxNDNLT21wQ2xmY01LQQp3QzU1bTZsbndCTUFIamlsaVo4RXBuNE8zUlEzSmxsVlpiaXl4RWdrZkE3TG1uNm9Ca3Jwc2VxdDVObThuRVhKCnBFbXhQcUl5Znc1WUNBMEhhNkM5WUhRN1RPRW9BbHBmWld4azAxSnpoVi9aK3FmVHM1YlMwQWNaTzFOVDRaeDgKWlF2eHQ0TDJINVcrK2R6RjhReTlidzQ2M3lKb1dydWxtNy9uQ3YvL1FpNGl0eHRnYyt0N2lwVXZzaUdTVktVWQpPelhCSXNWTUlnd0F6eUtTSEhPL21rMkEwVkgxaHB3emY2L0RzR2wxSjM4TU9pVGo4dEx1RWt3cFY4WGh5MnZwCkd0cXpsT21DS1hodlVDam9iZWlYSWJwSlIzeEM1NmliRjVadk0vQUdONzI5K0xKRFNwbHJtWVJRVHh1UTJWSE8KQWFXQ01SQWFBdUtCVnBxYTRjd25WRy9POEpkN2ZPSi9tMFlIN3FpRlJHREdvdVNOdHZJUUVtaXVkK3dRWjJ6dwpUcmFNVWk0SENtNEFPa0ZNVXBsRmt1ajA2ZHRqM2RIWUtPQkdMK25vaUp4WmJxb3kwUUtDQVFFQTFiZUl6WHh6CnRFRlp2OGRlOXljOWdCUUtNNUNIbHp6NUNMZXVkTitvemxxeDNCMW1PRStxbFkyaEd3RklIWVBJajFLYS83RlkKbExmNFpiUEJRMFhiNUo5VzQzSGIyTnEydXdRQ3ZiSXhVMW9zaGJVWlhZc2FUaE15azc2VzQ5YjU3UC9HdFE3NwpTbkVZTXNrTzRUQndyS3lBdVhDVHRtTk1Qa2J1NFBxT05PeVFQY3o3Yi92VEU1eERjMENMVS9oUXM3NWFHeCs1Citld2VjeEZNa0JKTVo2c2N5TzcySEdSNHZwTHduRXUvcU5uN2JmUElSaUx1T3BwTTdHNlUwQlBPL2todHJ5ZmQKV3U3MHJYZGJSdGRJUHlsQWxSOG9zczJqWWsrRHNPUnNESm9pbkk5WU1Va3dmdHdCNTRQbytGRGtGOHBzV202RQpSaklpenFBK0piWDlTd0tDQVFFQTA4Ly9oM0NabDg2M2xUZHNrU1JKRUZKc0RtdkZkUStzMWtlNUFwMjdnWTBXCmZJbEFGZFlRR3RORUVlTk9xS3EwdTFtS0lqWHFacWNTdU9DNzZIYTE5Tk9waHVoK1dwV0t2Ni9BTWtQSjE5SUIKQ3RqS0lkc2s0U2M3WG02MnNOV1pnQm5XT1Z3QVdzU0VzTHRac1NvWUJUVTJJS1pBOVJOWHhkSEQreGZ2SWJkNApZYngzTzk4WklNQzNlVFFiOW9jVHZab0RNWGdLaHRtTy9iMnlSeEVDSGpGRmxzYlhhc1RPeG5XOWZSVXJtdGVqCk9pdVlXaEZOM2R6dmpuVEdLY0xieWY0MWpHaUVUeFViUHVpei9ZMmk5NldCNVN6MW9zaGorRU1OaFhtRzZSYXUKQUIvelhwNldtSUJ2bDNpU0lzOGJRNkh3Qm1DTjc1R2VVVG1GUUlyaVRRS0NBUUVBbTkzWVN5MXA0VndNRGI5bApObElMRzM4Q0ZhdGlDRjR5cmpYd2FWSzVkWTVWeTFneHRmMzhSa2hkNkNrZUpGQjVsSFhGajVnVEo1dW84TnVSCnB2T3JOT2swNEhxb3dWWjZFSmtUT3JCY0l4TlFCMUFXS05BTHBrZUFDcHJreDFTQlFHVW0wZVFVUjYyRjNYd2YKZXdMdUdqRlJURzJiZlZpY1FZdFFLd3J4YmczZUFRU2ZtSU9MNVBDQmpPdlU4YS9YZzgvZlBZcjlBeFkrK3VMeAorTjB2bGlnSXZVN3lkYkNkRXpodGZVQU5qeU16cVhRemExdU1iWGNkaFEzOVFHaEIvZGhyRG1TL250Tko1YjEzCjk0bUpLbTkycDR0ckRrVEYxU3h5dWk5TjBqOFQ0U1QyU0RPOXg3ZkROOHRQdk5LYUYvUE01SU5YdXk1VGptajIKQ21EWlV3S0NBUUFOUVJYSFh1ZHRsWFR0ZEhOcHZiQ0l3ZStiRTJsZXd1VlkzMUlYZE5GWDhRRTROOHAzMDFaYwpwMTI2Rk5SR1A3QmhqTi9VOWpTOXliU2xOd0xyTUFxQTBJSHFQRUF6NE9tMnh3T3E0WTBPNFVoSmFubHpsdWYrCjR0cVhOU3hmY201UmtzeFIrSXpaSVRVQWJpalZxa0dvaWNUaVZDVDZjUVJzRDQxSStCMXhxYTV4eHo1YTA4SVoKeDVWemt5d3d5QkVYS3owSjZtNFdOQ1Q3Z2RSWEdCeGUwVXgrZStEZEFJWEQ2M2c1RElzVy9HbHRhVzcySytFSQpnaHZIZVUweExjMWRIWGd5V2hQMWN1ZXFqeHM4UVpHeUYzeENZQWJhOGRrM250S0l5S3NGaVBMSWRUZGdjMklQCkZ2SmtzeG5KN2RYUjdKODlkdXRLMDN6cHJrVEZYaXQ5QW9JQkFDcjhkb2ZCcFlFL1JuTlFwbVNET29DRm1sdTkKQlozN3h5K0puZ2FrQ2RSdHFyR1lDdkZMSnI2QnpGdXE0SHpsM0piTkRCM1BkYSs4Z2VNd2cxU1htTEhrRVFrTQpXV2ptNHpmU3hiTUtKamx3REdoeUlwSU9nQ2FQL1hyT2hxTGl4bnJ6UHFHZmM4R0FZTDE2Rm1PeGVqbVk5aERtCmNibkFqZlNwUjF1WEt2S2d6d1NLQ0VWdzc0VjJSRmRqQXBLVDl3bkpOQTZiWHQ5SXFkaS96d3BYbDQ0OVczdVMKNjRjVVpaK3luYnQ5QUlxbFNjMDdNRHl1TUtueExMbDFLeEJYenNxZlVsYWtlRGVoVmdGS05OOTNXQWJJc09ieAp1d1hTd0hXa1B6RGFHeE9wdzlSMHo2S2t2N25YZnBIYW1RWENBZEdsRjkyc1QwYW80Y3FuejFJSmJ2bz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K\"\n                    }\n                },\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"cacert\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZjekNDQTF1Z0F3SUJBZ0lVVnNRZkFaTW4vazNRTU9nc0RuVEdUaU9PbGJ3d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1NURUxNQWtHQTFVRUJoTUNTVlF4RFRBTEJnTlZCQWdNQkVGemRHa3hFVEFQQmdOVkJBb01DRlJsYzNRZwpUR0ZpTVJnd0ZnWURWUVFEREE5MmJTMWliR0Z1YXk1bVppNXNZVzR3SGhjTk1qTXdOakE0TURrMU5EQTRXaGNOCk1qUXdOakEzTURrMU5EQTRXakJKTVFzd0NRWURWUVFHRXdKSlZERU5NQXNHQTFVRUNBd0VRWE4wYVRFUk1BOEcKQTFVRUNnd0lWR1Z6ZENCTVlXSXhHREFXQmdOVkJBTU1EM1p0TFdKc1lXNXJMbVptTG14aGJqQ0NBaUl3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFLMlQwWXpkcjB0dWQzaVJRNGNzaGNhRVJTRzVjTDE2CkhRblhoYWw4emlUL1VRQUNIUGdzZDYwcWlEaldvQTJXb0lGWFFpUHkzOG1vZGtWRlR4Qmt5U2VldndOOFJiLzEKOFhaMS8yS1RnVmRDcHkvNm11WE15bXZYODJad05CVkV3QnoxUk5kbklUSk44cVh3a0d4bHozbDBib1loRkFyUQpNdmkxcW1RaHpDa2Zpb041MVkrYlBXOXpTQlFQdXNrcXJYYzRqTTJ0VENNQ2pTcFlvd1hXM1ppRmc5WEJ1Z09aCjFmdWd1Zmw4K1FJYzNZSEFoL1Z1NloraXFEOGxQeGRKODlBeDZaazVtOGdkVG9JdUhBbUNWaHFpUXBGRjkzSTgKbkYrSnRuYnBaNTRJUTZBbWYrYiswakMxdmY4Kzg0WUppaEVzWExyaGMxZTRTZ2dwdzEvcWpDb21QblhGVjEzUwpsUG5kVlhVR0taa1ZKdXdZTjJyZElmd3YrdCs5MGhwUVBmNmFBTjRCamRxOXdkdkQzSXVnS2JYZG5CQ0FUTEY4ClYyRTFTSE9VZGdRY3duK1d1WDVVOGdPa3B2b2VFN0g1REJ6Rks1WTZ2SHZlaTRlNkp3RTRDK3FJL1BmbTgreTEKNEpsOFBSOW5JQmdGQ3hrZWpwa2tRQ0I5U0dvMVZidzZhWmdZd0VQNHh6YXFYYXV3L3F4c0oxNUkrRTBndEs1OApuWUtkM0hqelk5Slh6V0NVNTdXbmc2SzNvTTIzNXpyRzJnNm1FaHQ4SStDckVMUFNuZURjZU8zVlJkc2dlblBCCis4U1JxVU8vWG9LWHNEU3I5amoxdWluVzYwTG5MZ0Zmc3JQeGlQVlZlMFh1TFZESlhCSlNoRDZDeGRyMnBSOGQKS25SRDZrTFpZZEtMQWdNQkFBR2pVekJSTUIwR0ExVWREZ1FXQkJRUzZnS2pMK3VFc0dXeXVjbTZyb0xVaXpqVwpWREFmQmdOVkhTTUVHREFXZ0JRUzZnS2pMK3VFc0dXeXVjbTZyb0xVaXpqV1ZEQVBCZ05WSFJNQkFmOEVCVEFECkFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUJad3B4Z2Z4N2thZFhvRHNyT1hUVXJ6dEFPMkFQRVJNaTAKaTkyNk9DTGFPbVVYZW1uKytXSUU1K2tUSE0wcS8vbUZCTURzSmdZSFVLUlNvRGNsNmh4TnVFNUNzS2trRVFTSgpMTHZrWlB0S2J5NGlxMitLZ1JtdVZxbXJNVTBYQzZMZDl3WmttL2huUjNtT3V6bko4MGZmV1JDQ0xGWDEwY2EzCnc5TGM1d1JLTFBZZXQvcEs5SitOYWN3TFJRYTczVFovMUpQNW9BU3czVjNoYkxlLy9UeWpnOURqUlZGY3FYWnEKWWs2Mm5qSkhZVzh3WmlhZzc0QXU4dHE5OG5KandBV1ROMFV5L2w1Q2VpWnV5bzZlU0RHVDNJNm1BdGU1VXBvWAppNXBkYlZ6VDdOZC9IOEwwZHZNdVZ2N0FmakZlcU91cUZNNkkzTnlvbStLWENxNmJQdGxBWEkzeVFZc0t4ZlRkCkw3SnRaTmx6MGJ6eHJhcHI4RmpYcjhML1ZkeHQza00xMnJwb2kzL3hsckR6Q2Q2b2YrQ1MxelBocUdpOUhvcUoKZEU5VGhYMklTdkd2akVSYzVVNFRsNjJBNHNyeGJQbUt0eWx3dGNGVEJacUJiRGY3ZjBBc2cveWhndXdTcktsQQpBNkRWVXVCRFErdGpwZ0N0b0ZlOEhLVDJ6UFVlaEQ2ZjVNQkhmU2ZUZ1crTlhFSXNvVDNsampjY1hsYXhPcFJWCkNQNWxCczNmekxyYnBxbUlLaWZhdWlTNWM4TzlSUjhjQTVzeWlBOTBmbmJIdDlmdGxpRG9jcFRzNUtrbjk2NkIKZUxMM1dXVldCYUtvanJzY1RkVXJoalNnVVBmam5FTXpnVzR2eEc3d3BVNHR2ME4yaEtHUWc0bVhhcDV0SU5Pcwp4WktnZXRHUldnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"vm-blank.ff.lan\"\n                    ],\n                    \"resolver\": \"192.168.1.13\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"server_cert\",\n                            \"key\": \"server_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ],\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"mTLS-client-profile\"\n                                    }\n                                ]\n                            }\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/vm-blank.ff.lan_access_log\",\n                        \"error\": \"/var/log/nginx/vm-blank.ff.lan_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://origin_server\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"origin_server\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"mTLS-client-profile\",\n                        \"type\": \"mtls\",\n                        \"mtls\": {\n                            \"enabled\": \"on\",\n                            \"client_certificates\": \"cacert\",\n                            \"trusted_ca_certificates\": \"cacert\",\n                            \"ocsp\": {\n                                \"enabled\": \"on\",\n                                \"responder\": \"http://ocsp.k8s.ie.ff.lan\"\n                            },\n                            \"stapling\": {\n                                \"enabled\": true,\n                                \"verify\": true,\n                                \"responder\": \"http://ocsp.k8s.ie.ff.lan\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NGINX Javascript",
									"item": [
										{
											"name": "NGINX Javascript test",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"cluster\": \"{{nginxone_clustername}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Example HTTP server with Javascript\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"njs-test.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/njs-test.nginx.lab_access_log\",\n                        \"error\": \"/var/log/nginx/njs-test.nginx.lab_error_log\"\n                    },\n                    \"njs\": [\n                        {\n                            \"hook\": {\n                                \"type\": \"js_set\",\n                                \"js_set\": {\n                                    \"variable\": \"$serverVarSetByNjs\"\n                                }\n                            },\n                            \"profile\": \"njs_set_variable\",\n                            \"function\": \"njsSetVariable\"\n                        }\n                    ],\n                    \"headers\": {\n                        \"to_server\": {\n                            \"set\": [\n                                {\n                                    \"name\": \"X-Injected-Client-IP\",\n                                    \"value\": \"$remote_addr\"\n                                },\n                                {\n                                    \"name\": \"Host\",\n                                    \"value\": \"echo.free.beeceptor.com\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/echo\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-HTTP-Var-Set-By-Njs\",\n                                            \"value\": \"$httpVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"X-Server-Var-Set-By-Njs\",\n                                            \"value\": \"$serverVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        },\n                        {\n                            \"uri\": \"/generatecontent\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"njs\": [\n                                {\n                                    \"hook\": {\n                                        \"type\": \"js_content\"\n                                    },\n                                    \"profile\": \"njs_set_content\",\n                                    \"function\": \"njsSetContent\"\n                                }\n                            ],\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-HTTP-Var-Set-By-Njs\",\n                                            \"value\": \"$httpVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"X-Server-Var-Set-By-Njs\",\n                                            \"value\": \"$serverVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ],\n            \"njs\": [\n                {\n                    \"hook\": {\n                        \"type\": \"js_set\",\n                        \"js_set\": {\n                            \"variable\": \"$httpVarSetByNjs\"\n                        }\n                    },\n                    \"profile\": \"njs_set_variable\",\n                    \"function\": \"njsSetVariable\"\n                }\n            ],\n            \"njs_profiles\": [\n                {\n                    \"name\": \"njs_set_variable\",\n                    \"file\": {\n                        \"content\": \"ZnVuY3Rpb24gbmpzU2V0VmFyaWFibGUocikgewogICAgcmV0dXJuICJWYXJpYWJsZV9zZXRfYnlfamF2YXNjcmlwdCAtIFVSSSAiK3IudXJpOwp9CgpleHBvcnQgZGVmYXVsdCB7bmpzU2V0VmFyaWFibGV9Cgo=\"\n                    }\n                },\n                {\n                    \"name\": \"njs_set_content\",\n                    \"file\": {\n                        \"content\": \"ZnVuY3Rpb24gbmpzU2V0Q29udGVudChyKSB7CiAgci5yZXR1cm4oMjAwLCAiSGVsbG8gd29ybGQhXG4iKTsKfQoKZXhwb3J0IGRlZmF1bHQge25qc1NldENvbnRlbnR9Cg==\"\n                    }\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			],
			"description": "[https://github.com/f5devcentral/NGINX-Declarative-API/blob/main/USAGE-v5.0.md](https://github.com/f5devcentral/NGINX-Declarative-API/blob/main/USAGE-v4.2.md)"
		},
		{
			"name": "v5.1",
			"item": [
				{
					"name": "Configuration generation",
					"item": [
						{
							"name": "Basic - LB",
							"item": [
								{
									"name": "Basic - LB - plaintext output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"plaintext\"\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample L4 service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"udp\"\n                    },\n                    \"upstream\": \"l4_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"A sample HTTP service\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Basic - LB - json b64 encoded output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"json\"\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample L4 service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"udp\"\n                    },\n                    \"upstream\": \"l4_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"A sample HTTP service\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Basic - LB - ConfigMap output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"configmap\",\n        \"configmap\": {\n            \"name\": \"nginx.test\",\n            \"filename\": \"testservice.conf\",\n            \"namespace\": \"test-namespace\"\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample L4 service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"udp\"\n                    },\n                    \"upstream\": \"l4_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"A sample HTTP service\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Basic - LB - HTTP output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"http\",\n        \"http\": {\n            \"url\": \"http://192.168.2.19:8080/path/service\"\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample L4 service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"udp\"\n                    },\n                    \"upstream\": \"l4_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"A sample HTTP service\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Advanced",
							"item": [
								{
									"name": "Advanced LB - plaintext output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"plaintext\"\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample_layer4_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\",\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"upstream\": \"l4_upstream\",\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgbDQgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/test\",\n                            \"urimatch\": \"exact\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true,\n                                \"uri\": \"/healthcheck\",\n                                \"interval\": 5,\n                                \"fails\": 3,\n                                \"passes\": 2\n                            },\n                            \"rate_limit\": {\n                                \"profile\": \"test_ratelimit\",\n                                \"httpcode\": 429,\n                                \"burst\": 10,\n                                \"delay\": 3\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"test_policy\",\n                                \"log\": {\n                                    \"profile_name\": \"log_illegal\",\n                                    \"enabled\": true,\n                                    \"destination\": \"192.168.1.5:514\"\n                                }\n                            },\n                            \"snippet\": {\n                                \"content\": \"IyBUaGlzIGlzIGEgbG9jYXRpb24gc25pcHBldCBjb21tZW50Cg==\"\n                            }\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"test_policy\",\n                        \"log\": {\n                            \"profile_name\": \"log_blocked\",\n                            \"enabled\": true,\n                            \"destination\": \"192.168.1.5:514\"\n                        }\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgc2VydmVyIHNuaXBwZXQgY29tbWVudAo=\"\n                    }\n                },\n                {\n                    \"name\": \"another HTTP test application\",\n                    \"names\": [\n                        \"server_443\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\",\n                            \"backup\": true\n                        }\n                    ],\n                    \"sticky\": {\n                        \"cookie\": \"cookie_name\",\n                        \"expires\": \"1h\",\n                        \"domain\": \".testserver\",\n                        \"path\": \"/\"\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"test_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                }\n            ],\n            \"maps\": [\n                {\n                    \"match\": \"$host$request_uri\",\n                    \"variable\": \"$backend\",\n                    \"entries\": [\n                        {\n                            \"key\": \"www.test.lab/app1/\",\n                            \"keymatch\": \"iregex\",\n                            \"value\": \"upstream_1\"\n                        },\n                        {\n                            \"key\": \"(.*).test.lab/app2/\",\n                            \"keymatch\": \"regex\",\n                            \"value\": \"upstream_2\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": true,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"snippet\": {\n                \"content\": \"IyBUaGlzIGlzIGEgSFRUUCBzbmlwcGV0IGNvbW1lbnQK\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Advanced LB - json b64 encoded output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"json\"\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample_layer4_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\",\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"upstream\": \"l4_upstream\",\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgbDQgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/test\",\n                            \"urimatch\": \"exact\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true,\n                                \"uri\": \"/healthcheck\",\n                                \"interval\": 5,\n                                \"fails\": 3,\n                                \"passes\": 2\n                            },\n                            \"rate_limit\": {\n                                \"profile\": \"test_ratelimit\",\n                                \"httpcode\": 429,\n                                \"burst\": 10,\n                                \"delay\": 3\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"test_policy\",\n                                \"log\": {\n                                    \"profile_name\": \"log_illegal\",\n                                    \"enabled\": true,\n                                    \"destination\": \"192.168.1.5:514\"\n                                }\n                            },\n                            \"snippet\": {\n                                \"content\": \"IyBUaGlzIGlzIGEgbG9jYXRpb24gc25pcHBldCBjb21tZW50Cg==\"\n                            }\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"test_policy\",\n                        \"log\": {\n                            \"profile_name\": \"log_blocked\",\n                            \"enabled\": true,\n                            \"destination\": \"192.168.1.5:514\"\n                        }\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgc2VydmVyIHNuaXBwZXQgY29tbWVudAo=\"\n                    }\n                },\n                {\n                    \"name\": \"another HTTP test application\",\n                    \"names\": [\n                        \"server_443\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\",\n                            \"backup\": true\n                        }\n                    ],\n                    \"sticky\": {\n                        \"cookie\": \"cookie_name\",\n                        \"expires\": \"1h\",\n                        \"domain\": \".testserver\",\n                        \"path\": \"/\"\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"test_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                }\n            ],\n            \"maps\": [\n                {\n                    \"match\": \"$host$request_uri\",\n                    \"variable\": \"$backend\",\n                    \"entries\": [\n                        {\n                            \"key\": \"www.test.lab/app1/\",\n                            \"keymatch\": \"iregex\",\n                            \"value\": \"upstream_1\"\n                        },\n                        {\n                            \"key\": \"(.*).test.lab/app2/\",\n                            \"keymatch\": \"regex\",\n                            \"value\": \"upstream_2\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": true,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"snippet\": {\n                \"content\": \"IyBUaGlzIGlzIGEgSFRUUCBzbmlwcGV0IGNvbW1lbnQK\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Advanced LB - ConfigMap output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"configmap\",\n        \"configmap\": {\n            \"name\": \"nginx.test\",\n            \"filename\": \"testservice.conf\",\n            \"namespace\": \"test-namespace\"\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample_layer4_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\",\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"upstream\": \"l4_upstream\",\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgbDQgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/test\",\n                            \"urimatch\": \"exact\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true,\n                                \"uri\": \"/healthcheck\",\n                                \"interval\": 5,\n                                \"fails\": 3,\n                                \"passes\": 2\n                            },\n                            \"rate_limit\": {\n                                \"profile\": \"test_ratelimit\",\n                                \"httpcode\": 429,\n                                \"burst\": 10,\n                                \"delay\": 3\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"test_policy\",\n                                \"log\": {\n                                    \"profile_name\": \"log_illegal\",\n                                    \"enabled\": true,\n                                    \"destination\": \"192.168.1.5:514\"\n                                }\n                            },\n                            \"snippet\": {\n                                \"content\": \"IyBUaGlzIGlzIGEgbG9jYXRpb24gc25pcHBldCBjb21tZW50Cg==\"\n                            }\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"test_policy\",\n                        \"log\": {\n                            \"profile_name\": \"log_blocked\",\n                            \"enabled\": true,\n                            \"destination\": \"192.168.1.5:514\"\n                        }\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgc2VydmVyIHNuaXBwZXQgY29tbWVudAo=\"\n                    }\n                },\n                {\n                    \"name\": \"another HTTP test application\",\n                    \"names\": [\n                        \"server_443\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\",\n                            \"backup\": true\n                        }\n                    ],\n                    \"sticky\": {\n                        \"cookie\": \"cookie_name\",\n                        \"expires\": \"1h\",\n                        \"domain\": \".testserver\",\n                        \"path\": \"/\"\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"test_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                }\n            ],\n            \"maps\": [\n                {\n                    \"match\": \"$host$request_uri\",\n                    \"variable\": \"$backend\",\n                    \"entries\": [\n                        {\n                            \"key\": \"www.test.lab/app1/\",\n                            \"keymatch\": \"iregex\",\n                            \"value\": \"upstream_1\"\n                        },\n                        {\n                            \"key\": \"(.*).test.lab/app2/\",\n                            \"keymatch\": \"regex\",\n                            \"value\": \"upstream_2\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": true,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"snippet\": {\n                \"content\": \"IyBUaGlzIGlzIGEgSFRUUCBzbmlwcGV0IGNvbW1lbnQK\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Advanced LB - HTTP output",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"type\": \"http\",\n        \"http\": {\n            \"url\": \"http://192.168.1.19:8080/path/service\"\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"sample_layer4_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\",\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"upstream\": \"l4_upstream\",\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgbDQgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"l4_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"server_8080.nginx.lab\",\n                        \"server_8081.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/test\",\n                            \"urimatch\": \"exact\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"health_check\": {\n                                \"enabled\": true,\n                                \"uri\": \"/healthcheck\",\n                                \"interval\": 5,\n                                \"fails\": 3,\n                                \"passes\": 2\n                            },\n                            \"rate_limit\": {\n                                \"profile\": \"test_ratelimit\",\n                                \"httpcode\": 429,\n                                \"burst\": 10,\n                                \"delay\": 3\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"test_policy\",\n                                \"log\": {\n                                    \"profile_name\": \"log_illegal\",\n                                    \"enabled\": true,\n                                    \"destination\": \"192.168.1.5:514\"\n                                }\n                            },\n                            \"snippet\": {\n                                \"content\": \"IyBUaGlzIGlzIGEgbG9jYXRpb24gc25pcHBldCBjb21tZW50Cg==\"\n                            }\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"test_policy\",\n                        \"log\": {\n                            \"profile_name\": \"log_blocked\",\n                            \"enabled\": true,\n                            \"destination\": \"192.168.1.5:514\"\n                        }\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgc2VydmVyIHNuaXBwZXQgY29tbWVudAo=\"\n                    }\n                },\n                {\n                    \"name\": \"another HTTP test application\",\n                    \"names\": [\n                        \"server_443\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\",\n                            \"backup\": true\n                        }\n                    ],\n                    \"sticky\": {\n                        \"cookie\": \"cookie_name\",\n                        \"expires\": \"1h\",\n                        \"domain\": \".testserver\",\n                        \"path\": \"/\"\n                    },\n                    \"snippet\": {\n                        \"content\": \"IyBUaGlzIGlzIGEgdXBzdHJlYW0gc25pcHBldCBjb21tZW50Cg==\"\n                    }\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"test_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                }\n            ],\n            \"maps\": [\n                {\n                    \"match\": \"$host$request_uri\",\n                    \"variable\": \"$backend\",\n                    \"entries\": [\n                        {\n                            \"key\": \"www.test.lab/app1/\",\n                            \"keymatch\": \"iregex\",\n                            \"value\": \"upstream_1\"\n                        },\n                        {\n                            \"key\": \"(.*).test.lab/app2/\",\n                            \"keymatch\": \"regex\",\n                            \"value\": \"upstream_2\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": true,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"snippet\": {\n                \"content\": \"IyBUaGlzIGlzIGEgSFRUUCBzbmlwcGV0IGNvbW1lbnQK\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
											"protocol": "http",
											"host": [
												"{{ncg_host}}"
											],
											"port": "{{ncg_port}}",
											"path": [
												"{{ngc_api_version}}",
												"config"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Declarative automation examples",
					"item": [
						{
							"name": "NGINX Instance Manager",
							"item": [
								{
									"name": "API Gateway",
									"item": [
										{
											"name": "Ergast API",
											"item": [
												{
													"name": "Ergast API Gateway and DevPortal with redocly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Ergast API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"Google\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/ergast\",\n                            \"urimatch\": \"prefix\",\n                            \"snippet\": {\n                                \"content\": \"IyBUZXN0IFNOSVBQRVQK\"\n                            },\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"https://raw.githubusercontent.com/adampax/ergast-f1-openapi-doc/e558eea18e176e4f78a8765ac7eccc804b5157ff/ergast-openapi-doc.yaml\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/ergast-devportal.html\"\n                                    }\n                                },\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/ergast-access_log\",\n                                    \"error\": \"/var/log/nginx/ergast-error_log\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"resolvers\": [\n                {\n                    \"name\": \"Google\",\n                    \"address\": \"8.8.8.8\",\n                    \"ipv4\": true,\n                    \"ipv6\": false,\n                    \"timeout\": \"30s\"\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ergast API Gateway and DevPortal with backstage",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Ergast API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"Google\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/ergast\",\n                            \"urimatch\": \"prefix\",\n                            \"snippet\": {\n                                \"content\": \"IyBUZXN0IFNOSVBQRVQK\"\n                            },\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"https://raw.githubusercontent.com/adampax/ergast-f1-openapi-doc/e558eea18e176e4f78a8765ac7eccc804b5157ff/ergast-openapi-doc.yaml\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"backstage\",\n                                    \"backstage\": {\n                                        \"name\": \"petstore-devportal\",\n                                        \"lifecycle\": \"production\",\n                                        \"owner\": \"api-team\",\n                                        \"system\": \"public-api-system\"\n                                    }\n                                },\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/ergast-access_log\",\n                                    \"error\": \"/var/log/nginx/ergast-error_log\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            },\n            \"resolvers\": [\n                {\n                    \"name\": \"Google\",\n                    \"address\": \"8.8.8.8\",\n                    \"ipv4\": true,\n                    \"ipv6\": false,\n                    \"timeout\": \"30s\"\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Petstore API",
											"item": [
												{
													"name": "Petstore API Gateway RateLimit",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"Google\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        },\n        \"resolvers\": [\n            {\n                \"name\": \"Google\",\n                \"address\": \"8.8.8.8\",\n                \"ipv4\": true,\n                \"ipv6\": false,\n                \"timeout\": \"30s\"\n            }\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"Google\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\",\n                                    \"authentication\": [\n                                        {\n                                            \"profile\": \"Source of truth authentication profile using HTTP header token authentication\"\n                                        }\n                                    ]\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ],\n                \"server\": [\n                    {\n                        \"name\": \"Source of truth authentication profile using bearer token authentication\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"bearer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Source of truth authentication profile using HTTP header token authentication\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"header\",\n                            \"location\": \"X-AUTH-TOKEN\"\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        },\n        \"resolvers\": [\n            {\n                \"name\": \"Google\",\n                \"address\": \"8.8.8.8\",\n                \"ipv4\": true,\n                \"ipv6\": false,\n                \"timeout\": \"30s\"\n            }\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ + redocly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"Google\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/petstore-devportal.html\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\",\n                                        \"/pet/{petId}/uploadImage\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ],\n                                \"errorcode\": 403\n                            }\n                        ]\n                    }\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        },\n        \"resolvers\": [\n            {\n                \"name\": \"Google\",\n                \"address\": \"8.8.8.8\",\n                \"ipv4\": true,\n                \"ipv6\": false,\n                \"timeout\": \"30s\"\n            }\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ +  backstage",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"Google\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"backstage\",\n                                    \"backstage\": {\n                                        \"name\": \"petstore-devportal\",\n                                        \"lifecycle\": \"production\",\n                                        \"owner\": \"Petstore-API-owner\",\n                                        \"system\": \"Public-facing-API-system\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\",\n                                        \"/pet/{petId}/uploadImage\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ],\n                                \"errorcode\": 403\n                            }\n                        ]\n                    }\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        },\n        \"resolvers\": [\n            {\n                \"name\": \"Google\",\n                \"address\": \"8.8.8.8\",\n                \"ipv4\": true,\n                \"ipv6\": false,\n                \"timeout\": \"30s\"\n            }\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ + WAF + redocly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-blocked\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - XSS blocked\",\n                            \"description\": \"This is a production-ready policy - XSS blocked\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/nap-policy-xss-blocked-bot-allowed.json\"\n                            }\n                        },\n                        {\n                            \"tag\": \"xss-allowed\",\n                            \"displayName\": \"Production Policy - XSS allowed\",\n                            \"description\": \"This is a production-ready policy - XSS allowed\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/nap-policy-xss-allowed.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"Google\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/petstore-devportal.html\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\",\n                                        \"/pet/{petId}/uploadImage\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"production-policy\",\n                                \"log\": {\n                                    \"profile_name\": \"secops_dashboard\",\n                                    \"enabled\": true,\n                                    \"destination\": \"127.0.0.1:514\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ],\n                                \"errorcode\": 403\n                            }\n                        ]\n                    }\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        },\n        \"resolvers\": [\n            {\n                \"name\": \"Google\",\n                \"address\": \"8.8.8.8\",\n                \"ipv4\": true,\n                \"ipv6\": false,\n                \"timeout\": \"30s\"\n            }\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ + WAF + backstage",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-blocked\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - XSS blocked\",\n                            \"description\": \"This is a production-ready policy - XSS blocked\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/nap-policy-xss-blocked-bot-allowed.json\"\n                            }\n                        },\n                        {\n                            \"tag\": \"xss-allowed\",\n                            \"displayName\": \"Production Policy - XSS allowed\",\n                            \"description\": \"This is a production-ready policy - XSS allowed\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/nap-policy-xss-allowed.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"Google\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"backstage\",\n                                    \"backstage\": {\n                                        \"name\": \"petstore-devportal\",\n                                        \"lifecycle\": \"production\",\n                                        \"owner\": \"Petstore-API-owner\",\n                                        \"system\": \"Public-facing-API-system\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\",\n                                        \"/pet/{petId}/uploadImage\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            },\n                            \"app_protect\": {\n                                \"enabled\": true,\n                                \"policy\": \"production-policy\",\n                                \"log\": {\n                                    \"profile_name\": \"secops_dashboard\",\n                                    \"enabled\": true,\n                                    \"destination\": \"127.0.0.1:514\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ],\n                                \"errorcode\": 403\n                            }\n                        ]\n                    }\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        },\n        \"resolvers\": [\n            {\n                \"name\": \"Google\",\n                \"address\": \"8.8.8.8\",\n                \"ipv4\": true,\n                \"ipv6\": false,\n                \"timeout\": \"30s\"\n            }\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "CRUD automation",
									"item": [
										{
											"name": "Create initial NGINX configuration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"patched_server.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update HTTP upstream",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.3:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.4:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.5:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify and add HTTP upstream",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"test_upstream_added\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.1:80\"\n                        },\n                        {\n                            \"server\": \"192.168.1.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify and add HTTP server and upstream",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"patched_server_v2.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_v2_log\",\n                        \"error\": \"/var/log/nginx/error_v2_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream_added\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream_added\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.100:80\",\n                            \"weight\": 5,\n                            \"max_fails\": 2,\n                            \"fail_timeout\": \"30s\",\n                            \"max_conns\": 3,\n                            \"slow_start\": \"30s\"\n                        },\n                        {\n                            \"server\": \"192.168.1.101:80\"\n                        },\n                        {\n                            \"server\": \"192.168.1.102:80\"\n                        },\n                        {\n                            \"server\": \"192.168.1.103:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove HTTP server and upstream",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream_added\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify Stream server and upstream",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"TCP_10053_service\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"tcp\"\n                    },\n                    \"upstream\": \"TCP_10053_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"TCP_10053_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.3:53\"\n                        },\n                        {\n                            \"server\": \"10.0.0.4:53\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add stream server and upstream",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"TCP_15432_service\",\n                    \"listen\": {\n                        \"address\": \"15432\",\n                        \"protocol\": \"tcp\"\n                    },\n                    \"upstream\": \"TCP_15432_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"TCP_15432_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"172.16.10.1:5432\"\n                        },\n                        {\n                            \"server\": \"172.16.10.1:5432\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove stream server and upstream #1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"TCP_10053_service\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"TCP_10053_upstream\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove stream server and upstream #2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"TCP_15432_service\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"TCP_15432_upstream\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GitOps autosync",
									"item": [
										{
											"name": "NGINX Plus and GitOps",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 5,\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "NGINX App Protect WAF and GitOps",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 5,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"gitops\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"gitops\",\n                            \"displayName\": \"Production Policy - GitOps\",\n                            \"description\": \"This is a production-ready policy - Managed by GitOps\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/nap-policy-gitops.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"production-policy\",\n                        \"log\": {\n                            \"profile_name\": \"secops_dashboard\",\n                            \"enabled\": true,\n                            \"destination\": \"127.0.0.1:514\"\n                        }\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get declaration status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}/status",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get  declaration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete  declaration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Housekeeping - common endpoints",
									"item": [
										{
											"name": "Clean NGINX configuration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get declaration status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}/status",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete  declaration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get  declaration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "HTTP Headers Manipulation",
									"item": [
										{
											"name": "Create test echo service",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ],\n                    \"resolver\": \"Google\"\n                }\n            ]\n        },\n        \"resolvers\": [\n            {\n                \"name\": \"Google\",\n                \"address\": \"8.8.8.8\",\n                \"ipv4\": true,\n                \"ipv6\": false,\n                \"timeout\": \"30s\"\n            }\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Manipulate headers - server level",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"headers\": {\n                        \"to_server\": {\n                            \"set\": [\n                                {\n                                    \"name\": \"X-Injected-Client-IP\",\n                                    \"value\": \"$remote_addr\"\n                                },\n                                {\n                                    \"name\": \"X-Injected-Echo-Test-Version\",\n                                    \"value\": \"v1\"\n                                },\n                                {\n                                    \"name\": \"Host\",\n                                    \"value\": \"echo.free.beeceptor.com\"\n                                }\n                            ],\n                            \"delete\": [\n                                \"User-Agent\"\n                            ]\n                        },\n                        \"to_client\": {\n                            \"add\": [\n                                {\n                                    \"name\": \"X-Injected-Response-Status\",\n                                    \"value\": \"$status\"\n                                }\n                            ],\n                            \"delete\": [\n                                \"vary\"\n                            ],\n                            \"replace\": [\n                                {\n                                    \"name\": \"Server\",\n                                    \"value\": \"Echo Test Server\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ],\n                    \"resolver\": \"Google\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Manipulate headers - location level",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\",\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-Injected-Echo-Test-Version\",\n                                            \"value\": \"v1\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ],\n                                    \"delete\": [\n                                        \"User-Agent\"\n                                    ]\n                                },\n                                \"to_client\": {\n                                    \"add\": [\n                                        {\n                                            \"name\": \"X-Injected-Response-Status\",\n                                            \"value\": \"$status\"\n                                        }\n                                    ],\n                                    \"delete\": [\n                                        \"vary\"\n                                    ],\n                                    \"replace\": [\n                                        {\n                                            \"name\": \"Server\",\n                                            \"value\": \"Echo Test Server\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ],\n                    \"resolver\": \"Google\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "Test using:\n\n`curl -i echo.vm-test.ie.ff.lan`\n\nThe actual FQDN can be modified in the request JSON body"
								},
								{
									"name": "HTTPS server",
									"item": [
										{
											"name": "TLS Offload",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "TLS Offload and NGINX App Protect",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-blocked\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - GitOps\",\n                            \"description\": \"This is a production-ready policy - Managed by GitOps\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/nap-policy-xss-blocked.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"production-policy\",\n                        \"log\": {\n                            \"profile_name\": \"secops_dashboard\",\n                            \"enabled\": true,\n                            \"destination\": \"127.0.0.1:514\"\n                        }\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "JWT Client Authentication",
									"item": [
										{
											"name": "JWT Client Authentication - local JWT key and Bearer token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test service\",\n                    \"resolver\": \"Google\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/test.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"JWT Auth with hardwired key and Bearer token\"\n                                    }\n                                ]\n                            },\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"JWT Auth with hardwired key and Bearer token\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\"\n                        }\n                    },\n                    {\n                        \"name\": \"JWT Auth with external key and Bearer token\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Authentication GitOps\",\n                            \"key\": \"http://192.168.2.5:20080/jwks.json\",\n                            \"cachetime\": 5\n                        }\n                    },\n                    {\n                        \"name\": \"JWT Auth with hardwired key and token in auth_token query string parameter\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"token_location\": \"$arg_auth_token\"\n                        }\n                    },\n                    {\n                        \"name\": \"JWT Auth with hardwired key and token in X-Auth-Token HTTP header\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"token_location\": \"$http_x_auth_token\"\n                        }\n                    }\n                ]\n            },\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        },\n        \"resolvers\": [\n            {\n                \"name\": \"Google\",\n                \"address\": \"8.8.8.8\",\n                \"ipv4\": true,\n                \"ipv6\": false,\n                \"timeout\": \"30s\"\n            }\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "JWT secret fetched from URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test service\",\n                    \"resolver\": \"Google\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/test.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"JWT Auth with external key and Bearer token\"\n                                    }\n                                ]\n                            },\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "JWT token in auth_token query string parameter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test service\",\n                    \"resolver\": \"Google\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/test.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"JWT Auth with hardwired key and token in auth_token query string parameter\"\n                                    }\n                                ]\n                            },\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "JWT token in HTTP X-Auth-Token header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test service\",\n                    \"resolver\": \"Google\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/test.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"JWT Auth with hardwired key and token in X-Auth-Token HTTP header\"\n                                    }\n                                ]\n                            },\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "JWT Client Authentication and Authorization",
									"item": [
										{
											"name": "JWT Client Authentication and Authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"JWT AuthN and AuthZ test server\",\n                    \"resolver\": \"Google\",\n                    \"names\": [\n                        \"test.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/auth-test.nginx.lab_access_log\",\n                        \"error\": \"/var/log/nginx/auth-test.nginx.lab_error_log\"\n                    },\n                    \"headers\": {\n                        \"to_client\": {\n                            \"add\": [\n                                {\n                                    \"name\": \"X-Injected-JWT-Group\",\n                                    \"value\": \"$jwt_claim_roles\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            },\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"jwt_authentication_local\"\n                                    }\n                                ]\n                            },\n                            \"authorization\": {\n                                \"profile\": \"jwt role based authorization\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"jwt_authentication_local\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"JWT Client Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"jwt_type\": \"signed\"\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"jwt role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        },\n        \"resolvers\": [\n            {\n                \"name\": \"Google\",\n                \"address\": \"8.8.8.8\",\n                \"ipv4\": true,\n                \"ipv6\": false,\n                \"timeout\": \"30s\"\n            }\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "mTLS Client Authentication",
									"item": [
										{
											"name": "HTTPS server with mTLS, OCSP, SSL Stapling",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"server_cert\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdSRENDQkN5Z0F3SUJBZ0lVTTNJQVZIRmxhSTVsY1d0TjZxOUVhcnlka0w4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1NURUxNQWtHQTFVRUJoTUNTVlF4RFRBTEJnTlZCQWdNQkVGemRHa3hFVEFQQmdOVkJBb01DRlJsYzNRZwpUR0ZpTVJnd0ZnWURWUVFEREE5MmJTMWliR0Z1YXk1bVppNXNZVzR3SGhjTk1qTXdOakE0TVRBd01qTTVXaGNOCk1qUXdOakEzTVRBd01qTTVXakJKTVFzd0NRWURWUVFHRXdKSlZERU5NQXNHQTFVRUNBd0VRWE4wYVRFUk1BOEcKQTFVRUNnd0lWR1Z6ZENCTVlXSXhHREFXQmdOVkJBTU1EM1p0TFdKc1lXNXJMbVptTG14aGJqQ0NBaUl3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFMRFQ2bnZleVZlNi9VZlk2aUtHVC9oV1A0cktDSGR0ClloZWU3RGVZR29QWGhGVjB6a3grVWExanBEZ21WUE1kVEJBdnoxODg5NzlEcHBqdmNYeFhsRmpnaUhjWDhpWVgKSXovSUVMc3dKRUNITWNsNkxmelA5eDVUY1gxTEdFblFOTWhHRzA2MjlxU2NCQmQyUUNiWlY0UWE1TkxlQnQ4cQpHQ2lXY3JiQnR3YlpiSGo1dk9aenJrdHBtRFBGS1V4bXR5b2dBQnNaTllnL0F3Y1l2RXdBOEQ0QTN0VEgxcGhvCkdYY3ZvZWpJelhRMUdmYys5azR3OFhHYWFQOGd2bTdOMXN2MnU2Yld4SHRGZHpWQk9udzJyaHUvWGYyY0N0dW4KUnIxSENKQXRRSDlkbDhzZks1czBSRlVuTlVYbFBiNTFBTjBjVFVGbEYrZlVUVmVON3dNMTdmeVZVY3IydTltSwo0UGdoWjkvMml0ZUpZV3hjK3k4V2NEQzBUV3hwZ2paVEw5Tk1GK2t6SXV2TjJOWFFybjcvSU5UQTMvNFlmWGRPCloxelpTdTlkclRMcG5DZHRpOWxuRHBKODd3bW41cVZSTlZiTlZRbldEeW5yZnoyTU1DY21jLzcvdkJFN2dDemQKNFJLWHJLdHloenlQSitycmh3NmpxYVA4QytaZGRvKzkvak9QVDFTSnUxZ21VbzFuZ2hBMWh2N0M5RUYrM2xQVApYSk5WV3dtYkdWK0p4cUdKSjJSa2toMlIrZTVIREdRY2hGWjJIcXBGTGVQN0trTHJBR2RkZFZQWEZhQ0RiU0R6ClJQd0I5WFlhakg5Zm5QWEtFT3ZpVEJhQVNjWUZwTXB5cm02UkxHUGRSVnE2RUNYVlB4MDdHdGFCaEVvVWIwK2YKVkZnNExtQkx4MldQQWdNQkFBR2pnZ0VpTUlJQkhqQUpCZ05WSFJNRUFqQUFNQkVHQ1dDR1NBR0crRUlCQVFRRQpBd0lHUURBekJnbGdoa2dCaHZoQ0FRMEVKaFlrVDNCbGJsTlRUQ0JIWlc1bGNtRjBaV1FnVTJWeWRtVnlJRU5sCmNuUnBabWxqWVhSbE1CMEdBMVVkRGdRV0JCVHZFZWJGK1JDV0JhcGVPWUdpQ0YyVHZxbExYekNCaEFZRFZSMGoKQkgwd2U0QVVFdW9Db3kvcmhMQmxzcm5KdXE2QzFJczQxbFNoVGFSTE1Fa3hDekFKQmdOVkJBWVRBa2xVTVEwdwpDd1lEVlFRSURBUkJjM1JwTVJFd0R3WURWUVFLREFoVVpYTjBJRXhoWWpFWU1CWUdBMVVFQXd3UGRtMHRZbXhoCmJtc3VabVl1YkdGdWdoUld4QjhCa3lmK1RkQXc2Q3dPZE1aT0k0NlZ2REFPQmdOVkhROEJBZjhFQkFNQ0JhQXcKRXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFHUDR6ZkdseTI1RwpneTBSeC9SSTNpNzJDVlIrSXY3SW5WTUVGWDZqRHRNV3hSblFtRGZsMWtTOVF1Y3hNb0tnOE9URStMcnlzdGJsClF4WGZiakZQekNoNHB1UGtGTmNBeG1mVmR4b20xR1lodWpoYTBQOUswUURZSDZycGlUaFdSQ2greUovQm1qZ2wKTlJabks4WGRqME85Ui9XKzJrTFRac2VFbS9hZHFVQ3dkYzNBWWlNWGh4QXkvQlh3bFRQeDMyMHZCcXYxZGFyVgp5ZlVoRlM1Rkg3enV2bGtGQ1p6M3lpOGYvYXMwbkRTUkFrY3dPRFQvN1diQlN4QTk3ZzJmRk1EMEI3WlUvbndGCmU4VnRzNDl3YmZ6QWJRMk40RUc2OEVhODE1VlFRM2N6YWthdjBCdkxHL2UwT0habGxYcUVhV1ZlWFJtSWFFOHcKWko5OEhUaDJMbUlFV2Jpdm94Kyt2UXd3bVhKTm1DRFVXNnVmcHdBOVdKQ0VhYmhxeXdGVzh1dFVENzRTVXE3SApEUDhNamtJZ0o3ekl2Tkd1RkFsSzd6c2xpV2pzeUN1OGVNamhvN2pVRFhGR1R0R0ZMUGtVa08vSysrSGVVRFg0Cm1OWDJ2aHI3NGRqRkNBTTEvOTYxWnB5NUFYUzZkd2g3MFlJL2dMdldSL0J1ejBnNEp6YUI2UFo4M1ErYm9QVHYKM1ZIS2xOWjlKQlhRTmtSc3N6U0dYWG5MYmtOTmNwVFg2cnAyZ1pUSS9NNDhGTnBxanAxOXRpQVg3bWN0cTl2SgpNejhvemhEcHZmSTlnMjFsNFZlRGdpbWEwTDVBc1pQbFdIQlZjcy9yL3dMU2YzWFVYZEs0UHpCQUdIRFBidXYrCnpKOVNqS0NFVll2bHRhMHlUUVBCSFJPa2Y2MG1sVmh6Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"server_key\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBc05QcWU5N0pWN3I5UjlqcUlvWlArRlkvaXNvSWQyMWlGNTdzTjVnYWc5ZUVWWFRPClRINVJyV09rT0NaVTh4MU1FQy9QWHp6M3YwT21tTzl4ZkZlVVdPQ0lkeGZ5SmhjalA4Z1F1ekFrUUljeHlYb3QKL00vM0hsTnhmVXNZU2RBMHlFWWJUcmIycEp3RUYzWkFKdGxYaEJyazB0NEczeW9ZS0paeXRzRzNCdGxzZVBtOAo1bk91UzJtWU04VXBUR2EzS2lBQUd4azFpRDhEQnhpOFRBRHdQZ0RlMU1mV21HZ1pkeStoNk1qTmREVVo5ejcyClRqRHhjWnBvL3lDK2JzM1d5L2E3cHRiRWUwVjNOVUU2ZkRhdUc3OWQvWndLMjZkR3ZVY0lrQzFBZjEyWHl4OHIKbXpSRVZTYzFSZVU5dm5VQTNSeE5RV1VYNTlSTlY0M3ZBelh0L0pWUnl2YTcyWXJnK0NGbjMvYUsxNGxoYkZ6NwpMeFp3TUxSTmJHbUNObE12MDB3WDZUTWk2ODNZMWRDdWZ2OGcxTURmL2hoOWQwNW5YTmxLNzEydE11bWNKMjJMCjJXY09rbnp2Q2FmbXBWRTFWczFWQ2RZUEtldC9QWXd3Snlaei92KzhFVHVBTE4zaEVwZXNxM0tIUEk4bjZ1dUgKRHFPcG8vd0w1bDEyajczK000OVBWSW03V0NaU2pXZUNFRFdHL3NMMFFYN2VVOU5jazFWYkNac1pYNG5Hb1lrbgpaR1NTSFpINTdrY01aQnlFVm5ZZXFrVXQ0L3NxUXVzQVoxMTFVOWNWb0lOdElQTkUvQUgxZGhxTWYxK2M5Y29RCjYrSk1Gb0JKeGdXa3luS3VicEVzWTkxRldyb1FKZFUvSFRzYTFvR0VTaFJ2VDU5VVdEZ3VZRXZIWlk4Q0F3RUEKQVFLQ0FnQVBUR1pQRFRsU004VlIvL3hSdkZrUzNUTm1LSkNPOUpHMkJYUGVZM1IzejUrTlhTdTBCb0craEk1aQpwVDVZUWtLZ2ErSi9GT0ZDVlBJRzdVQmVSNTE0Q3dVRGVMamtmci8zOXJFcjRNQmlMTkFyNUR3eVVUUEtGZUlOCnV2K0E4MWg5czBNTmpsck1ad3NibElsOFV2VjFZblpGb0J2c0Z0SThRTGZ3QTlaMzZ6dXRRNzRLR2h3TVBqaUMKMGgzK2xDeG9vcGdmd0JDWGx3d0dBeWZYVTRWMWQ5SFBpdktRQVFHakJDWDM0OWVTcEQxNDNLT21wQ2xmY01LQQp3QzU1bTZsbndCTUFIamlsaVo4RXBuNE8zUlEzSmxsVlpiaXl4RWdrZkE3TG1uNm9Ca3Jwc2VxdDVObThuRVhKCnBFbXhQcUl5Znc1WUNBMEhhNkM5WUhRN1RPRW9BbHBmWld4azAxSnpoVi9aK3FmVHM1YlMwQWNaTzFOVDRaeDgKWlF2eHQ0TDJINVcrK2R6RjhReTlidzQ2M3lKb1dydWxtNy9uQ3YvL1FpNGl0eHRnYyt0N2lwVXZzaUdTVktVWQpPelhCSXNWTUlnd0F6eUtTSEhPL21rMkEwVkgxaHB3emY2L0RzR2wxSjM4TU9pVGo4dEx1RWt3cFY4WGh5MnZwCkd0cXpsT21DS1hodlVDam9iZWlYSWJwSlIzeEM1NmliRjVadk0vQUdONzI5K0xKRFNwbHJtWVJRVHh1UTJWSE8KQWFXQ01SQWFBdUtCVnBxYTRjd25WRy9POEpkN2ZPSi9tMFlIN3FpRlJHREdvdVNOdHZJUUVtaXVkK3dRWjJ6dwpUcmFNVWk0SENtNEFPa0ZNVXBsRmt1ajA2ZHRqM2RIWUtPQkdMK25vaUp4WmJxb3kwUUtDQVFFQTFiZUl6WHh6CnRFRlp2OGRlOXljOWdCUUtNNUNIbHp6NUNMZXVkTitvemxxeDNCMW1PRStxbFkyaEd3RklIWVBJajFLYS83RlkKbExmNFpiUEJRMFhiNUo5VzQzSGIyTnEydXdRQ3ZiSXhVMW9zaGJVWlhZc2FUaE15azc2VzQ5YjU3UC9HdFE3NwpTbkVZTXNrTzRUQndyS3lBdVhDVHRtTk1Qa2J1NFBxT05PeVFQY3o3Yi92VEU1eERjMENMVS9oUXM3NWFHeCs1Citld2VjeEZNa0JKTVo2c2N5TzcySEdSNHZwTHduRXUvcU5uN2JmUElSaUx1T3BwTTdHNlUwQlBPL2todHJ5ZmQKV3U3MHJYZGJSdGRJUHlsQWxSOG9zczJqWWsrRHNPUnNESm9pbkk5WU1Va3dmdHdCNTRQbytGRGtGOHBzV202RQpSaklpenFBK0piWDlTd0tDQVFFQTA4Ly9oM0NabDg2M2xUZHNrU1JKRUZKc0RtdkZkUStzMWtlNUFwMjdnWTBXCmZJbEFGZFlRR3RORUVlTk9xS3EwdTFtS0lqWHFacWNTdU9DNzZIYTE5Tk9waHVoK1dwV0t2Ni9BTWtQSjE5SUIKQ3RqS0lkc2s0U2M3WG02MnNOV1pnQm5XT1Z3QVdzU0VzTHRac1NvWUJUVTJJS1pBOVJOWHhkSEQreGZ2SWJkNApZYngzTzk4WklNQzNlVFFiOW9jVHZab0RNWGdLaHRtTy9iMnlSeEVDSGpGRmxzYlhhc1RPeG5XOWZSVXJtdGVqCk9pdVlXaEZOM2R6dmpuVEdLY0xieWY0MWpHaUVUeFViUHVpei9ZMmk5NldCNVN6MW9zaGorRU1OaFhtRzZSYXUKQUIvelhwNldtSUJ2bDNpU0lzOGJRNkh3Qm1DTjc1R2VVVG1GUUlyaVRRS0NBUUVBbTkzWVN5MXA0VndNRGI5bApObElMRzM4Q0ZhdGlDRjR5cmpYd2FWSzVkWTVWeTFneHRmMzhSa2hkNkNrZUpGQjVsSFhGajVnVEo1dW84TnVSCnB2T3JOT2swNEhxb3dWWjZFSmtUT3JCY0l4TlFCMUFXS05BTHBrZUFDcHJreDFTQlFHVW0wZVFVUjYyRjNYd2YKZXdMdUdqRlJURzJiZlZpY1FZdFFLd3J4YmczZUFRU2ZtSU9MNVBDQmpPdlU4YS9YZzgvZlBZcjlBeFkrK3VMeAorTjB2bGlnSXZVN3lkYkNkRXpodGZVQU5qeU16cVhRemExdU1iWGNkaFEzOVFHaEIvZGhyRG1TL250Tko1YjEzCjk0bUpLbTkycDR0ckRrVEYxU3h5dWk5TjBqOFQ0U1QyU0RPOXg3ZkROOHRQdk5LYUYvUE01SU5YdXk1VGptajIKQ21EWlV3S0NBUUFOUVJYSFh1ZHRsWFR0ZEhOcHZiQ0l3ZStiRTJsZXd1VlkzMUlYZE5GWDhRRTROOHAzMDFaYwpwMTI2Rk5SR1A3QmhqTi9VOWpTOXliU2xOd0xyTUFxQTBJSHFQRUF6NE9tMnh3T3E0WTBPNFVoSmFubHpsdWYrCjR0cVhOU3hmY201UmtzeFIrSXpaSVRVQWJpalZxa0dvaWNUaVZDVDZjUVJzRDQxSStCMXhxYTV4eHo1YTA4SVoKeDVWemt5d3d5QkVYS3owSjZtNFdOQ1Q3Z2RSWEdCeGUwVXgrZStEZEFJWEQ2M2c1RElzVy9HbHRhVzcySytFSQpnaHZIZVUweExjMWRIWGd5V2hQMWN1ZXFqeHM4UVpHeUYzeENZQWJhOGRrM250S0l5S3NGaVBMSWRUZGdjMklQCkZ2SmtzeG5KN2RYUjdKODlkdXRLMDN6cHJrVEZYaXQ5QW9JQkFDcjhkb2ZCcFlFL1JuTlFwbVNET29DRm1sdTkKQlozN3h5K0puZ2FrQ2RSdHFyR1lDdkZMSnI2QnpGdXE0SHpsM0piTkRCM1BkYSs4Z2VNd2cxU1htTEhrRVFrTQpXV2ptNHpmU3hiTUtKamx3REdoeUlwSU9nQ2FQL1hyT2hxTGl4bnJ6UHFHZmM4R0FZTDE2Rm1PeGVqbVk5aERtCmNibkFqZlNwUjF1WEt2S2d6d1NLQ0VWdzc0VjJSRmRqQXBLVDl3bkpOQTZiWHQ5SXFkaS96d3BYbDQ0OVczdVMKNjRjVVpaK3luYnQ5QUlxbFNjMDdNRHl1TUtueExMbDFLeEJYenNxZlVsYWtlRGVoVmdGS05OOTNXQWJJc09ieAp1d1hTd0hXa1B6RGFHeE9wdzlSMHo2S2t2N25YZnBIYW1RWENBZEdsRjkyc1QwYW80Y3FuejFJSmJ2bz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K\"\n                    }\n                },\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"cacert\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZjekNDQTF1Z0F3SUJBZ0lVVnNRZkFaTW4vazNRTU9nc0RuVEdUaU9PbGJ3d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1NURUxNQWtHQTFVRUJoTUNTVlF4RFRBTEJnTlZCQWdNQkVGemRHa3hFVEFQQmdOVkJBb01DRlJsYzNRZwpUR0ZpTVJnd0ZnWURWUVFEREE5MmJTMWliR0Z1YXk1bVppNXNZVzR3SGhjTk1qTXdOakE0TURrMU5EQTRXaGNOCk1qUXdOakEzTURrMU5EQTRXakJKTVFzd0NRWURWUVFHRXdKSlZERU5NQXNHQTFVRUNBd0VRWE4wYVRFUk1BOEcKQTFVRUNnd0lWR1Z6ZENCTVlXSXhHREFXQmdOVkJBTU1EM1p0TFdKc1lXNXJMbVptTG14aGJqQ0NBaUl3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFLMlQwWXpkcjB0dWQzaVJRNGNzaGNhRVJTRzVjTDE2CkhRblhoYWw4emlUL1VRQUNIUGdzZDYwcWlEaldvQTJXb0lGWFFpUHkzOG1vZGtWRlR4Qmt5U2VldndOOFJiLzEKOFhaMS8yS1RnVmRDcHkvNm11WE15bXZYODJad05CVkV3QnoxUk5kbklUSk44cVh3a0d4bHozbDBib1loRkFyUQpNdmkxcW1RaHpDa2Zpb041MVkrYlBXOXpTQlFQdXNrcXJYYzRqTTJ0VENNQ2pTcFlvd1hXM1ppRmc5WEJ1Z09aCjFmdWd1Zmw4K1FJYzNZSEFoL1Z1NloraXFEOGxQeGRKODlBeDZaazVtOGdkVG9JdUhBbUNWaHFpUXBGRjkzSTgKbkYrSnRuYnBaNTRJUTZBbWYrYiswakMxdmY4Kzg0WUppaEVzWExyaGMxZTRTZ2dwdzEvcWpDb21QblhGVjEzUwpsUG5kVlhVR0taa1ZKdXdZTjJyZElmd3YrdCs5MGhwUVBmNmFBTjRCamRxOXdkdkQzSXVnS2JYZG5CQ0FUTEY4ClYyRTFTSE9VZGdRY3duK1d1WDVVOGdPa3B2b2VFN0g1REJ6Rks1WTZ2SHZlaTRlNkp3RTRDK3FJL1BmbTgreTEKNEpsOFBSOW5JQmdGQ3hrZWpwa2tRQ0I5U0dvMVZidzZhWmdZd0VQNHh6YXFYYXV3L3F4c0oxNUkrRTBndEs1OApuWUtkM0hqelk5Slh6V0NVNTdXbmc2SzNvTTIzNXpyRzJnNm1FaHQ4SStDckVMUFNuZURjZU8zVlJkc2dlblBCCis4U1JxVU8vWG9LWHNEU3I5amoxdWluVzYwTG5MZ0Zmc3JQeGlQVlZlMFh1TFZESlhCSlNoRDZDeGRyMnBSOGQKS25SRDZrTFpZZEtMQWdNQkFBR2pVekJSTUIwR0ExVWREZ1FXQkJRUzZnS2pMK3VFc0dXeXVjbTZyb0xVaXpqVwpWREFmQmdOVkhTTUVHREFXZ0JRUzZnS2pMK3VFc0dXeXVjbTZyb0xVaXpqV1ZEQVBCZ05WSFJNQkFmOEVCVEFECkFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUJad3B4Z2Z4N2thZFhvRHNyT1hUVXJ6dEFPMkFQRVJNaTAKaTkyNk9DTGFPbVVYZW1uKytXSUU1K2tUSE0wcS8vbUZCTURzSmdZSFVLUlNvRGNsNmh4TnVFNUNzS2trRVFTSgpMTHZrWlB0S2J5NGlxMitLZ1JtdVZxbXJNVTBYQzZMZDl3WmttL2huUjNtT3V6bko4MGZmV1JDQ0xGWDEwY2EzCnc5TGM1d1JLTFBZZXQvcEs5SitOYWN3TFJRYTczVFovMUpQNW9BU3czVjNoYkxlLy9UeWpnOURqUlZGY3FYWnEKWWs2Mm5qSkhZVzh3WmlhZzc0QXU4dHE5OG5KandBV1ROMFV5L2w1Q2VpWnV5bzZlU0RHVDNJNm1BdGU1VXBvWAppNXBkYlZ6VDdOZC9IOEwwZHZNdVZ2N0FmakZlcU91cUZNNkkzTnlvbStLWENxNmJQdGxBWEkzeVFZc0t4ZlRkCkw3SnRaTmx6MGJ6eHJhcHI4RmpYcjhML1ZkeHQza00xMnJwb2kzL3hsckR6Q2Q2b2YrQ1MxelBocUdpOUhvcUoKZEU5VGhYMklTdkd2akVSYzVVNFRsNjJBNHNyeGJQbUt0eWx3dGNGVEJacUJiRGY3ZjBBc2cveWhndXdTcktsQQpBNkRWVXVCRFErdGpwZ0N0b0ZlOEhLVDJ6UFVlaEQ2ZjVNQkhmU2ZUZ1crTlhFSXNvVDNsampjY1hsYXhPcFJWCkNQNWxCczNmekxyYnBxbUlLaWZhdWlTNWM4TzlSUjhjQTVzeWlBOTBmbmJIdDlmdGxpRG9jcFRzNUtrbjk2NkIKZUxMM1dXVldCYUtvanJzY1RkVXJoalNnVVBmam5FTXpnVzR2eEc3d3BVNHR2ME4yaEtHUWc0bVhhcDV0SU5Pcwp4WktnZXRHUldnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"vm-blank.ff.lan\"\n                    ],\n                    \"resolver\": \"internal_lan\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"server_cert\",\n                            \"key\": \"server_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ],\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"mTLS-client-profile\"\n                                    }\n                                ]\n                            }\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/vm-blank.ff.lan_access_log\",\n                        \"error\": \"/var/log/nginx/vm-blank.ff.lan_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://origin_server\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"origin_server\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"mTLS-client-profile\",\n                        \"type\": \"mtls\",\n                        \"mtls\": {\n                            \"enabled\": \"on\",\n                            \"client_certificates\": \"cacert\",\n                            \"trusted_ca_certificates\": \"cacert\",\n                            \"ocsp\": {\n                                \"enabled\": \"on\",\n                                \"responder\": \"http://ocsp.k8s.ie.ff.lan\"\n                            },\n                            \"stapling\": {\n                                \"enabled\": true,\n                                \"verify\": true,\n                                \"responder\": \"http://ocsp.k8s.ie.ff.lan\"\n                            }\n                        }\n                    }\n                ]\n            },\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        },\n        \"resolvers\": [\n            {\n                \"name\": \"internal_lan\",\n                \"address\": \"192.168.2.13\",\n                \"ipv4\": true,\n                \"ipv6\": false,\n                \"timeout\": \"30s\"\n            }\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NGINX App Protect WAF",
									"item": [
										{
											"name": "Create initial NGINX configuration with NGINX App Protect WAF",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                }\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-blocked\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - XSS blocked\",\n                            \"description\": \"This is a production-ready policy - XSS blocked\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/nap-policy-xss-blocked.json\"\n                            }\n                        },\n                        {\n                            \"tag\": \"xss-allowed\",\n                            \"displayName\": \"Production Policy - XSS allowed\",\n                            \"description\": \"This is a production-ready policy - XSS allowed\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/nap-policy-xss-allowed.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ],\n                    \"app_protect\": {\n                        \"enabled\": true,\n                        \"policy\": \"production-policy\",\n                        \"log\": {\n                            \"profile_name\": \"secops_dashboard\",\n                            \"enabled\": true,\n                            \"destination\": \"127.0.0.1:514\"\n                        }\n                    }\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change active NGINX App Protect policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"policies\": [\n                {\n                    \"type\": \"app_protect\",\n                    \"name\": \"production-policy\",\n                    \"active_tag\": \"xss-allowed\",\n                    \"versions\": [\n                        {\n                            \"tag\": \"xss-blocked\",\n                            \"displayName\": \"Production Policy - XSS blocked\",\n                            \"description\": \"Production-ready policy - XSS blocked\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/nap-policy-xss-blocked.json\"\n                            }\n                        },\n                        {\n                            \"tag\": \"xss-allowed\",\n                            \"displayName\": \"Production Policy - XSS allowed\",\n                            \"description\": \"Production-ready policy - XSS allowed\",\n                            \"contents\": {\n                                \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/nap-policy-xss-allowed.json\"\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update TLS certificates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_app_protect_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert2.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert2.key\"\n                    }\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Disable NGINX App Protect WAF",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NGINX Javascript",
									"item": [
										{
											"name": "NGINX Javascript test",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Example HTTP server with Javascript\",\n                    \"resolver\": \"Google\",\n                    \"names\": [\n                        \"njs-test.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/njs-test.nginx.lab_access_log\",\n                        \"error\": \"/var/log/nginx/njs-test.nginx.lab_error_log\"\n                    },\n                    \"njs\": [\n                        {\n                            \"hook\": {\n                                \"type\": \"js_set\",\n                                \"js_set\": {\n                                    \"variable\": \"$serverVarSetByNjs\"\n                                }\n                            },\n                            \"profile\": \"njs_set_variable\",\n                            \"function\": \"njsSetVariable\"\n                        }\n                    ],\n                    \"headers\": {\n                        \"to_server\": {\n                            \"set\": [\n                                {\n                                    \"name\": \"X-Injected-Client-IP\",\n                                    \"value\": \"$remote_addr\"\n                                },\n                                {\n                                    \"name\": \"Host\",\n                                    \"value\": \"echo.free.beeceptor.com\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/echo\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-HTTP-Var-Set-By-Njs\",\n                                            \"value\": \"$httpVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"X-Server-Var-Set-By-Njs\",\n                                            \"value\": \"$serverVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        },\n                        {\n                            \"uri\": \"/generatecontent\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"njs\": [\n                                {\n                                    \"hook\": {\n                                        \"type\": \"js_content\"\n                                    },\n                                    \"profile\": \"njs_set_content\",\n                                    \"function\": \"njsSetContent\"\n                                }\n                            ],\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-HTTP-Var-Set-By-Njs\",\n                                            \"value\": \"$httpVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"X-Server-Var-Set-By-Njs\",\n                                            \"value\": \"$serverVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ],\n            \"njs\": [\n                {\n                    \"hook\": {\n                        \"type\": \"js_set\",\n                        \"js_set\": {\n                            \"variable\": \"$httpVarSetByNjs\"\n                        }\n                    },\n                    \"profile\": \"njs_set_variable\",\n                    \"function\": \"njsSetVariable\"\n                }\n            ],\n            \"njs_profiles\": [\n                {\n                    \"name\": \"njs_set_variable\",\n                    \"file\": {\n                        \"content\": \"ZnVuY3Rpb24gbmpzU2V0VmFyaWFibGUocikgewogICAgcmV0dXJuICJWYXJpYWJsZV9zZXRfYnlfamF2YXNjcmlwdCAtIFVSSSAiK3IudXJpOwp9CgpleHBvcnQgZGVmYXVsdCB7bmpzU2V0VmFyaWFibGV9Cgo=\"\n                    }\n                },\n                {\n                    \"name\": \"njs_set_content\",\n                    \"file\": {\n                        \"content\": \"ZnVuY3Rpb24gbmpzU2V0Q29udGVudChyKSB7CiAgci5yZXR1cm4oMjAwLCAiSGVsbG8gd29ybGQhXG4iKTsKfQoKZXhwb3J0IGRlZmF1bHQge25qc1NldENvbnRlbnR9Cg==\"\n                    }\n                }\n            ],\n            \"nginx_plus_api\": {\n                \"write\": false,\n                \"listen\": \"127.0.0.1:8080\",\n                \"allow_acl\": \"0.0.0.0/0\"\n            }\n        },\n        \"resolvers\": [\n            {\n                \"name\": \"Google\",\n                \"address\": \"8.8.8.8\",\n                \"ipv4\": true,\n                \"ipv6\": false,\n                \"timeout\": \"30s\"\n            }\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Server-side and source of truth authentication",
									"item": [
										{
											"name": "Bearer Token, Basic and HTTP header upstream authentication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\",\n                        \"authentication\": [\n                            {\n                                \"profile\": \"Basic authentication profile\"\n                            }\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\",\n                            \"authentication\": {\n                                \"server\": [\n                                    {\n                                        \"profile\": \"Bearer token-based authentication profile\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"server\": [\n                    {\n                        \"name\": \"Bearer token-based authentication profile\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"bearer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Header-based authentication profile\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"header\",\n                            \"location\": \"X-AUTH-TOKEN\"\n                        }\n                    },\n                    {\n                        \"name\": \"Basic authentication profile\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"type\": \"basic\",\n                            \"username\": \"authusername\",\n                            \"password\": \"YXV0aHBhc3N3b3Jk\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "mTLS upstream authentication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\",\n                        \"authentication\": [\n                            {\n                                \"profile\": \"Basic authentication profile\"\n                            }\n                        ]\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                },\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"client_cert\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZBakNDQStxZ0F3SUJBZ0lVYXZ1aFhBOWFLVFJlYmZ2Y1BFU2Z0MjBUQXhzd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1ZqRUxNQWtHQTFVRUJoTUNTVVV4RFRBTEJnTlZCQWdNQkVOdmNtc3hEVEFMQmdOVkJBY01CRU52Y21zeApFVEFQQmdOVkJBb01DRUZqYldVZ1RIUmtNUll3RkFZRFZRUUREQTEwWlhOMExtRmpiV1F1YkdGdU1CNFhEVEkwCk1EUXhOVEUzTURnMU0xb1hEVEkxTURReE5URTNNRGcxTTFvd1dERUxNQWtHQTFVRUJoTUNTVVV4RFRBTEJnTlYKQkFnTUJFTnZjbXN4RFRBTEJnTlZCQWNNQkVOdmNtc3hFVEFQQmdOVkJBb01DRUZqYldVZ1RIUmtNUmd3RmdZRApWUVFEREE5amJHbGxiblF1WVdOdFpTNXNZV0l3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLCkFvSUNBUURUQ2kydi8rc08rdTJTcFF5ZVBLM3hnb3RyRUlDZGJYMmN4N0xkcnRDbE82a0xTM3IybWpxV1ptWkQKUWkvL0dIZXhYS3NaelBURDUyN0ZMZlREcExIb2h1MldmeUErQy9HN2JycXlNT0dQZ3lVcEI2NWN2THU4V1BNOApPa3lxVFdma0xkRnF2akFGclU5czMxUnljT3BQSlB0cFloRWlhQXZRWDlwRnhjalM2NUJscUFCMjY1YnlncGs2CmpsV1E5NTVWUzlmZlNLU3hpQTRCQXAzMHV3Rm5YRWtMcGRCenI1TkFKeXJqdXhzbHJGVEs4SGxvRmQ2MndzQUMKRjYrRGZmQ2FNLzVockljRkswSVFheHBpaWUyWllKaVFmNXJMeVd6VG1xMVh1QmsyaEhBWDNvQUY2bW9hcnVNOAo5UlhxQmlaNnFWdGFPQXFEK0pRVGNpYmVzekQ2Z2xoSitGM0VFTEJOWVhETmFLbGprQXRxVWFwYStXZEdVUkU4CnZvczA4TSsvOUlhWTdQeGtQNXB6bDhmaS9RaS9ESW9WLzh0UUlydFBIYzJqSTFSRkZoL3BpeDFsR2lyTlRBK0QKbTlURDJKT0hTU3VmdkRkRnV1YjFwMnF5TW5Nd3FFNklHOGpmTEg2TGNxRGFSbmcveVpVUTBqa01LSFYrd1gwegpkZ1RsMDVVWjZtMFpFNUdlK1FRaG5nY0FUemdrSWp3WlJod1JLOEx1Nmtwb2Vnb0dMUkhkTVNqcUV0NkNWc25BCmFLZ0hTbTJROE9MS1lJdlhVN1RpME9DNm5OdU40RDlKdkxGQXdPMUVFU2tCUXFQeThGby8zRVNZWU1FazJ6RzQKc3I0UXJ4Q2xuY2pwbUMrdkRmdHJuR055SVJvditOeS9zd2FSdkcvcm15ZnhEYVdNL3dJREFRQUJvNEhGTUlIQwpNQWtHQTFVZEV3UUNNQUF3RVFZSllJWklBWWI0UWdFQkJBUURBZ1dnTURNR0NXQ0dTQUdHK0VJQkRRUW1GaVJQCmNHVnVVMU5NSUVkbGJtVnlZWFJsWkNCRGJHbGxiblFnUTJWeWRHbG1hV05oZEdVd0hRWURWUjBPQkJZRUZGQmIKdmltZDYxekxLdlA0U2RZRFRWbndYdFVwTUI4R0ExVWRJd1FZTUJhQUZLY29GRHpMVnc1QXBiMzB5UTM0c25MZQpHQ1FWTUE0R0ExVWREd0VCL3dRRUF3SUY0REFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQWdZSUt3WUJCUVVICkF3UXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSmg0cm9kZEVGemJwWk5kSW5zUmdubWVnWVIxSWlzUUxRU0IKcmNydEZxVmtLb3Rsc09EUXBFMThIRjBsbVA4WE9IU0hqYytYUVF5YlFNd1ViZ2RNbnhBZE1WaGFaMXppWElnaQpiUHgwOEY0YXR5MElJY1hyOVpFVnZTd1pheURBZHErb2s5RGpoRjQwYU5iQmFBTXB2NTRCL2U3OUNMSWZ6REo4CnNZaWw3K09abWlOUTJtZUNreVBYdXdhd3hTeVRnNVhWS3Q4VEtKQVJ5aTFJeWRHWkZRMTJGWFJHTE1BSjdaYngKRzlPd1ZvazExenpWNkRQZHFuZU5ER3BQRU5WZ2VmVjI0ZU1JVXUrYzhnSThYTU1GMU9VVWR3MmlEQmU4Q01TQQppc2h2aDFWYVZPNC96czlma2dLV2FXejNwQWprN3pkbWdaUnpXRUVHR0JMekJoQk5FQTg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"client_key\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRd0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Mwd2dna3BBZ0VBQW9JQ0FRRFRDaTJ2LytzTyt1MlMKcFF5ZVBLM3hnb3RyRUlDZGJYMmN4N0xkcnRDbE82a0xTM3IybWpxV1ptWkRRaS8vR0hleFhLc1p6UFRENTI3RgpMZlREcExIb2h1MldmeUErQy9HN2JycXlNT0dQZ3lVcEI2NWN2THU4V1BNOE9reXFUV2ZrTGRGcXZqQUZyVTlzCjMxUnljT3BQSlB0cFloRWlhQXZRWDlwRnhjalM2NUJscUFCMjY1YnlncGs2amxXUTk1NVZTOWZmU0tTeGlBNEIKQXAzMHV3Rm5YRWtMcGRCenI1TkFKeXJqdXhzbHJGVEs4SGxvRmQ2MndzQUNGNitEZmZDYU0vNWhySWNGSzBJUQpheHBpaWUyWllKaVFmNXJMeVd6VG1xMVh1QmsyaEhBWDNvQUY2bW9hcnVNODlSWHFCaVo2cVZ0YU9BcUQrSlFUCmNpYmVzekQ2Z2xoSitGM0VFTEJOWVhETmFLbGprQXRxVWFwYStXZEdVUkU4dm9zMDhNKy85SWFZN1B4a1A1cHoKbDhmaS9RaS9ESW9WLzh0UUlydFBIYzJqSTFSRkZoL3BpeDFsR2lyTlRBK0RtOVREMkpPSFNTdWZ2RGRGdXViMQpwMnF5TW5Nd3FFNklHOGpmTEg2TGNxRGFSbmcveVpVUTBqa01LSFYrd1gwemRnVGwwNVVaNm0wWkU1R2UrUVFoCm5nY0FUemdrSWp3WlJod1JLOEx1Nmtwb2Vnb0dMUkhkTVNqcUV0NkNWc25BYUtnSFNtMlE4T0xLWUl2WFU3VGkKME9DNm5OdU40RDlKdkxGQXdPMUVFU2tCUXFQeThGby8zRVNZWU1FazJ6RzRzcjRRcnhDbG5janBtQyt2RGZ0cgpuR055SVJvditOeS9zd2FSdkcvcm15ZnhEYVdNL3dJREFRQUJBb0lDQUJzWEZBK2krRmVFbW5rdE9xdHRUL1FsCk5TUlozL05WYjJuRlcyUGRqRHhKcGtUTzV2VS9qYThVd2ZmTVIrdWxCbWhSWkVmOFBweVBMc2J5USszV29iSjAKUk9JQlprVjdYd2ZDWDdEVUJDc0VtS3ZscDlvN3JVQmJqV0w1SmpJNDhYeDI3VFR0NlFMY05uVXhUZDUxanRPagpXYXFJdzNqNU1Oc0tFdDRncWlET2RhQzIvMzJaekZkTHNHNWdnRmRnUElZOUpYUXN3bHk2VnZjdzVpU0RoTnRICkcyYWxYYXdiL2s1Sk9OWTIyY3RDT0kyUnhPUGtPc3lYRkoxYTBRQStGYmxBWExKenVubE5ZNU9iOXEwWTFpa2sKSHpGeXBUcENSdmY2dzY3em00NUYvZVdkS0MzdmpnM29JK29GUS9vMTJUdjhWV3Bhc0ptSmoraUJ5aFRpOGx4YQpMempXaHNrUFZJUGJDYjFDTmIzZHNQSWVWYTVQYmRORGh2bHBQZFV4cXhKRGI4ZUFhemxSQXJVdmtaQnpkTjZtCjVwekljNGtMQnd3Wno5eGg1MzdsQ0tlZ3ZJYmdEMlQvMEM4SVFsWmFIK1M3azlWaVU2Z1RWSGNzU1RsSm52NVYKN3VCMWczVzJZRVloZFJxNlJOUXRZaUFuTktUS2ZYb3d1UUJteWRwVWRYWUljTE5GcER6eHgvRGdQSEhnU0J1dQpQZXVMZzdpemhSSndKMTQ1eW5VTlloQnROVVJaOWlRL1cwWTJOa242UWFBZDNld1pLaVg0S3lZU2k3TTF1MFJWCmFDc1BmZWJrWkRTUnRnQ2Q5N3dGSVYyTVh0UnpXNlpKUUlDWkhHTDVkYkJrNU0xQTI2NnJSYmcvTWZJSE9mdTMKRUZBVjc2aXoyVmNtSDRzblNZUHhBb0lCQVFEc0pNWElhM3ZyRXdRSkh0alRWZE9ONk9rbEExRVN4aWtjSWdSOAo3aFRWQXk3dmtORlpFVUhYczQ1TXlYQzRxTWlvUnFhZHVtOXpQWnFBQ0tQMHRWcXdDMVdOcUFrbDBQc1pZYXcrCmpKNjRDQXA4ZnJ4UDUrOVpWREtiamRWK1ZrK1lrbC9UL0Q1djNFTnZIdkVxN3ZMSE56dE9VSmFWZXNFRERQSW8KaER5SHhjRXQwTHRXTFhoNGNMSDhIQk9Kc0wxYXcxRlhNTk1qdERzazlBMTlJRFlYTHcwaWpIeC81c3hHUGcxSQpmMXRIemhpTlN5NUU5RG9pTmJxVFQvWEEyYVdCdjJ1ZlQybmw2ekticHZHNVo0VGlOUE5ESU5MaUFXOVNNQnJnCkJtaXJFVHU4MnVSa3hnaWZTM01CZ0ZFdXVtaSt2cEhwNzhGaUNOcHpZZUFwTUxjN0FvSUJBUURreVFVT29HVjEKTzZaNXJ4KzhLbVh1S3dmbXNHNmh5cmkrNEw4MzRQakVhbHdkdFhFUmphUG8vSTVhOVFoYjNnLzF5SUdiMzdLSgpPaTFCcGVRZ1owUEVQdFgyRWI0QTNCSTA5SzExWWFybnJGM2d6WS9CVWgveEZoL1YvVEVzTTloZTZ4YlhtRm9WCktvMlY1b2NlNnQzNUJuNHVLL2xkSEJKMHJnUENQdXNKVU9JMEhtUzZkdXNQcHczRFpESkZ5SEU4anptSllwcUsKMnBEMlBBMVZ5aVBBM3MwOU12TWdNSmJXajJLQVBoYk4xQXJnTERaUTFuZ0VwaVFtM3hWdmxIVkMzN0JHM0IzcApWbmtSRE9UZnF1N1BXek40aHZnMDRaNkxBdEZuYzNnMFFxRGcvcXZlS0xuclZwOUJEUlhWb0pZZkNMaVBkajZCCmFiYnFXQ0lYTnMwTkFvSUJBUURFWllrQk9UT2t2UG44UStWOVRzSldJa0hWZ0w2cTZKaEVSNTZIOE5MdW5ta28KNGI3Ylh0anQ5dTRBdXdDKzg5Ris4dE9jRnZTZVdidm5oRWdvTzdTaSthbzcyR2RUUmsyd1BHV3UxL0VoaWI1Kwo4RURhREVJcWZ6WmYzVVNVZ0dCT3VsNXN4anQvZVNlMGdYMStnYUQxUXVCV0wvd3RjaHlZMXVtSC9RTUN3TnY3CnFNQkYyaWQ1cy9Demh2NVE0K2Q0VnoyTlVKUXArN204OENWUHpieHU1N2o2NVBDZXgydFplRDQvNzN3UmFqMU4KTmh2VFNYUVlBNnVhM1VPOUVzYnQ5REFrSFQ0cjlNTHdaWlpnNXRIRCtObmhHS21MUWpvOWxyaWpYWEVyNVhkVAppSkd2cG15Qlg1VFV5TTI4R1ZrSVd5S3I5N1ZVUFp6Qm5jTjdQb01GQW9JQkFDSWRCekFESXAyMFkwSkpwb1c4CkhLN0NvODcyQjhrQUhVUDQ1d3BCOVZYME5nQUlDZkFBR3F5bTIrTWNIajcwZ1pTNGJQcjlBL1lLUXExRE94ekoKeVFUK0NaRkRXLzFzMHhvcVVhTHJDVHk2S3RWV1VWVVdGY1V3ODFaSkJvZjh3d3FFSzBmQ1k4dzhLQmh0NHovcwo3V1F3WDZncXptZmZ3N0M2TWIxSS9HckxNSzlzeU1BMDh4L0dYUHNCZWEyR0VieGg3c1paZVlteXhXS3gyWnN0CkpOK2hXU0VDODlXYzZTRGRDR2J1MngrZHVuRnFwajZ2ZS8zVmVCYUR0UUtLTkdIZ1VMeUFIY1dwS3l3cnJBVGQKeS9ZSE4wbUZkb1VNRDBQVEM3NU5MV005ZkJlUVliZ2lnblpnMkNZdStVNTlQMlVwTzd2SWVkRjZIZGdiaEJuSwpCaEVDZ2dFQkFNZmQ2Zi90RThTQlNFUnd5YW80SThuZkhTZUlMUklvM3pqRE5vWHZ6VHlwbG00a3ovYW9QeEF0CmhPYVNmZU41bFljMXFFUkRxZzRIVGRNTUkyenZPaVFuMHNGTEJFZ0UwT0VIOEZxZVZlZGgycUJucFdXWEhwTW8KREd4TnhpUnVpSDZpOEVMVWFoaU1NQkdQVi9ONjI5MDREbnUyYVVHcHlMTzZxems3SmM5VXlITC90QVNRTFIzagp6NFBhb2xTRE5rNzJSUks0VjIyZUprM2EwYVhjRU5vM1R0OUlTUTliMG5DYVVKbFJsZTA0d2QrOWUyN0FRNUNaCkVWbUtZT1JYcW9VTGNQOEcxRm1VUGhDRkU2aEI3L1hSVWpQdmJFdm5rS05Cdko2UHppT0RMdktRK3I4TzR0WkMKQi9LTDlCdjNmdUkvQlJLeU9WZVU1VnZ5MzUveUFxVT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\",\n                            \"authentication\": {\n                                \"server\": [\n                                    {\n                                        \"profile\": \"mTLS authentication profile\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"server\": [\n                    {\n                        \"name\": \"mTLS authentication profile\",\n                        \"type\": \"mtls\",\n                        \"mtls\": {\n                            \"certificate\": \"client_cert\",\n                            \"key\": \"client_key\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Stream server",
									"item": [
										{
											"name": "Create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nms\",\n        \"nms\": {\n            \"url\": \"{{nim_host}}\",\n            \"username\": \"{{nim_username}}\",\n            \"password\": \"{{nim_password}}\",\n            \"instancegroup\": \"{{nim_instancegroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"layer4\": {\n            \"servers\": [\n                {\n                    \"name\": \"DNS Load Balancer\",\n                    \"resolver\": \"Quad-ones\",\n                    \"listen\": {\n                        \"address\": \"10053\",\n                        \"protocol\": \"udp\"\n                    },\n                    \"upstream\": \"google_DNS_upstream\"\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"google_DNS_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"ns1.google.com:53\"\n                        },\n                        {\n                            \"server\": \"ns2.google.com:53\"\n                        }\n                    ],\n                    \"resolver\": \"Quad9\"\n                }\n            ]\n        },\n        \"resolvers\": [\n            {\n                \"name\": \"Quad9\",\n                \"address\": \"9.9.9.9\",\n                \"ipv4\": true,\n                \"ipv6\": false,\n                \"timeout\": \"30s\"\n            },\n            {\n                \"name\": \"Quad-ones\",\n                \"address\": \"1.1.1.1\",\n                \"ipv4\": true,\n                \"ipv6\": false,\n                \"timeout\": \"30s\"\n            }\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "NGINX One",
							"item": [
								{
									"name": "API Gateway",
									"item": [
										{
											"name": "Ergast API",
											"item": [
												{
													"name": "Ergast API Gateway and DevPortal with redocly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Ergast API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/ergast\",\n                            \"urimatch\": \"prefix\",\n                            \"snippet\": {\n                                \"content\": \"IyBUZXN0IFNOSVBQRVQK\"\n                            },\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"https://raw.githubusercontent.com/adampax/ergast-f1-openapi-doc/e558eea18e176e4f78a8765ac7eccc804b5157ff/ergast-openapi-doc.yaml\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/ergast-devportal.html\"\n                                    }\n                                },\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/ergast-access_log\",\n                                    \"error\": \"/var/log/nginx/ergast-error_log\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ergast API Gateway and DevPortal with backstage",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Ergast API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/ergast\",\n                            \"urimatch\": \"prefix\",\n                            \"snippet\": {\n                                \"content\": \"IyBUZXN0IFNOSVBQRVQK\"\n                            },\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"https://raw.githubusercontent.com/adampax/ergast-f1-openapi-doc/e558eea18e176e4f78a8765ac7eccc804b5157ff/ergast-openapi-doc.yaml\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"backstage\",\n                                    \"backstage\": {\n                                        \"name\": \"petstore-devportal\",\n                                        \"lifecycle\": \"production\",\n                                        \"owner\": \"api-team\",\n                                        \"system\": \"public-api-system\"\n                                    }\n                                },\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/ergast-access_log\",\n                                    \"error\": \"/var/log/nginx/ergast-error_log\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Petstore API",
											"item": [
												{
													"name": "Petstore API Gateway RateLimit",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\",\n                                    \"authentication\": [\n                                        {\n                                            \"profile\": \"Source of truth authentication profile using HTTP header token authentication\"\n                                        }\n                                    ]\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ],\n                \"server\": [\n                    {\n                        \"name\": \"Source of truth authentication profile using bearer token authentication\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"bearer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Source of truth authentication profile using HTTP header token authentication\",\n                        \"type\": \"token\",\n                        \"token\": {\n                            \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjAwMDEiLCJpc3MiOiJCYXNoIEpXVCBHZW5lcmF0b3IiLCJpYXQiOjE3MDI0ODEzNjcsImV4cCI6MTcwMjQ4MTM2OH0.eyJuYW1lIjoiQm9iIERldk9wcyIsInN1YiI6IkpXVCBzdWIgY2xhaW0iLCJpc3MiOiJKV1QgaXNzIGNsYWltIiwicm9sZXMiOlsiZGV2b3BzIl19.SKA_7MszAypMEtX5NDQ0TcUbVYx_Wt0hrtmuyTmrVKU\",\n                            \"type\": \"header\",\n                            \"location\": \"X-AUTH-TOKEN\"\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ + redocly",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\",\n                        \"http2\": true\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/petstore-devportal.html\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\",\n                                        \"/pet/{petId}/uploadImage\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ],\n                                \"errorcode\": 403\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												},
												{
													"name": "Petstore API Gateway RateLimit + JWT AuthN/AuthZ +  backstage",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var respData = JSON.parse(responseBody);",
																	"",
																	"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
																	"",
																	"pm.collectionVariables.set('configUid',respData.configUid);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"8.8.8.8\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\",\n                        \"http2\": true\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"backstage\",\n                                    \"backstage\": {\n                                        \"name\": \"petstore-devportal\",\n                                        \"lifecycle\": \"production\",\n                                        \"owner\": \"Petstore-API-owner\",\n                                        \"system\": \"Public-facing-API-system\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\",\n                                        \"/pet/{petId}/uploadImage\"\n                                    ]\n                                },\n                                \"authorization\": [\n                                    {\n                                        \"profile\": \"JWT role based authorization\",\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ],\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\",\n                                            \"/pet/{petId}/uploadImage\"\n                                        ]\n                                    }\n                                ]\n                            },\n                            \"log\": {\n                                \"access\": \"/var/log/nginx/petstore-access_log\",\n                                \"error\": \"/var/log/nginx/petstore-error_log\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            },\n            \"authorization\": [\n                {\n                    \"name\": \"JWT role based authorization\",\n                    \"type\": \"jwt\",\n                    \"jwt\": {\n                        \"claims\": [\n                            {\n                                \"name\": \"roles\",\n                                \"value\": [\n                                    \"~(devops)\"\n                                ],\n                                \"errorcode\": 403\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
															"protocol": "http",
															"host": [
																"{{ncg_host}}"
															],
															"port": "{{ncg_port}}",
															"path": [
																"{{ngc_api_version}}",
																"config"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Petstore & Ergast API Gateway all in one",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Petstore and Ergast API\",\n                    \"names\": [\n                        \"apigw.nginx.lab\"\n                    ],\n                    \"resolver\": \"192.168.2.13\",\n                    \"listen\": {\n                        \"address\": \"80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/apigw.nginx.lab-access_log\",\n                        \"error\": \"/var/log/nginx/apigw.nginx.lab-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/petstore\",\n                            \"urimatch\": \"prefix\",\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"http://petstore.swagger.io/v2/swagger.json\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true,\n                                    \"server_url\": \"https://petstore.swagger.io/v2\"\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/petstore-devportal.html\"\n                                    }\n                                },\n                                \"authentication\": {\n                                    \"client\": [\n                                        {\n                                            \"profile\": \"Petstore JWT Authentication\"\n                                        }\n                                    ],\n                                    \"enforceOnPaths\": true,\n                                    \"paths\": [\n                                        \"/user/login\",\n                                        \"/user/logout\"\n                                    ]\n                                },\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"petstore_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0,\n                                        \"enforceOnPaths\": true,\n                                        \"paths\": [\n                                            \"/user/login\",\n                                            \"/user/logout\"\n                                        ]\n                                    }\n                                ],\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/petstore-access_log\",\n                                    \"error\": \"/var/log/nginx/petstore-error_log\"\n                                }\n                            }\n                        },\n                        {\n                            \"uri\": \"/ergast\",\n                            \"urimatch\": \"prefix\",\n                            \"snippet\": {\n                                \"content\": \"IyBUZXN0IFNOSVBQRVQK\"\n                            },\n                            \"apigateway\": {\n                                \"openapi_schema\": {\n                                    \"content\": \"https://raw.githubusercontent.com/adampax/ergast-f1-openapi-doc/e558eea18e176e4f78a8765ac7eccc804b5157ff/ergast-openapi-doc.yaml\"\n                                },\n                                \"api_gateway\": {\n                                    \"enabled\": true,\n                                    \"strip_uri\": true\n                                },\n                                \"developer_portal\": {\n                                    \"enabled\": true,\n                                    \"type\": \"redocly\",\n                                    \"redocly\": {\n                                        \"uri\": \"/ergast-devportal.html\"\n                                    }\n                                },\n                                \"rate_limit\": [\n                                    {\n                                        \"profile\": \"ergast_ratelimit\",\n                                        \"httpcode\": 429,\n                                        \"burst\": 0,\n                                        \"delay\": 0\n                                    }\n                                ],\n                                \"log\": {\n                                    \"access\": \"/var/log/nginx/ergast-access_log\",\n                                    \"error\": \"/var/log/nginx/ergast-error_log\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"rate_limit\": [\n                {\n                    \"name\": \"ergast_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"1r/s\"\n                },\n                {\n                    \"name\": \"petstore_ratelimit\",\n                    \"key\": \"$binary_remote_addr\",\n                    \"size\": \"10m\",\n                    \"rate\": \"2r/s\"\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"Petstore JWT Authentication\",\n                        \"type\": \"jwt\",\n                        \"jwt\": {\n                            \"realm\": \"Petstore Authentication\",\n                            \"key\": \"{\\\"keys\\\": [{\\\"k\\\":\\\"ZmFudGFzdGljand0\\\",\\\"kty\\\":\\\"oct\\\",\\\"kid\\\":\\\"0001\\\"}]}\",\n                            \"cachetime\": 5\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CRUD automation",
									"item": [
										{
											"name": "Create initial NGINX configuration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0,\n            \"modules\": []\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"HTTP test application\",\n                    \"names\": [\n                        \"patched_server.nginx.lab\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"127.0.0.1:8080\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/access_log\",\n                        \"error\": \"/var/log/nginx/error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"10.0.0.1:80\"\n                        },\n                        {\n                            \"server\": \"10.0.0.2:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Housekeeping - common endpoints",
									"item": [
										{
											"name": "Clean NGINX configuration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get declaration status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}/status",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get  declaration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete  declaration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "HTTP Headers Manipulation",
									"item": [
										{
											"name": "Create test echo service",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"resolver\": \"8.8.8.8\",\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										},
										{
											"name": "Manipulate headers - server level",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"resolver\": \"8.8.8.8\",\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"headers\": {\n                        \"to_server\": {\n                            \"set\": [\n                                {\n                                    \"name\": \"X-Injected-Client-IP\",\n                                    \"value\": \"$remote_addr\"\n                                },\n                                {\n                                    \"name\": \"X-Injected-Echo-Test-Version\",\n                                    \"value\": \"v1\"\n                                },\n                                {\n                                    \"name\": \"Host\",\n                                    \"value\": \"echo.free.beeceptor.com\"\n                                }\n                            ],\n                            \"delete\": [\n                                \"User-Agent\"\n                            ]\n                        },\n                        \"to_client\": {\n                            \"add\": [\n                                {\n                                    \"name\": \"X-Injected-Response-Status\",\n                                    \"value\": \"$status\"\n                                }\n                            ],\n                            \"delete\": [\n                                \"vary\"\n                            ],\n                            \"replace\": [\n                                {\n                                    \"name\": \"Server\",\n                                    \"value\": \"Echo Test Server\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Manipulate headers - location level",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Test echo app\",\n                    \"names\": [\n                        \"echo.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"resolver\": \"8.8.8.8\",\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/test-echo-access_log\",\n                        \"error\": \"/var/log/nginx/test-echo-error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test-echo-upstream\",\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-Injected-Echo-Test-Version\",\n                                            \"value\": \"v1\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ],\n                                    \"delete\": [\n                                        \"User-Agent\"\n                                    ]\n                                },\n                                \"to_client\": {\n                                    \"add\": [\n                                        {\n                                            \"name\": \"X-Injected-Response-Status\",\n                                            \"value\": \"$status\"\n                                        }\n                                    ],\n                                    \"delete\": [\n                                        \"vary\"\n                                    ],\n                                    \"replace\": [\n                                        {\n                                            \"name\": \"Server\",\n                                            \"value\": \"Echo Test Server\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test-echo-upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config/{{configUid}}",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config",
														"{{configUid}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "Test using:\n\n`curl -i echo.vm-test.ie.ff.lan`\n\nThe actual FQDN can be modified in the request JSON body"
								},
								{
									"name": "HTTPS server",
									"item": [
										{
											"name": "TLS Offload",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0,\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"test_cert\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.crt\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"test_key\",\n                    \"contents\": {\n                        \"content\": \"{{github_gitops_root}}/{{ngc_api_version}}/testcert.key\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"www.online-boutique.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"test_cert\",\n                            \"key\": \"test_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ]\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/online_boutique_https_access_log\",\n                        \"error\": \"/var/log/nginx/online_boutique_https_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://upstream_boutique\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"upstream_boutique\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.2.200:80\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "mTLS Client Authentication",
									"item": [
										{
											"name": "HTTPS server with mTLS, OCSP, SSL Stapling",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ],\n            \"certificates\": [\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"server_cert\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdSRENDQkN5Z0F3SUJBZ0lVTTNJQVZIRmxhSTVsY1d0TjZxOUVhcnlka0w4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1NURUxNQWtHQTFVRUJoTUNTVlF4RFRBTEJnTlZCQWdNQkVGemRHa3hFVEFQQmdOVkJBb01DRlJsYzNRZwpUR0ZpTVJnd0ZnWURWUVFEREE5MmJTMWliR0Z1YXk1bVppNXNZVzR3SGhjTk1qTXdOakE0TVRBd01qTTVXaGNOCk1qUXdOakEzTVRBd01qTTVXakJKTVFzd0NRWURWUVFHRXdKSlZERU5NQXNHQTFVRUNBd0VRWE4wYVRFUk1BOEcKQTFVRUNnd0lWR1Z6ZENCTVlXSXhHREFXQmdOVkJBTU1EM1p0TFdKc1lXNXJMbVptTG14aGJqQ0NBaUl3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFMRFQ2bnZleVZlNi9VZlk2aUtHVC9oV1A0cktDSGR0ClloZWU3RGVZR29QWGhGVjB6a3grVWExanBEZ21WUE1kVEJBdnoxODg5NzlEcHBqdmNYeFhsRmpnaUhjWDhpWVgKSXovSUVMc3dKRUNITWNsNkxmelA5eDVUY1gxTEdFblFOTWhHRzA2MjlxU2NCQmQyUUNiWlY0UWE1TkxlQnQ4cQpHQ2lXY3JiQnR3YlpiSGo1dk9aenJrdHBtRFBGS1V4bXR5b2dBQnNaTllnL0F3Y1l2RXdBOEQ0QTN0VEgxcGhvCkdYY3ZvZWpJelhRMUdmYys5azR3OFhHYWFQOGd2bTdOMXN2MnU2Yld4SHRGZHpWQk9udzJyaHUvWGYyY0N0dW4KUnIxSENKQXRRSDlkbDhzZks1czBSRlVuTlVYbFBiNTFBTjBjVFVGbEYrZlVUVmVON3dNMTdmeVZVY3IydTltSwo0UGdoWjkvMml0ZUpZV3hjK3k4V2NEQzBUV3hwZ2paVEw5Tk1GK2t6SXV2TjJOWFFybjcvSU5UQTMvNFlmWGRPCloxelpTdTlkclRMcG5DZHRpOWxuRHBKODd3bW41cVZSTlZiTlZRbldEeW5yZnoyTU1DY21jLzcvdkJFN2dDemQKNFJLWHJLdHloenlQSitycmh3NmpxYVA4QytaZGRvKzkvak9QVDFTSnUxZ21VbzFuZ2hBMWh2N0M5RUYrM2xQVApYSk5WV3dtYkdWK0p4cUdKSjJSa2toMlIrZTVIREdRY2hGWjJIcXBGTGVQN0trTHJBR2RkZFZQWEZhQ0RiU0R6ClJQd0I5WFlhakg5Zm5QWEtFT3ZpVEJhQVNjWUZwTXB5cm02UkxHUGRSVnE2RUNYVlB4MDdHdGFCaEVvVWIwK2YKVkZnNExtQkx4MldQQWdNQkFBR2pnZ0VpTUlJQkhqQUpCZ05WSFJNRUFqQUFNQkVHQ1dDR1NBR0crRUlCQVFRRQpBd0lHUURBekJnbGdoa2dCaHZoQ0FRMEVKaFlrVDNCbGJsTlRUQ0JIWlc1bGNtRjBaV1FnVTJWeWRtVnlJRU5sCmNuUnBabWxqWVhSbE1CMEdBMVVkRGdRV0JCVHZFZWJGK1JDV0JhcGVPWUdpQ0YyVHZxbExYekNCaEFZRFZSMGoKQkgwd2U0QVVFdW9Db3kvcmhMQmxzcm5KdXE2QzFJczQxbFNoVGFSTE1Fa3hDekFKQmdOVkJBWVRBa2xVTVEwdwpDd1lEVlFRSURBUkJjM1JwTVJFd0R3WURWUVFLREFoVVpYTjBJRXhoWWpFWU1CWUdBMVVFQXd3UGRtMHRZbXhoCmJtc3VabVl1YkdGdWdoUld4QjhCa3lmK1RkQXc2Q3dPZE1aT0k0NlZ2REFPQmdOVkhROEJBZjhFQkFNQ0JhQXcKRXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFHUDR6ZkdseTI1RwpneTBSeC9SSTNpNzJDVlIrSXY3SW5WTUVGWDZqRHRNV3hSblFtRGZsMWtTOVF1Y3hNb0tnOE9URStMcnlzdGJsClF4WGZiakZQekNoNHB1UGtGTmNBeG1mVmR4b20xR1lodWpoYTBQOUswUURZSDZycGlUaFdSQ2greUovQm1qZ2wKTlJabks4WGRqME85Ui9XKzJrTFRac2VFbS9hZHFVQ3dkYzNBWWlNWGh4QXkvQlh3bFRQeDMyMHZCcXYxZGFyVgp5ZlVoRlM1Rkg3enV2bGtGQ1p6M3lpOGYvYXMwbkRTUkFrY3dPRFQvN1diQlN4QTk3ZzJmRk1EMEI3WlUvbndGCmU4VnRzNDl3YmZ6QWJRMk40RUc2OEVhODE1VlFRM2N6YWthdjBCdkxHL2UwT0habGxYcUVhV1ZlWFJtSWFFOHcKWko5OEhUaDJMbUlFV2Jpdm94Kyt2UXd3bVhKTm1DRFVXNnVmcHdBOVdKQ0VhYmhxeXdGVzh1dFVENzRTVXE3SApEUDhNamtJZ0o3ekl2Tkd1RkFsSzd6c2xpV2pzeUN1OGVNamhvN2pVRFhGR1R0R0ZMUGtVa08vSysrSGVVRFg0Cm1OWDJ2aHI3NGRqRkNBTTEvOTYxWnB5NUFYUzZkd2g3MFlJL2dMdldSL0J1ejBnNEp6YUI2UFo4M1ErYm9QVHYKM1ZIS2xOWjlKQlhRTmtSc3N6U0dYWG5MYmtOTmNwVFg2cnAyZ1pUSS9NNDhGTnBxanAxOXRpQVg3bWN0cTl2SgpNejhvemhEcHZmSTlnMjFsNFZlRGdpbWEwTDVBc1pQbFdIQlZjcy9yL3dMU2YzWFVYZEs0UHpCQUdIRFBidXYrCnpKOVNqS0NFVll2bHRhMHlUUVBCSFJPa2Y2MG1sVmh6Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\"\n                    }\n                },\n                {\n                    \"type\": \"key\",\n                    \"name\": \"server_key\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBc05QcWU5N0pWN3I5UjlqcUlvWlArRlkvaXNvSWQyMWlGNTdzTjVnYWc5ZUVWWFRPClRINVJyV09rT0NaVTh4MU1FQy9QWHp6M3YwT21tTzl4ZkZlVVdPQ0lkeGZ5SmhjalA4Z1F1ekFrUUljeHlYb3QKL00vM0hsTnhmVXNZU2RBMHlFWWJUcmIycEp3RUYzWkFKdGxYaEJyazB0NEczeW9ZS0paeXRzRzNCdGxzZVBtOAo1bk91UzJtWU04VXBUR2EzS2lBQUd4azFpRDhEQnhpOFRBRHdQZ0RlMU1mV21HZ1pkeStoNk1qTmREVVo5ejcyClRqRHhjWnBvL3lDK2JzM1d5L2E3cHRiRWUwVjNOVUU2ZkRhdUc3OWQvWndLMjZkR3ZVY0lrQzFBZjEyWHl4OHIKbXpSRVZTYzFSZVU5dm5VQTNSeE5RV1VYNTlSTlY0M3ZBelh0L0pWUnl2YTcyWXJnK0NGbjMvYUsxNGxoYkZ6NwpMeFp3TUxSTmJHbUNObE12MDB3WDZUTWk2ODNZMWRDdWZ2OGcxTURmL2hoOWQwNW5YTmxLNzEydE11bWNKMjJMCjJXY09rbnp2Q2FmbXBWRTFWczFWQ2RZUEtldC9QWXd3Snlaei92KzhFVHVBTE4zaEVwZXNxM0tIUEk4bjZ1dUgKRHFPcG8vd0w1bDEyajczK000OVBWSW03V0NaU2pXZUNFRFdHL3NMMFFYN2VVOU5jazFWYkNac1pYNG5Hb1lrbgpaR1NTSFpINTdrY01aQnlFVm5ZZXFrVXQ0L3NxUXVzQVoxMTFVOWNWb0lOdElQTkUvQUgxZGhxTWYxK2M5Y29RCjYrSk1Gb0JKeGdXa3luS3VicEVzWTkxRldyb1FKZFUvSFRzYTFvR0VTaFJ2VDU5VVdEZ3VZRXZIWlk4Q0F3RUEKQVFLQ0FnQVBUR1pQRFRsU004VlIvL3hSdkZrUzNUTm1LSkNPOUpHMkJYUGVZM1IzejUrTlhTdTBCb0craEk1aQpwVDVZUWtLZ2ErSi9GT0ZDVlBJRzdVQmVSNTE0Q3dVRGVMamtmci8zOXJFcjRNQmlMTkFyNUR3eVVUUEtGZUlOCnV2K0E4MWg5czBNTmpsck1ad3NibElsOFV2VjFZblpGb0J2c0Z0SThRTGZ3QTlaMzZ6dXRRNzRLR2h3TVBqaUMKMGgzK2xDeG9vcGdmd0JDWGx3d0dBeWZYVTRWMWQ5SFBpdktRQVFHakJDWDM0OWVTcEQxNDNLT21wQ2xmY01LQQp3QzU1bTZsbndCTUFIamlsaVo4RXBuNE8zUlEzSmxsVlpiaXl4RWdrZkE3TG1uNm9Ca3Jwc2VxdDVObThuRVhKCnBFbXhQcUl5Znc1WUNBMEhhNkM5WUhRN1RPRW9BbHBmWld4azAxSnpoVi9aK3FmVHM1YlMwQWNaTzFOVDRaeDgKWlF2eHQ0TDJINVcrK2R6RjhReTlidzQ2M3lKb1dydWxtNy9uQ3YvL1FpNGl0eHRnYyt0N2lwVXZzaUdTVktVWQpPelhCSXNWTUlnd0F6eUtTSEhPL21rMkEwVkgxaHB3emY2L0RzR2wxSjM4TU9pVGo4dEx1RWt3cFY4WGh5MnZwCkd0cXpsT21DS1hodlVDam9iZWlYSWJwSlIzeEM1NmliRjVadk0vQUdONzI5K0xKRFNwbHJtWVJRVHh1UTJWSE8KQWFXQ01SQWFBdUtCVnBxYTRjd25WRy9POEpkN2ZPSi9tMFlIN3FpRlJHREdvdVNOdHZJUUVtaXVkK3dRWjJ6dwpUcmFNVWk0SENtNEFPa0ZNVXBsRmt1ajA2ZHRqM2RIWUtPQkdMK25vaUp4WmJxb3kwUUtDQVFFQTFiZUl6WHh6CnRFRlp2OGRlOXljOWdCUUtNNUNIbHp6NUNMZXVkTitvemxxeDNCMW1PRStxbFkyaEd3RklIWVBJajFLYS83RlkKbExmNFpiUEJRMFhiNUo5VzQzSGIyTnEydXdRQ3ZiSXhVMW9zaGJVWlhZc2FUaE15azc2VzQ5YjU3UC9HdFE3NwpTbkVZTXNrTzRUQndyS3lBdVhDVHRtTk1Qa2J1NFBxT05PeVFQY3o3Yi92VEU1eERjMENMVS9oUXM3NWFHeCs1Citld2VjeEZNa0JKTVo2c2N5TzcySEdSNHZwTHduRXUvcU5uN2JmUElSaUx1T3BwTTdHNlUwQlBPL2todHJ5ZmQKV3U3MHJYZGJSdGRJUHlsQWxSOG9zczJqWWsrRHNPUnNESm9pbkk5WU1Va3dmdHdCNTRQbytGRGtGOHBzV202RQpSaklpenFBK0piWDlTd0tDQVFFQTA4Ly9oM0NabDg2M2xUZHNrU1JKRUZKc0RtdkZkUStzMWtlNUFwMjdnWTBXCmZJbEFGZFlRR3RORUVlTk9xS3EwdTFtS0lqWHFacWNTdU9DNzZIYTE5Tk9waHVoK1dwV0t2Ni9BTWtQSjE5SUIKQ3RqS0lkc2s0U2M3WG02MnNOV1pnQm5XT1Z3QVdzU0VzTHRac1NvWUJUVTJJS1pBOVJOWHhkSEQreGZ2SWJkNApZYngzTzk4WklNQzNlVFFiOW9jVHZab0RNWGdLaHRtTy9iMnlSeEVDSGpGRmxzYlhhc1RPeG5XOWZSVXJtdGVqCk9pdVlXaEZOM2R6dmpuVEdLY0xieWY0MWpHaUVUeFViUHVpei9ZMmk5NldCNVN6MW9zaGorRU1OaFhtRzZSYXUKQUIvelhwNldtSUJ2bDNpU0lzOGJRNkh3Qm1DTjc1R2VVVG1GUUlyaVRRS0NBUUVBbTkzWVN5MXA0VndNRGI5bApObElMRzM4Q0ZhdGlDRjR5cmpYd2FWSzVkWTVWeTFneHRmMzhSa2hkNkNrZUpGQjVsSFhGajVnVEo1dW84TnVSCnB2T3JOT2swNEhxb3dWWjZFSmtUT3JCY0l4TlFCMUFXS05BTHBrZUFDcHJreDFTQlFHVW0wZVFVUjYyRjNYd2YKZXdMdUdqRlJURzJiZlZpY1FZdFFLd3J4YmczZUFRU2ZtSU9MNVBDQmpPdlU4YS9YZzgvZlBZcjlBeFkrK3VMeAorTjB2bGlnSXZVN3lkYkNkRXpodGZVQU5qeU16cVhRemExdU1iWGNkaFEzOVFHaEIvZGhyRG1TL250Tko1YjEzCjk0bUpLbTkycDR0ckRrVEYxU3h5dWk5TjBqOFQ0U1QyU0RPOXg3ZkROOHRQdk5LYUYvUE01SU5YdXk1VGptajIKQ21EWlV3S0NBUUFOUVJYSFh1ZHRsWFR0ZEhOcHZiQ0l3ZStiRTJsZXd1VlkzMUlYZE5GWDhRRTROOHAzMDFaYwpwMTI2Rk5SR1A3QmhqTi9VOWpTOXliU2xOd0xyTUFxQTBJSHFQRUF6NE9tMnh3T3E0WTBPNFVoSmFubHpsdWYrCjR0cVhOU3hmY201UmtzeFIrSXpaSVRVQWJpalZxa0dvaWNUaVZDVDZjUVJzRDQxSStCMXhxYTV4eHo1YTA4SVoKeDVWemt5d3d5QkVYS3owSjZtNFdOQ1Q3Z2RSWEdCeGUwVXgrZStEZEFJWEQ2M2c1RElzVy9HbHRhVzcySytFSQpnaHZIZVUweExjMWRIWGd5V2hQMWN1ZXFqeHM4UVpHeUYzeENZQWJhOGRrM250S0l5S3NGaVBMSWRUZGdjMklQCkZ2SmtzeG5KN2RYUjdKODlkdXRLMDN6cHJrVEZYaXQ5QW9JQkFDcjhkb2ZCcFlFL1JuTlFwbVNET29DRm1sdTkKQlozN3h5K0puZ2FrQ2RSdHFyR1lDdkZMSnI2QnpGdXE0SHpsM0piTkRCM1BkYSs4Z2VNd2cxU1htTEhrRVFrTQpXV2ptNHpmU3hiTUtKamx3REdoeUlwSU9nQ2FQL1hyT2hxTGl4bnJ6UHFHZmM4R0FZTDE2Rm1PeGVqbVk5aERtCmNibkFqZlNwUjF1WEt2S2d6d1NLQ0VWdzc0VjJSRmRqQXBLVDl3bkpOQTZiWHQ5SXFkaS96d3BYbDQ0OVczdVMKNjRjVVpaK3luYnQ5QUlxbFNjMDdNRHl1TUtueExMbDFLeEJYenNxZlVsYWtlRGVoVmdGS05OOTNXQWJJc09ieAp1d1hTd0hXa1B6RGFHeE9wdzlSMHo2S2t2N25YZnBIYW1RWENBZEdsRjkyc1QwYW80Y3FuejFJSmJ2bz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K\"\n                    }\n                },\n                {\n                    \"type\": \"certificate\",\n                    \"name\": \"cacert\",\n                    \"contents\": {\n                        \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZjekNDQTF1Z0F3SUJBZ0lVVnNRZkFaTW4vazNRTU9nc0RuVEdUaU9PbGJ3d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1NURUxNQWtHQTFVRUJoTUNTVlF4RFRBTEJnTlZCQWdNQkVGemRHa3hFVEFQQmdOVkJBb01DRlJsYzNRZwpUR0ZpTVJnd0ZnWURWUVFEREE5MmJTMWliR0Z1YXk1bVppNXNZVzR3SGhjTk1qTXdOakE0TURrMU5EQTRXaGNOCk1qUXdOakEzTURrMU5EQTRXakJKTVFzd0NRWURWUVFHRXdKSlZERU5NQXNHQTFVRUNBd0VRWE4wYVRFUk1BOEcKQTFVRUNnd0lWR1Z6ZENCTVlXSXhHREFXQmdOVkJBTU1EM1p0TFdKc1lXNXJMbVptTG14aGJqQ0NBaUl3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFLMlQwWXpkcjB0dWQzaVJRNGNzaGNhRVJTRzVjTDE2CkhRblhoYWw4emlUL1VRQUNIUGdzZDYwcWlEaldvQTJXb0lGWFFpUHkzOG1vZGtWRlR4Qmt5U2VldndOOFJiLzEKOFhaMS8yS1RnVmRDcHkvNm11WE15bXZYODJad05CVkV3QnoxUk5kbklUSk44cVh3a0d4bHozbDBib1loRkFyUQpNdmkxcW1RaHpDa2Zpb041MVkrYlBXOXpTQlFQdXNrcXJYYzRqTTJ0VENNQ2pTcFlvd1hXM1ppRmc5WEJ1Z09aCjFmdWd1Zmw4K1FJYzNZSEFoL1Z1NloraXFEOGxQeGRKODlBeDZaazVtOGdkVG9JdUhBbUNWaHFpUXBGRjkzSTgKbkYrSnRuYnBaNTRJUTZBbWYrYiswakMxdmY4Kzg0WUppaEVzWExyaGMxZTRTZ2dwdzEvcWpDb21QblhGVjEzUwpsUG5kVlhVR0taa1ZKdXdZTjJyZElmd3YrdCs5MGhwUVBmNmFBTjRCamRxOXdkdkQzSXVnS2JYZG5CQ0FUTEY4ClYyRTFTSE9VZGdRY3duK1d1WDVVOGdPa3B2b2VFN0g1REJ6Rks1WTZ2SHZlaTRlNkp3RTRDK3FJL1BmbTgreTEKNEpsOFBSOW5JQmdGQ3hrZWpwa2tRQ0I5U0dvMVZidzZhWmdZd0VQNHh6YXFYYXV3L3F4c0oxNUkrRTBndEs1OApuWUtkM0hqelk5Slh6V0NVNTdXbmc2SzNvTTIzNXpyRzJnNm1FaHQ4SStDckVMUFNuZURjZU8zVlJkc2dlblBCCis4U1JxVU8vWG9LWHNEU3I5amoxdWluVzYwTG5MZ0Zmc3JQeGlQVlZlMFh1TFZESlhCSlNoRDZDeGRyMnBSOGQKS25SRDZrTFpZZEtMQWdNQkFBR2pVekJSTUIwR0ExVWREZ1FXQkJRUzZnS2pMK3VFc0dXeXVjbTZyb0xVaXpqVwpWREFmQmdOVkhTTUVHREFXZ0JRUzZnS2pMK3VFc0dXeXVjbTZyb0xVaXpqV1ZEQVBCZ05WSFJNQkFmOEVCVEFECkFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUJad3B4Z2Z4N2thZFhvRHNyT1hUVXJ6dEFPMkFQRVJNaTAKaTkyNk9DTGFPbVVYZW1uKytXSUU1K2tUSE0wcS8vbUZCTURzSmdZSFVLUlNvRGNsNmh4TnVFNUNzS2trRVFTSgpMTHZrWlB0S2J5NGlxMitLZ1JtdVZxbXJNVTBYQzZMZDl3WmttL2huUjNtT3V6bko4MGZmV1JDQ0xGWDEwY2EzCnc5TGM1d1JLTFBZZXQvcEs5SitOYWN3TFJRYTczVFovMUpQNW9BU3czVjNoYkxlLy9UeWpnOURqUlZGY3FYWnEKWWs2Mm5qSkhZVzh3WmlhZzc0QXU4dHE5OG5KandBV1ROMFV5L2w1Q2VpWnV5bzZlU0RHVDNJNm1BdGU1VXBvWAppNXBkYlZ6VDdOZC9IOEwwZHZNdVZ2N0FmakZlcU91cUZNNkkzTnlvbStLWENxNmJQdGxBWEkzeVFZc0t4ZlRkCkw3SnRaTmx6MGJ6eHJhcHI4RmpYcjhML1ZkeHQza00xMnJwb2kzL3hsckR6Q2Q2b2YrQ1MxelBocUdpOUhvcUoKZEU5VGhYMklTdkd2akVSYzVVNFRsNjJBNHNyeGJQbUt0eWx3dGNGVEJacUJiRGY3ZjBBc2cveWhndXdTcktsQQpBNkRWVXVCRFErdGpwZ0N0b0ZlOEhLVDJ6UFVlaEQ2ZjVNQkhmU2ZUZ1crTlhFSXNvVDNsampjY1hsYXhPcFJWCkNQNWxCczNmekxyYnBxbUlLaWZhdWlTNWM4TzlSUjhjQTVzeWlBOTBmbmJIdDlmdGxpRG9jcFRzNUtrbjk2NkIKZUxMM1dXVldCYUtvanJzY1RkVXJoalNnVVBmam5FTXpnVzR2eEc3d3BVNHR2ME4yaEtHUWc0bVhhcDV0SU5Pcwp4WktnZXRHUldnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\"\n                    }\n                }\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Online boutique HTTPS\",\n                    \"names\": [\n                        \"vm-blank.ff.lan\"\n                    ],\n                    \"resolver\": \"192.168.1.13\",\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:443\",\n                        \"http2\": true,\n                        \"tls\": {\n                            \"certificate\": \"server_cert\",\n                            \"key\": \"server_key\",\n                            \"ciphers\": \"DEFAULT\",\n                            \"protocols\": [\n                                \"TLSv1.2\",\n                                \"TLSv1.3\"\n                            ],\n                            \"authentication\": {\n                                \"client\": [\n                                    {\n                                        \"profile\": \"mTLS-client-profile\"\n                                    }\n                                ]\n                            }\n                        }\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/vm-blank.ff.lan_access_log\",\n                        \"error\": \"/var/log/nginx/vm-blank.ff.lan_error_log\"\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://origin_server\"\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"origin_server\",\n                    \"origin\": [\n                        {\n                            \"server\": \"192.168.1.200:80\"\n                        }\n                    ]\n                }\n            ],\n            \"authentication\": {\n                \"client\": [\n                    {\n                        \"name\": \"mTLS-client-profile\",\n                        \"type\": \"mtls\",\n                        \"mtls\": {\n                            \"enabled\": \"on\",\n                            \"client_certificates\": \"cacert\",\n                            \"trusted_ca_certificates\": \"cacert\",\n                            \"ocsp\": {\n                                \"enabled\": \"on\",\n                                \"responder\": \"http://ocsp.k8s.ie.ff.lan\"\n                            },\n                            \"stapling\": {\n                                \"enabled\": true,\n                                \"verify\": true,\n                                \"responder\": \"http://ocsp.k8s.ie.ff.lan\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NGINX Javascript",
									"item": [
										{
											"name": "NGINX Javascript test",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var respData = JSON.parse(responseBody);",
															"",
															"tests[\"configUid is: \" +respData.configUid] = respData.configUid;",
															"",
															"pm.collectionVariables.set('configUid',respData.configUid);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"type\": \"nginxone\",\n        \"nginxone\": {\n            \"url\": \"{{nginxone_url}}\",\n            \"namespace\": \"{{nginxone_namespace}}\",\n            \"token\": \"{{nginxone_token}}\",\n            \"configsyncgroup\": \"{{nginxone_configsyncgroup}}\",\n            \"synctime\": 0,\n            \"modules\": [\n                \"ngx_http_js_module\",\n                \"ngx_stream_js_module\"\n            ]\n        }\n    },\n    \"declaration\": {\n        \"http\": {\n            \"servers\": [\n                {\n                    \"name\": \"Example HTTP server with Javascript\",\n                    \"resolver\": \"8.8.8.8\",\n                    \"names\": [\n                        \"njs-test.vm-test.ie.ff.lan\"\n                    ],\n                    \"listen\": {\n                        \"address\": \"0.0.0.0:80\"\n                    },\n                    \"log\": {\n                        \"access\": \"/var/log/nginx/njs-test.nginx.lab_access_log\",\n                        \"error\": \"/var/log/nginx/njs-test.nginx.lab_error_log\"\n                    },\n                    \"njs\": [\n                        {\n                            \"hook\": {\n                                \"type\": \"js_set\",\n                                \"js_set\": {\n                                    \"variable\": \"$serverVarSetByNjs\"\n                                }\n                            },\n                            \"profile\": \"njs_set_variable\",\n                            \"function\": \"njsSetVariable\"\n                        }\n                    ],\n                    \"headers\": {\n                        \"to_server\": {\n                            \"set\": [\n                                {\n                                    \"name\": \"X-Injected-Client-IP\",\n                                    \"value\": \"$remote_addr\"\n                                },\n                                {\n                                    \"name\": \"Host\",\n                                    \"value\": \"echo.free.beeceptor.com\"\n                                }\n                            ]\n                        }\n                    },\n                    \"locations\": [\n                        {\n                            \"uri\": \"/echo\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-HTTP-Var-Set-By-Njs\",\n                                            \"value\": \"$httpVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"X-Server-Var-Set-By-Njs\",\n                                            \"value\": \"$serverVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        },\n                        {\n                            \"uri\": \"/generatecontent\",\n                            \"urimatch\": \"prefix\",\n                            \"upstream\": \"http://test_upstream\",\n                            \"njs\": [\n                                {\n                                    \"hook\": {\n                                        \"type\": \"js_content\"\n                                    },\n                                    \"profile\": \"njs_set_content\",\n                                    \"function\": \"njsSetContent\"\n                                }\n                            ],\n                            \"headers\": {\n                                \"to_server\": {\n                                    \"set\": [\n                                        {\n                                            \"name\": \"X-Injected-Client-IP\",\n                                            \"value\": \"$remote_addr\"\n                                        },\n                                        {\n                                            \"name\": \"X-HTTP-Var-Set-By-Njs\",\n                                            \"value\": \"$httpVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"X-Server-Var-Set-By-Njs\",\n                                            \"value\": \"$serverVarSetByNjs\"\n                                        },\n                                        {\n                                            \"name\": \"Host\",\n                                            \"value\": \"echo.free.beeceptor.com\"\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"upstreams\": [\n                {\n                    \"name\": \"test_upstream\",\n                    \"origin\": [\n                        {\n                            \"server\": \"echo.free.beeceptor.com\"\n                        }\n                    ]\n                }\n            ],\n            \"njs\": [\n                {\n                    \"hook\": {\n                        \"type\": \"js_set\",\n                        \"js_set\": {\n                            \"variable\": \"$httpVarSetByNjs\"\n                        }\n                    },\n                    \"profile\": \"njs_set_variable\",\n                    \"function\": \"njsSetVariable\"\n                }\n            ],\n            \"njs_profiles\": [\n                {\n                    \"name\": \"njs_set_variable\",\n                    \"file\": {\n                        \"content\": \"ZnVuY3Rpb24gbmpzU2V0VmFyaWFibGUocikgewogICAgcmV0dXJuICJWYXJpYWJsZV9zZXRfYnlfamF2YXNjcmlwdCAtIFVSSSAiK3IudXJpOwp9CgpleHBvcnQgZGVmYXVsdCB7bmpzU2V0VmFyaWFibGV9Cgo=\"\n                    }\n                },\n                {\n                    \"name\": \"njs_set_content\",\n                    \"file\": {\n                        \"content\": \"ZnVuY3Rpb24gbmpzU2V0Q29udGVudChyKSB7CiAgci5yZXR1cm4oMjAwLCAiSGVsbG8gd29ybGQhXG4iKTsKfQoKZXhwb3J0IGRlZmF1bHQge25qc1NldENvbnRlbnR9Cg==\"\n                    }\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://{{ncg_host}}:{{ncg_port}}/{{ngc_api_version}}/config",
													"protocol": "http",
													"host": [
														"{{ncg_host}}"
													],
													"port": "{{ncg_port}}",
													"path": [
														"{{ngc_api_version}}",
														"config"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			],
			"description": "[https://github.com/f5devcentral/NGINX-Declarative-API/blob/main/USAGE-v5.0.md](https://github.com/f5devcentral/NGINX-Declarative-API/blob/main/USAGE-v4.2.md)"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ncg_host",
			"value": "127.0.0.1",
			"type": "default"
		},
		{
			"key": "ncg_port",
			"value": "5000",
			"type": "default"
		},
		{
			"key": "github_root",
			"value": "https://raw.githubusercontent.com/f5devcentral/NGINX-Declarative-API/main/contrib/sample-source-of-truth/configs/",
			"type": "string"
		},
		{
			"key": "configUid",
			"value": ""
		},
		{
			"key": "nim_host",
			"value": "https://nms.k8s.f5.ff.lan",
			"type": "string"
		},
		{
			"key": "nim_username",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "nim_password",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "nim_instancegroup",
			"value": "declarativeAPITest",
			"type": "string"
		},
		{
			"key": "nim_synctime",
			"value": "10",
			"type": "string"
		},
		{
			"key": "github_gitops_root",
			"value": "https://raw.githubusercontent.com/f5devcentral/NGINX-Declarative-API/main/contrib/gitops-examples",
			"type": "string"
		},
		{
			"key": "ngc_api_version",
			"value": "v5.1",
			"type": "string"
		},
		{
			"key": "nginxone_url",
			"value": "https://<TENANT>.volterra.us",
			"type": "string"
		},
		{
			"key": "nginxone_token",
			"value": "<NGINX_ONE_API_TOKEN>",
			"type": "string"
		},
		{
			"key": "nginxone_namespace",
			"value": "default",
			"type": "string"
		},
		{
			"key": "nginxone_configsyncgroup",
			"value": "declarativeAPITest",
			"type": "string"
		}
	]
}